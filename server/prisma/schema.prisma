generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum ActivityAction {
  Created    @map("created")
  Moved      @map("moved")
  Updated    @map("updated")
  Commented  @map("commented")
  Closed     @map("closed")
  Reopened   @map("reopened")
  Assigned   @map("assigned")
  Unassigned @map("unassigned")
  Labeled    @map("labeled")
  Unlabeled  @map("unlabeled")
  Attached   @map("attached")
  Detached   @map("detached")

  @@map("activity_action")
}

enum Color {
  SubtleYellow   @map("subtle_yellow")
  SubtleOrange   @map("subtle_orange")
  SubtleRed      @map("subtle_red")
  SubtlePurple   @map("subtle_purple")
  Green          @map("green")
  Yellow         @map("yellow")
  Orange         @map("orange")
  Red            @map("red")
  Purple         @map("purple")
  BoldGreen      @map("bold_green")
  BoldYellow     @map("bold_yellow")
  BoldOrange     @map("bold_orange")
  BoldRed        @map("bold_red")
  BoldPurple     @map("bold_purple")
  SubtleBlue     @map("subtle_blue")
  SubtleSky      @map("subtle_sky")
  SubtleLime     @map("subtle_lime")
  SubtlePink     @map("subtle_pink")
  SubtleBlack    @map("subtle_black")
  Blue           @map("blue")
  Sky            @map("sky")
  Lime           @map("lime")
  Pink           @map("pink")
  Black          @map("black")
  BoldBlue       @map("bold_blue")
  BoldSky        @map("bold_sky")
  BoldLime       @map("bold_lime")
  BoldPink       @map("bold_pink")
  BoldBlack      @map("bold_black")
  Default        @map("default")

  @@map("color")
}

enum BoardCreationRestrictions {
  WorkspaceMember @map("workspace_member")
  WorkspaceAdmin  @map("workspace_admin")
  Nobody          @map("nobody")

  @@map("board_creation_restrictions")
}

enum BoardRole {
  Admin    @map("admin")
  Member   @map("member")
  Observer @map("observer")

  @@map("board_role")
}

enum BoardSharing {
  Anybody             @map("anybody")
  OnlyWorkspaceMember @map("only_workspace_member")

  @@map("board_sharing")
}

enum BoardVisibility {
  Private           @map("private")
  WorkspaceMembers  @map("workspace_members")
  Public            @map("public")

  @@map("board_visibility")
}

enum CommentingRestrictions {
  Disabled         @map("disabled")
  BoardMembers     @map("board_members")
  WorkspaceMembers @map("workspace_members")

  @@map("commenting_restrictions")
}

enum MemberManageRestrictions {
  Admins  @map("admins")
  Members @map("members")

  @@map("member_manage_restrictions")
}

enum MembershipRestrictions {
  Anybody        @map("anybody")
  SpecificDomain @map("specific_domain")

  @@map("membership_restrictions")
}

enum SlackSharing {
  WorkspaceMember @map("workspace_member")
  Admins          @map("admins")

  @@map("slack_sharing")
}

enum Theme {
  Light  @map("light")
  Dark   @map("dark")
  System @map("system")

  @@map("theme")
}

enum WorkspaceRole {
  Admin  @map("admin")
  Member @map("member")
  Guest  @map("guest")

  @@map("workspace_role")
}

enum WorkspaceType {
  Marketing       @map("marketing")
  SalesCrm        @map("sales_crm")
  HumenResources  @map("humen_resources")
  SmallBusiness   @map("small_business")
  EngineeringIt   @map("engineering_it")
  Education       @map("education")
  Operations      @map("operations")
  Other           @map("other")

  @@map("workspace_type")
}

enum WorkspaceVisibility {
  Private @map("private")
  Public  @map("public")

  @@map("workspace_visibility")
}

// Models
model ActivityLog {
  @@map("activity_log")

  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId   String         @map("board_id") @db.Uuid
  cardId    String?        @map("card_id") @db.Uuid
  userId    String?        @map("user_id") @db.Uuid
  action    ActivityAction
  payload   Json?
  createdAt DateTime       @map("created_at") @default(now()) @db.Timestamptz(6)

  board     Board          @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  card      Card?          @relation(fields: [cardId], references: [id], onUpdate: NoAction)
  user      User?          @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([boardId, createdAt(sort: Desc)], map: "activity_board_time_idx")
  @@index([cardId, createdAt(sort: Desc)], map: "activity_card_time_idx")
}

model Attachment {
  @@map("attachments")

  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardId    String   @map("card_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  url       String
  filename  String
  bytes     BigInt?
  meta      Json?
  createdAt DateTime @map("created_at") @default(now()) @db.Timestamptz(6)

  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([cardId, createdAt(sort: Desc)], map: "attachments_card_time_idx")
}

model BoardMember {
  @@map("board_members")

  boardId  String    @map("board_id") @db.Uuid
  userId   String    @map("user_id") @db.Uuid
  role     BoardRole @default(Member)
  joinedAt DateTime  @map("joined_at") @default(now()) @db.Timestamptz(6)

  board    Board     @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([boardId, userId])
  @@index([userId], map: "board_members_user_idx")
}

model Board {
  @@map("boards")

  id             String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspaceId    String                   @map("workspace_id") @db.Uuid
  name           String
  description    String?
  background     String                   
  createdBy      String                   @map("created_by") @db.Uuid
  allowCovers    Boolean                  @map("allow_covers") @default(true)
  showComplete   Boolean                  @map("show_complete") @default(true)
  createdAt      DateTime                 @map("created_at") @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime                 @map("updated_at") @default(now()) @db.Timestamptz(6)
  lastActivityAt DateTime?                @map("last_activity_at") @db.Timestamptz(6)
  visibility     BoardVisibility          @default(WorkspaceMembers)
  memberManage   MemberManageRestrictions @map("member_manage") @default(Members)
  commenting     CommentingRestrictions   @default(BoardMembers)

  activityLogs   ActivityLog[]
  boardMembers   BoardMember[]
  creator        User                     @relation(fields: [createdBy], references: [id], onUpdate: NoAction)
  workspace      Workspace                @relation(fields: [workspaceId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  labels         Label[]
  lists          List[]

  @@index([workspaceId], map: "boards_workspace_idx")
}

model CardAssignee {
  @@map("card_assignees")

  cardId String @map("card_id") @db.Uuid
  userId String @map("user_id") @db.Uuid

  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([cardId, userId])
  @@index([userId], map: "card_assignees_user_idx")
}

model CardLabel {
  @@map("card_labels")

  cardId  String @map("card_id") @db.Uuid
  labelId String @map("label_id") @db.Uuid

  card    Card   @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([cardId, labelId])
}

model CardWatcher {
  @@map("card_watchers")

  cardId    String   @map("card_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @map("created_at") @default(now()) @db.Timestamptz(6)

  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([cardId, userId])
  @@index([userId], map: "card_watchers_user_idx")
}

model Card {
  @@map("cards")

  id            String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listId        String                   @map("list_id") @db.Uuid
  title         String
  description   String?
  dueDate       DateTime?                @map("due_date") @db.Timestamptz(6)
  startDate     DateTime?                @map("start_date") @db.Timestamptz(6)
  position      Decimal                  @db.Decimal(16, 6)
  isArchived    Boolean                  @map("is_archived") @default(false)
  createdBy     String                   @map("created_by") @db.Uuid
  coverImageUrl String?                  @map("cover_image_url")
  subscribed    Boolean                  @default(false)
  createdAt     DateTime                 @map("created_at") @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime                 @map("updated_at") @default(now()) @db.Timestamptz(6)
  searchDoc     Unsupported("tsvector")? @map("search_doc")

  activityLogs  ActivityLog[]
  attachments   Attachment[]
  assignees     CardAssignee[]
  cardLabels    CardLabel[]
  watchers      CardWatcher[]
  creator       User                     @relation(fields: [createdBy], references: [id], onUpdate: NoAction)
  list          List                     @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  checklists    Checklist[]
  comments      Comment[]

  @@unique([listId, position], map: "cards_order_idx")
  @@index([searchDoc], map: "cards_search_gin_idx", type: Gin)
}

model ChecklistItemAssignee {
  @@map("checklist_item_assignees")

  itemId String @map("item_id") @db.Uuid
  userId String @map("user_id") @db.Uuid

  item   ChecklistItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([itemId, userId])
}

model ChecklistItem {
  @@map("checklist_items")

  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checklistId String          @map("checklist_id") @db.Uuid
  text        String
  isCompleted Boolean         @map("is_completed") @default(false)
  dueDate     DateTime?       @map("due_date") @db.Timestamptz(6)
  position    Decimal         @default(1000) @db.Decimal(16, 6)

  assignees   ChecklistItemAssignee[]
  checklist   Checklist       @relation(fields: [checklistId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([checklistId, position], map: "checklist_items_parent_pos_idx")
}

model Checklist {
  @@map("checklists")

  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardId    String         @map("card_id") @db.Uuid
  title     String
  position  Decimal        @default(1000) @db.Decimal(16, 6)

  items     ChecklistItem[]
  card      Card           @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([cardId, position], map: "checklists_card_pos_idx")
}

model Comment {
  @@map("comments")

  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardId    String   @map("card_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  text      String
  createdAt DateTime @map("created_at") @default(now()) @db.Timestamptz(6)

  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([cardId, createdAt(sort: Desc)], map: "comments_card_time_idx")
}

model Label {
  @@map("labels")

  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId    String     @map("board_id") @db.Uuid
  name       String?
  color      Color

  cardLabels CardLabel[]
  board      Board      @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([boardId, name])
  @@index([boardId], map: "labels_board_idx")
}

model ListWatcher {
  @@map("list_watchers")

  listId    String   @map("list_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @map("created_at") @default(now()) @db.Timestamptz(6)

  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([listId, userId])
}

model List {
  @@map("lists")

  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  boardId    String        @map("board_id") @db.Uuid
  name       String
  position   Decimal       @db.Decimal(16, 6)
  isArchived Boolean       @map("is_archived") @default(false)
  subscribed Boolean       @default(false)

  cards      Card[]
  watchers   ListWatcher[]
  board      Board         @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([boardId, position], map: "lists_order_idx")
}

model User {
  @@map("users")

  id                       String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId                  String                    @map("clerk_id") @unique
  email                    String                    @unique(map: "users_email_idx") @db.Citext
  username                 String?                   @unique(map: "users_username_idx") @db.Citext
  fullName                 String                    @map("full_name")
  avatarUrl                String                    @map("avatar_url")
  theme                    Theme                     @default(System)
  recentlyViewedBoards     String[]                  @map("recently_viewed_boards") @default([])
  emailNotification        Boolean                   @map("email_notification") @default(true)
  pushNotification         Boolean                   @map("push_notification") @default(false)
  createdAt                DateTime                  @map("created_at") @default(now()) @db.Timestamptz(6)
  bio                      String?

  activityLogs             ActivityLog[]
  attachments              Attachment[]
  boardMembers             BoardMember[]
  boards                   Board[]
  cardAssignees            CardAssignee[]
  cardWatchers             CardWatcher[]
  cards                    Card[]
  checklistItemAssignees   ChecklistItemAssignee[]
  comments                 Comment[]
  listWatchers             ListWatcher[]
  workspaceMembers         WorkspaceMember[]
  workspaces               Workspace[]
}

model WorkspaceMember {
  @@map("workspace_members")

  workspaceId String        @map("workspace_id") @db.Uuid
  userId      String        @map("user_id") @db.Uuid
  role        WorkspaceRole @default(Member)
  joinedAt    DateTime      @map("joined_at") @default(now()) @db.Timestamptz(6)

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([workspaceId, userId])
}

model Workspace {
  @@map("workspaces")

  id                              String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                            String
  description                     String?
  visibility                      WorkspaceVisibility       @default(Private)
  premium                         Boolean                   @default(false)
  createdAt                       DateTime                  @map("created_at") @default(now()) @db.Timestamptz(6)
  updatedAt                       DateTime                  @map("updated_at") @default(now()) @db.Timestamptz(6)
  type                            WorkspaceType             
  createdBy                       String                    @map("created_by") @db.Uuid
  workspaceMembershipRestrictions MembershipRestrictions    @map("workspace_membership_restrictions") @default(Anybody)
  publicBoardCreation             BoardCreationRestrictions @map("public_board_creation") @default(WorkspaceMember)
  workspaceBoardCreation          BoardCreationRestrictions @map("workspace_board_creation") @default(WorkspaceMember)
  privateBoardCreation            BoardCreationRestrictions @map("private_board_creation") @default(WorkspaceMember)
  publicBoardDeletion             BoardCreationRestrictions @map("public_board_deletion") @default(WorkspaceMember)
  workspaceBoardDeletion          BoardCreationRestrictions @map("workspace_board_deletion") @default(WorkspaceMember)
  privateBoardDeletion            BoardCreationRestrictions @map("private_board_deletion") @default(WorkspaceMember)
  allowGuestSharing               BoardSharing              @map("allow_guest_sharing") @default(Anybody)
  allowSlackIntegration           SlackSharing              @map("allow_slack_integration") @default(WorkspaceMember)

  boards                          Board[]
  workspaceMembers                WorkspaceMember[]
  creator                         User                      @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([visibility])
}