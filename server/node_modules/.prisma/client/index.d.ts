
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ActivityLog
 * 
 */
export type ActivityLog = $Result.DefaultSelection<Prisma.$ActivityLogPayload>
/**
 * Model Attachment
 * 
 */
export type Attachment = $Result.DefaultSelection<Prisma.$AttachmentPayload>
/**
 * Model BoardMember
 * 
 */
export type BoardMember = $Result.DefaultSelection<Prisma.$BoardMemberPayload>
/**
 * Model Board
 * 
 */
export type Board = $Result.DefaultSelection<Prisma.$BoardPayload>
/**
 * Model CardAssignee
 * 
 */
export type CardAssignee = $Result.DefaultSelection<Prisma.$CardAssigneePayload>
/**
 * Model CardLabel
 * 
 */
export type CardLabel = $Result.DefaultSelection<Prisma.$CardLabelPayload>
/**
 * Model CardWatcher
 * 
 */
export type CardWatcher = $Result.DefaultSelection<Prisma.$CardWatcherPayload>
/**
 * Model Card
 * 
 */
export type Card = $Result.DefaultSelection<Prisma.$CardPayload>
/**
 * Model ChecklistItemAssignee
 * 
 */
export type ChecklistItemAssignee = $Result.DefaultSelection<Prisma.$ChecklistItemAssigneePayload>
/**
 * Model ChecklistItem
 * 
 */
export type ChecklistItem = $Result.DefaultSelection<Prisma.$ChecklistItemPayload>
/**
 * Model Checklist
 * 
 */
export type Checklist = $Result.DefaultSelection<Prisma.$ChecklistPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Label
 * 
 */
export type Label = $Result.DefaultSelection<Prisma.$LabelPayload>
/**
 * Model ListWatcher
 * 
 */
export type ListWatcher = $Result.DefaultSelection<Prisma.$ListWatcherPayload>
/**
 * Model List
 * 
 */
export type List = $Result.DefaultSelection<Prisma.$ListPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model WorkspaceMember
 * 
 */
export type WorkspaceMember = $Result.DefaultSelection<Prisma.$WorkspaceMemberPayload>
/**
 * Model Workspace
 * 
 */
export type Workspace = $Result.DefaultSelection<Prisma.$WorkspacePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ActivityAction: {
  Created: 'Created',
  Moved: 'Moved',
  Updated: 'Updated',
  Commented: 'Commented',
  Closed: 'Closed',
  Reopened: 'Reopened',
  Assigned: 'Assigned',
  Unassigned: 'Unassigned',
  Labeled: 'Labeled',
  Unlabeled: 'Unlabeled',
  Attached: 'Attached',
  Detached: 'Detached'
};

export type ActivityAction = (typeof ActivityAction)[keyof typeof ActivityAction]


export const Color: {
  SubtleYellow: 'SubtleYellow',
  SubtleOrange: 'SubtleOrange',
  SubtleRed: 'SubtleRed',
  SubtlePurple: 'SubtlePurple',
  Green: 'Green',
  Yellow: 'Yellow',
  Orange: 'Orange',
  Red: 'Red',
  Purple: 'Purple',
  BoldGreen: 'BoldGreen',
  BoldYellow: 'BoldYellow',
  BoldOrange: 'BoldOrange',
  BoldRed: 'BoldRed',
  BoldPurple: 'BoldPurple',
  SubtleBlue: 'SubtleBlue',
  SubtleSky: 'SubtleSky',
  SubtleLime: 'SubtleLime',
  SubtlePink: 'SubtlePink',
  SubtleBlack: 'SubtleBlack',
  Blue: 'Blue',
  Sky: 'Sky',
  Lime: 'Lime',
  Pink: 'Pink',
  Black: 'Black',
  BoldBlue: 'BoldBlue',
  BoldSky: 'BoldSky',
  BoldLime: 'BoldLime',
  BoldPink: 'BoldPink',
  BoldBlack: 'BoldBlack',
  Default: 'Default'
};

export type Color = (typeof Color)[keyof typeof Color]


export const BoardBackground: {
  Mountain: 'Mountain',
  Valley: 'Valley',
  Tree: 'Tree',
  Snow: 'Snow'
};

export type BoardBackground = (typeof BoardBackground)[keyof typeof BoardBackground]


export const BoardCreationRestrictions: {
  WorkspaceMember: 'WorkspaceMember',
  WorkspaceAdmin: 'WorkspaceAdmin',
  Nobody: 'Nobody'
};

export type BoardCreationRestrictions = (typeof BoardCreationRestrictions)[keyof typeof BoardCreationRestrictions]


export const BoardRole: {
  Admin: 'Admin',
  Member: 'Member',
  Observer: 'Observer'
};

export type BoardRole = (typeof BoardRole)[keyof typeof BoardRole]


export const BoardSharing: {
  Anybody: 'Anybody',
  OnlyWorkspaceMember: 'OnlyWorkspaceMember'
};

export type BoardSharing = (typeof BoardSharing)[keyof typeof BoardSharing]


export const BoardVisibility: {
  Private: 'Private',
  WorkspaceMembers: 'WorkspaceMembers',
  Public: 'Public'
};

export type BoardVisibility = (typeof BoardVisibility)[keyof typeof BoardVisibility]


export const CommentingRestrictions: {
  Disabled: 'Disabled',
  BoardMembers: 'BoardMembers',
  WorkspaceMembers: 'WorkspaceMembers'
};

export type CommentingRestrictions = (typeof CommentingRestrictions)[keyof typeof CommentingRestrictions]


export const MemberManageRestrictions: {
  Admins: 'Admins',
  Members: 'Members'
};

export type MemberManageRestrictions = (typeof MemberManageRestrictions)[keyof typeof MemberManageRestrictions]


export const MembershipRestrictions: {
  Anybody: 'Anybody',
  SpecificDomain: 'SpecificDomain'
};

export type MembershipRestrictions = (typeof MembershipRestrictions)[keyof typeof MembershipRestrictions]


export const SlackSharing: {
  WorkspaceMember: 'WorkspaceMember',
  Admins: 'Admins'
};

export type SlackSharing = (typeof SlackSharing)[keyof typeof SlackSharing]


export const Theme: {
  Light: 'Light',
  Dark: 'Dark',
  System: 'System'
};

export type Theme = (typeof Theme)[keyof typeof Theme]


export const WorkspaceRole: {
  Admin: 'Admin',
  Member: 'Member',
  Guest: 'Guest'
};

export type WorkspaceRole = (typeof WorkspaceRole)[keyof typeof WorkspaceRole]


export const WorkspaceType: {
  Marketing: 'Marketing',
  SalesCrm: 'SalesCrm',
  HumenResources: 'HumenResources',
  SmallBusiness: 'SmallBusiness',
  EngineeringIt: 'EngineeringIt',
  Education: 'Education',
  Operations: 'Operations',
  Other: 'Other'
};

export type WorkspaceType = (typeof WorkspaceType)[keyof typeof WorkspaceType]


export const WorkspaceVisibility: {
  Private: 'Private',
  Public: 'Public'
};

export type WorkspaceVisibility = (typeof WorkspaceVisibility)[keyof typeof WorkspaceVisibility]

}

export type ActivityAction = $Enums.ActivityAction

export const ActivityAction: typeof $Enums.ActivityAction

export type Color = $Enums.Color

export const Color: typeof $Enums.Color

export type BoardBackground = $Enums.BoardBackground

export const BoardBackground: typeof $Enums.BoardBackground

export type BoardCreationRestrictions = $Enums.BoardCreationRestrictions

export const BoardCreationRestrictions: typeof $Enums.BoardCreationRestrictions

export type BoardRole = $Enums.BoardRole

export const BoardRole: typeof $Enums.BoardRole

export type BoardSharing = $Enums.BoardSharing

export const BoardSharing: typeof $Enums.BoardSharing

export type BoardVisibility = $Enums.BoardVisibility

export const BoardVisibility: typeof $Enums.BoardVisibility

export type CommentingRestrictions = $Enums.CommentingRestrictions

export const CommentingRestrictions: typeof $Enums.CommentingRestrictions

export type MemberManageRestrictions = $Enums.MemberManageRestrictions

export const MemberManageRestrictions: typeof $Enums.MemberManageRestrictions

export type MembershipRestrictions = $Enums.MembershipRestrictions

export const MembershipRestrictions: typeof $Enums.MembershipRestrictions

export type SlackSharing = $Enums.SlackSharing

export const SlackSharing: typeof $Enums.SlackSharing

export type Theme = $Enums.Theme

export const Theme: typeof $Enums.Theme

export type WorkspaceRole = $Enums.WorkspaceRole

export const WorkspaceRole: typeof $Enums.WorkspaceRole

export type WorkspaceType = $Enums.WorkspaceType

export const WorkspaceType: typeof $Enums.WorkspaceType

export type WorkspaceVisibility = $Enums.WorkspaceVisibility

export const WorkspaceVisibility: typeof $Enums.WorkspaceVisibility

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ActivityLogs
 * const activityLogs = await prisma.activityLog.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ActivityLogs
   * const activityLogs = await prisma.activityLog.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.activityLog`: Exposes CRUD operations for the **ActivityLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityLogs
    * const activityLogs = await prisma.activityLog.findMany()
    * ```
    */
  get activityLog(): Prisma.ActivityLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attachment`: Exposes CRUD operations for the **Attachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attachments
    * const attachments = await prisma.attachment.findMany()
    * ```
    */
  get attachment(): Prisma.AttachmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.boardMember`: Exposes CRUD operations for the **BoardMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BoardMembers
    * const boardMembers = await prisma.boardMember.findMany()
    * ```
    */
  get boardMember(): Prisma.BoardMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.board`: Exposes CRUD operations for the **Board** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Boards
    * const boards = await prisma.board.findMany()
    * ```
    */
  get board(): Prisma.BoardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cardAssignee`: Exposes CRUD operations for the **CardAssignee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardAssignees
    * const cardAssignees = await prisma.cardAssignee.findMany()
    * ```
    */
  get cardAssignee(): Prisma.CardAssigneeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cardLabel`: Exposes CRUD operations for the **CardLabel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardLabels
    * const cardLabels = await prisma.cardLabel.findMany()
    * ```
    */
  get cardLabel(): Prisma.CardLabelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cardWatcher`: Exposes CRUD operations for the **CardWatcher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CardWatchers
    * const cardWatchers = await prisma.cardWatcher.findMany()
    * ```
    */
  get cardWatcher(): Prisma.CardWatcherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.card`: Exposes CRUD operations for the **Card** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cards
    * const cards = await prisma.card.findMany()
    * ```
    */
  get card(): Prisma.CardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.checklistItemAssignee`: Exposes CRUD operations for the **ChecklistItemAssignee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChecklistItemAssignees
    * const checklistItemAssignees = await prisma.checklistItemAssignee.findMany()
    * ```
    */
  get checklistItemAssignee(): Prisma.ChecklistItemAssigneeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.checklistItem`: Exposes CRUD operations for the **ChecklistItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChecklistItems
    * const checklistItems = await prisma.checklistItem.findMany()
    * ```
    */
  get checklistItem(): Prisma.ChecklistItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.checklist`: Exposes CRUD operations for the **Checklist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Checklists
    * const checklists = await prisma.checklist.findMany()
    * ```
    */
  get checklist(): Prisma.ChecklistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.label`: Exposes CRUD operations for the **Label** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Labels
    * const labels = await prisma.label.findMany()
    * ```
    */
  get label(): Prisma.LabelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.listWatcher`: Exposes CRUD operations for the **ListWatcher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ListWatchers
    * const listWatchers = await prisma.listWatcher.findMany()
    * ```
    */
  get listWatcher(): Prisma.ListWatcherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.list`: Exposes CRUD operations for the **List** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lists
    * const lists = await prisma.list.findMany()
    * ```
    */
  get list(): Prisma.ListDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspaceMember`: Exposes CRUD operations for the **WorkspaceMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkspaceMembers
    * const workspaceMembers = await prisma.workspaceMember.findMany()
    * ```
    */
  get workspaceMember(): Prisma.WorkspaceMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workspace`: Exposes CRUD operations for the **Workspace** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workspaces
    * const workspaces = await prisma.workspace.findMany()
    * ```
    */
  get workspace(): Prisma.WorkspaceDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ActivityLog: 'ActivityLog',
    Attachment: 'Attachment',
    BoardMember: 'BoardMember',
    Board: 'Board',
    CardAssignee: 'CardAssignee',
    CardLabel: 'CardLabel',
    CardWatcher: 'CardWatcher',
    Card: 'Card',
    ChecklistItemAssignee: 'ChecklistItemAssignee',
    ChecklistItem: 'ChecklistItem',
    Checklist: 'Checklist',
    Comment: 'Comment',
    Label: 'Label',
    ListWatcher: 'ListWatcher',
    List: 'List',
    User: 'User',
    WorkspaceMember: 'WorkspaceMember',
    Workspace: 'Workspace'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "activityLog" | "attachment" | "boardMember" | "board" | "cardAssignee" | "cardLabel" | "cardWatcher" | "card" | "checklistItemAssignee" | "checklistItem" | "checklist" | "comment" | "label" | "listWatcher" | "list" | "user" | "workspaceMember" | "workspace"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ActivityLog: {
        payload: Prisma.$ActivityLogPayload<ExtArgs>
        fields: Prisma.ActivityLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          findFirst: {
            args: Prisma.ActivityLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          findMany: {
            args: Prisma.ActivityLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          create: {
            args: Prisma.ActivityLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          createMany: {
            args: Prisma.ActivityLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          delete: {
            args: Prisma.ActivityLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          update: {
            args: Prisma.ActivityLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          deleteMany: {
            args: Prisma.ActivityLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>[]
          }
          upsert: {
            args: Prisma.ActivityLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityLogPayload>
          }
          aggregate: {
            args: Prisma.ActivityLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityLog>
          }
          groupBy: {
            args: Prisma.ActivityLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityLogCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityLogCountAggregateOutputType> | number
          }
        }
      }
      Attachment: {
        payload: Prisma.$AttachmentPayload<ExtArgs>
        fields: Prisma.AttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findFirst: {
            args: Prisma.AttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findMany: {
            args: Prisma.AttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          create: {
            args: Prisma.AttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          createMany: {
            args: Prisma.AttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttachmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          delete: {
            args: Prisma.AttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          update: {
            args: Prisma.AttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          deleteMany: {
            args: Prisma.AttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttachmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          upsert: {
            args: Prisma.AttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          aggregate: {
            args: Prisma.AttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttachment>
          }
          groupBy: {
            args: Prisma.AttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<AttachmentCountAggregateOutputType> | number
          }
        }
      }
      BoardMember: {
        payload: Prisma.$BoardMemberPayload<ExtArgs>
        fields: Prisma.BoardMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload>
          }
          findFirst: {
            args: Prisma.BoardMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload>
          }
          findMany: {
            args: Prisma.BoardMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload>[]
          }
          create: {
            args: Prisma.BoardMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload>
          }
          createMany: {
            args: Prisma.BoardMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BoardMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload>[]
          }
          delete: {
            args: Prisma.BoardMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload>
          }
          update: {
            args: Prisma.BoardMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload>
          }
          deleteMany: {
            args: Prisma.BoardMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BoardMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BoardMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload>[]
          }
          upsert: {
            args: Prisma.BoardMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardMemberPayload>
          }
          aggregate: {
            args: Prisma.BoardMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoardMember>
          }
          groupBy: {
            args: Prisma.BoardMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<BoardMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardMemberCountArgs<ExtArgs>
            result: $Utils.Optional<BoardMemberCountAggregateOutputType> | number
          }
        }
      }
      Board: {
        payload: Prisma.$BoardPayload<ExtArgs>
        fields: Prisma.BoardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          findFirst: {
            args: Prisma.BoardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          findMany: {
            args: Prisma.BoardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>[]
          }
          create: {
            args: Prisma.BoardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          createMany: {
            args: Prisma.BoardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BoardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>[]
          }
          delete: {
            args: Prisma.BoardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          update: {
            args: Prisma.BoardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          deleteMany: {
            args: Prisma.BoardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BoardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BoardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>[]
          }
          upsert: {
            args: Prisma.BoardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardPayload>
          }
          aggregate: {
            args: Prisma.BoardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoard>
          }
          groupBy: {
            args: Prisma.BoardGroupByArgs<ExtArgs>
            result: $Utils.Optional<BoardGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardCountArgs<ExtArgs>
            result: $Utils.Optional<BoardCountAggregateOutputType> | number
          }
        }
      }
      CardAssignee: {
        payload: Prisma.$CardAssigneePayload<ExtArgs>
        fields: Prisma.CardAssigneeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardAssigneeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardAssigneeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload>
          }
          findFirst: {
            args: Prisma.CardAssigneeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardAssigneeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload>
          }
          findMany: {
            args: Prisma.CardAssigneeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload>[]
          }
          create: {
            args: Prisma.CardAssigneeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload>
          }
          createMany: {
            args: Prisma.CardAssigneeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CardAssigneeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload>[]
          }
          delete: {
            args: Prisma.CardAssigneeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload>
          }
          update: {
            args: Prisma.CardAssigneeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload>
          }
          deleteMany: {
            args: Prisma.CardAssigneeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardAssigneeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CardAssigneeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload>[]
          }
          upsert: {
            args: Prisma.CardAssigneeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardAssigneePayload>
          }
          aggregate: {
            args: Prisma.CardAssigneeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCardAssignee>
          }
          groupBy: {
            args: Prisma.CardAssigneeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardAssigneeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardAssigneeCountArgs<ExtArgs>
            result: $Utils.Optional<CardAssigneeCountAggregateOutputType> | number
          }
        }
      }
      CardLabel: {
        payload: Prisma.$CardLabelPayload<ExtArgs>
        fields: Prisma.CardLabelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardLabelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardLabelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload>
          }
          findFirst: {
            args: Prisma.CardLabelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardLabelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload>
          }
          findMany: {
            args: Prisma.CardLabelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload>[]
          }
          create: {
            args: Prisma.CardLabelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload>
          }
          createMany: {
            args: Prisma.CardLabelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CardLabelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload>[]
          }
          delete: {
            args: Prisma.CardLabelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload>
          }
          update: {
            args: Prisma.CardLabelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload>
          }
          deleteMany: {
            args: Prisma.CardLabelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardLabelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CardLabelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload>[]
          }
          upsert: {
            args: Prisma.CardLabelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardLabelPayload>
          }
          aggregate: {
            args: Prisma.CardLabelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCardLabel>
          }
          groupBy: {
            args: Prisma.CardLabelGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardLabelGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardLabelCountArgs<ExtArgs>
            result: $Utils.Optional<CardLabelCountAggregateOutputType> | number
          }
        }
      }
      CardWatcher: {
        payload: Prisma.$CardWatcherPayload<ExtArgs>
        fields: Prisma.CardWatcherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardWatcherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardWatcherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload>
          }
          findFirst: {
            args: Prisma.CardWatcherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardWatcherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload>
          }
          findMany: {
            args: Prisma.CardWatcherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload>[]
          }
          create: {
            args: Prisma.CardWatcherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload>
          }
          createMany: {
            args: Prisma.CardWatcherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CardWatcherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload>[]
          }
          delete: {
            args: Prisma.CardWatcherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload>
          }
          update: {
            args: Prisma.CardWatcherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload>
          }
          deleteMany: {
            args: Prisma.CardWatcherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardWatcherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CardWatcherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload>[]
          }
          upsert: {
            args: Prisma.CardWatcherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardWatcherPayload>
          }
          aggregate: {
            args: Prisma.CardWatcherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCardWatcher>
          }
          groupBy: {
            args: Prisma.CardWatcherGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardWatcherGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardWatcherCountArgs<ExtArgs>
            result: $Utils.Optional<CardWatcherCountAggregateOutputType> | number
          }
        }
      }
      Card: {
        payload: Prisma.$CardPayload<ExtArgs>
        fields: Prisma.CardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          findFirst: {
            args: Prisma.CardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          findMany: {
            args: Prisma.CardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>[]
          }
          create: {
            args: Prisma.CardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          createMany: {
            args: Prisma.CardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>[]
          }
          delete: {
            args: Prisma.CardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          update: {
            args: Prisma.CardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          deleteMany: {
            args: Prisma.CardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>[]
          }
          upsert: {
            args: Prisma.CardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CardPayload>
          }
          aggregate: {
            args: Prisma.CardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCard>
          }
          groupBy: {
            args: Prisma.CardGroupByArgs<ExtArgs>
            result: $Utils.Optional<CardGroupByOutputType>[]
          }
          count: {
            args: Prisma.CardCountArgs<ExtArgs>
            result: $Utils.Optional<CardCountAggregateOutputType> | number
          }
        }
      }
      ChecklistItemAssignee: {
        payload: Prisma.$ChecklistItemAssigneePayload<ExtArgs>
        fields: Prisma.ChecklistItemAssigneeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChecklistItemAssigneeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChecklistItemAssigneeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload>
          }
          findFirst: {
            args: Prisma.ChecklistItemAssigneeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChecklistItemAssigneeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload>
          }
          findMany: {
            args: Prisma.ChecklistItemAssigneeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload>[]
          }
          create: {
            args: Prisma.ChecklistItemAssigneeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload>
          }
          createMany: {
            args: Prisma.ChecklistItemAssigneeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChecklistItemAssigneeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload>[]
          }
          delete: {
            args: Prisma.ChecklistItemAssigneeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload>
          }
          update: {
            args: Prisma.ChecklistItemAssigneeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload>
          }
          deleteMany: {
            args: Prisma.ChecklistItemAssigneeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChecklistItemAssigneeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChecklistItemAssigneeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload>[]
          }
          upsert: {
            args: Prisma.ChecklistItemAssigneeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemAssigneePayload>
          }
          aggregate: {
            args: Prisma.ChecklistItemAssigneeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChecklistItemAssignee>
          }
          groupBy: {
            args: Prisma.ChecklistItemAssigneeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChecklistItemAssigneeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChecklistItemAssigneeCountArgs<ExtArgs>
            result: $Utils.Optional<ChecklistItemAssigneeCountAggregateOutputType> | number
          }
        }
      }
      ChecklistItem: {
        payload: Prisma.$ChecklistItemPayload<ExtArgs>
        fields: Prisma.ChecklistItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChecklistItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChecklistItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload>
          }
          findFirst: {
            args: Prisma.ChecklistItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChecklistItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload>
          }
          findMany: {
            args: Prisma.ChecklistItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload>[]
          }
          create: {
            args: Prisma.ChecklistItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload>
          }
          createMany: {
            args: Prisma.ChecklistItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChecklistItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload>[]
          }
          delete: {
            args: Prisma.ChecklistItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload>
          }
          update: {
            args: Prisma.ChecklistItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload>
          }
          deleteMany: {
            args: Prisma.ChecklistItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChecklistItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChecklistItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload>[]
          }
          upsert: {
            args: Prisma.ChecklistItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistItemPayload>
          }
          aggregate: {
            args: Prisma.ChecklistItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChecklistItem>
          }
          groupBy: {
            args: Prisma.ChecklistItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChecklistItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChecklistItemCountArgs<ExtArgs>
            result: $Utils.Optional<ChecklistItemCountAggregateOutputType> | number
          }
        }
      }
      Checklist: {
        payload: Prisma.$ChecklistPayload<ExtArgs>
        fields: Prisma.ChecklistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChecklistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChecklistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload>
          }
          findFirst: {
            args: Prisma.ChecklistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChecklistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload>
          }
          findMany: {
            args: Prisma.ChecklistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload>[]
          }
          create: {
            args: Prisma.ChecklistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload>
          }
          createMany: {
            args: Prisma.ChecklistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChecklistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload>[]
          }
          delete: {
            args: Prisma.ChecklistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload>
          }
          update: {
            args: Prisma.ChecklistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload>
          }
          deleteMany: {
            args: Prisma.ChecklistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChecklistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChecklistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload>[]
          }
          upsert: {
            args: Prisma.ChecklistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChecklistPayload>
          }
          aggregate: {
            args: Prisma.ChecklistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChecklist>
          }
          groupBy: {
            args: Prisma.ChecklistGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChecklistGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChecklistCountArgs<ExtArgs>
            result: $Utils.Optional<ChecklistCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Label: {
        payload: Prisma.$LabelPayload<ExtArgs>
        fields: Prisma.LabelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LabelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LabelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          findFirst: {
            args: Prisma.LabelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LabelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          findMany: {
            args: Prisma.LabelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>[]
          }
          create: {
            args: Prisma.LabelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          createMany: {
            args: Prisma.LabelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LabelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>[]
          }
          delete: {
            args: Prisma.LabelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          update: {
            args: Prisma.LabelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          deleteMany: {
            args: Prisma.LabelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LabelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LabelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>[]
          }
          upsert: {
            args: Prisma.LabelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          aggregate: {
            args: Prisma.LabelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLabel>
          }
          groupBy: {
            args: Prisma.LabelGroupByArgs<ExtArgs>
            result: $Utils.Optional<LabelGroupByOutputType>[]
          }
          count: {
            args: Prisma.LabelCountArgs<ExtArgs>
            result: $Utils.Optional<LabelCountAggregateOutputType> | number
          }
        }
      }
      ListWatcher: {
        payload: Prisma.$ListWatcherPayload<ExtArgs>
        fields: Prisma.ListWatcherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ListWatcherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ListWatcherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload>
          }
          findFirst: {
            args: Prisma.ListWatcherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ListWatcherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload>
          }
          findMany: {
            args: Prisma.ListWatcherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload>[]
          }
          create: {
            args: Prisma.ListWatcherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload>
          }
          createMany: {
            args: Prisma.ListWatcherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ListWatcherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload>[]
          }
          delete: {
            args: Prisma.ListWatcherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload>
          }
          update: {
            args: Prisma.ListWatcherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload>
          }
          deleteMany: {
            args: Prisma.ListWatcherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ListWatcherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ListWatcherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload>[]
          }
          upsert: {
            args: Prisma.ListWatcherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListWatcherPayload>
          }
          aggregate: {
            args: Prisma.ListWatcherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateListWatcher>
          }
          groupBy: {
            args: Prisma.ListWatcherGroupByArgs<ExtArgs>
            result: $Utils.Optional<ListWatcherGroupByOutputType>[]
          }
          count: {
            args: Prisma.ListWatcherCountArgs<ExtArgs>
            result: $Utils.Optional<ListWatcherCountAggregateOutputType> | number
          }
        }
      }
      List: {
        payload: Prisma.$ListPayload<ExtArgs>
        fields: Prisma.ListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload>
          }
          findFirst: {
            args: Prisma.ListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload>
          }
          findMany: {
            args: Prisma.ListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload>[]
          }
          create: {
            args: Prisma.ListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload>
          }
          createMany: {
            args: Prisma.ListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ListCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload>[]
          }
          delete: {
            args: Prisma.ListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload>
          }
          update: {
            args: Prisma.ListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload>
          }
          deleteMany: {
            args: Prisma.ListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ListUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload>[]
          }
          upsert: {
            args: Prisma.ListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListPayload>
          }
          aggregate: {
            args: Prisma.ListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateList>
          }
          groupBy: {
            args: Prisma.ListGroupByArgs<ExtArgs>
            result: $Utils.Optional<ListGroupByOutputType>[]
          }
          count: {
            args: Prisma.ListCountArgs<ExtArgs>
            result: $Utils.Optional<ListCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      WorkspaceMember: {
        payload: Prisma.$WorkspaceMemberPayload<ExtArgs>
        fields: Prisma.WorkspaceMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          findFirst: {
            args: Prisma.WorkspaceMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          findMany: {
            args: Prisma.WorkspaceMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>[]
          }
          create: {
            args: Prisma.WorkspaceMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          createMany: {
            args: Prisma.WorkspaceMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>[]
          }
          delete: {
            args: Prisma.WorkspaceMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          update: {
            args: Prisma.WorkspaceMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspaceMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>[]
          }
          upsert: {
            args: Prisma.WorkspaceMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspaceMemberPayload>
          }
          aggregate: {
            args: Prisma.WorkspaceMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspaceMember>
          }
          groupBy: {
            args: Prisma.WorkspaceMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceMemberCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceMemberCountAggregateOutputType> | number
          }
        }
      }
      Workspace: {
        payload: Prisma.$WorkspacePayload<ExtArgs>
        fields: Prisma.WorkspaceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkspaceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkspaceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          findFirst: {
            args: Prisma.WorkspaceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkspaceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          findMany: {
            args: Prisma.WorkspaceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          create: {
            args: Prisma.WorkspaceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          createMany: {
            args: Prisma.WorkspaceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkspaceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          delete: {
            args: Prisma.WorkspaceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          update: {
            args: Prisma.WorkspaceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          deleteMany: {
            args: Prisma.WorkspaceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkspaceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkspaceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>[]
          }
          upsert: {
            args: Prisma.WorkspaceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkspacePayload>
          }
          aggregate: {
            args: Prisma.WorkspaceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkspace>
          }
          groupBy: {
            args: Prisma.WorkspaceGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkspaceCountArgs<ExtArgs>
            result: $Utils.Optional<WorkspaceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    activityLog?: ActivityLogOmit
    attachment?: AttachmentOmit
    boardMember?: BoardMemberOmit
    board?: BoardOmit
    cardAssignee?: CardAssigneeOmit
    cardLabel?: CardLabelOmit
    cardWatcher?: CardWatcherOmit
    card?: CardOmit
    checklistItemAssignee?: ChecklistItemAssigneeOmit
    checklistItem?: ChecklistItemOmit
    checklist?: ChecklistOmit
    comment?: CommentOmit
    label?: LabelOmit
    listWatcher?: ListWatcherOmit
    list?: ListOmit
    user?: UserOmit
    workspaceMember?: WorkspaceMemberOmit
    workspace?: WorkspaceOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BoardCountOutputType
   */

  export type BoardCountOutputType = {
    activityLogs: number
    boardMembers: number
    labels: number
    lists: number
  }

  export type BoardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityLogs?: boolean | BoardCountOutputTypeCountActivityLogsArgs
    boardMembers?: boolean | BoardCountOutputTypeCountBoardMembersArgs
    labels?: boolean | BoardCountOutputTypeCountLabelsArgs
    lists?: boolean | BoardCountOutputTypeCountListsArgs
  }

  // Custom InputTypes
  /**
   * BoardCountOutputType without action
   */
  export type BoardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardCountOutputType
     */
    select?: BoardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BoardCountOutputType without action
   */
  export type BoardCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
  }

  /**
   * BoardCountOutputType without action
   */
  export type BoardCountOutputTypeCountBoardMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardMemberWhereInput
  }

  /**
   * BoardCountOutputType without action
   */
  export type BoardCountOutputTypeCountLabelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LabelWhereInput
  }

  /**
   * BoardCountOutputType without action
   */
  export type BoardCountOutputTypeCountListsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListWhereInput
  }


  /**
   * Count Type CardCountOutputType
   */

  export type CardCountOutputType = {
    activityLogs: number
    attachments: number
    assignees: number
    cardLabels: number
    watchers: number
    checklists: number
    comments: number
  }

  export type CardCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityLogs?: boolean | CardCountOutputTypeCountActivityLogsArgs
    attachments?: boolean | CardCountOutputTypeCountAttachmentsArgs
    assignees?: boolean | CardCountOutputTypeCountAssigneesArgs
    cardLabels?: boolean | CardCountOutputTypeCountCardLabelsArgs
    watchers?: boolean | CardCountOutputTypeCountWatchersArgs
    checklists?: boolean | CardCountOutputTypeCountChecklistsArgs
    comments?: boolean | CardCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardCountOutputType
     */
    select?: CardCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountAssigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardAssigneeWhereInput
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountCardLabelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardLabelWhereInput
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountWatchersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWatcherWhereInput
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountChecklistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChecklistWhereInput
  }

  /**
   * CardCountOutputType without action
   */
  export type CardCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type ChecklistItemCountOutputType
   */

  export type ChecklistItemCountOutputType = {
    assignees: number
  }

  export type ChecklistItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignees?: boolean | ChecklistItemCountOutputTypeCountAssigneesArgs
  }

  // Custom InputTypes
  /**
   * ChecklistItemCountOutputType without action
   */
  export type ChecklistItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemCountOutputType
     */
    select?: ChecklistItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChecklistItemCountOutputType without action
   */
  export type ChecklistItemCountOutputTypeCountAssigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChecklistItemAssigneeWhereInput
  }


  /**
   * Count Type ChecklistCountOutputType
   */

  export type ChecklistCountOutputType = {
    items: number
  }

  export type ChecklistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ChecklistCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ChecklistCountOutputType without action
   */
  export type ChecklistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistCountOutputType
     */
    select?: ChecklistCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChecklistCountOutputType without action
   */
  export type ChecklistCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChecklistItemWhereInput
  }


  /**
   * Count Type LabelCountOutputType
   */

  export type LabelCountOutputType = {
    cardLabels: number
  }

  export type LabelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cardLabels?: boolean | LabelCountOutputTypeCountCardLabelsArgs
  }

  // Custom InputTypes
  /**
   * LabelCountOutputType without action
   */
  export type LabelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabelCountOutputType
     */
    select?: LabelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LabelCountOutputType without action
   */
  export type LabelCountOutputTypeCountCardLabelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardLabelWhereInput
  }


  /**
   * Count Type ListCountOutputType
   */

  export type ListCountOutputType = {
    cards: number
    watchers: number
  }

  export type ListCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | ListCountOutputTypeCountCardsArgs
    watchers?: boolean | ListCountOutputTypeCountWatchersArgs
  }

  // Custom InputTypes
  /**
   * ListCountOutputType without action
   */
  export type ListCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListCountOutputType
     */
    select?: ListCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ListCountOutputType without action
   */
  export type ListCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
  }

  /**
   * ListCountOutputType without action
   */
  export type ListCountOutputTypeCountWatchersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListWatcherWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    activityLogs: number
    attachments: number
    boardMembers: number
    boards: number
    cardAssignees: number
    cardWatchers: number
    cards: number
    checklistItemAssignees: number
    comments: number
    listWatchers: number
    workspaceMembers: number
    workspaces: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityLogs?: boolean | UserCountOutputTypeCountActivityLogsArgs
    attachments?: boolean | UserCountOutputTypeCountAttachmentsArgs
    boardMembers?: boolean | UserCountOutputTypeCountBoardMembersArgs
    boards?: boolean | UserCountOutputTypeCountBoardsArgs
    cardAssignees?: boolean | UserCountOutputTypeCountCardAssigneesArgs
    cardWatchers?: boolean | UserCountOutputTypeCountCardWatchersArgs
    cards?: boolean | UserCountOutputTypeCountCardsArgs
    checklistItemAssignees?: boolean | UserCountOutputTypeCountChecklistItemAssigneesArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    listWatchers?: boolean | UserCountOutputTypeCountListWatchersArgs
    workspaceMembers?: boolean | UserCountOutputTypeCountWorkspaceMembersArgs
    workspaces?: boolean | UserCountOutputTypeCountWorkspacesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBoardMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCardAssigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardAssigneeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCardWatchersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWatcherWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChecklistItemAssigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChecklistItemAssigneeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountListWatchersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListWatcherWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkspaceMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWorkspacesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceWhereInput
  }


  /**
   * Count Type WorkspaceCountOutputType
   */

  export type WorkspaceCountOutputType = {
    boards: number
    workspaceMembers: number
  }

  export type WorkspaceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    boards?: boolean | WorkspaceCountOutputTypeCountBoardsArgs
    workspaceMembers?: boolean | WorkspaceCountOutputTypeCountWorkspaceMembersArgs
  }

  // Custom InputTypes
  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceCountOutputType
     */
    select?: WorkspaceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountBoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardWhereInput
  }

  /**
   * WorkspaceCountOutputType without action
   */
  export type WorkspaceCountOutputTypeCountWorkspaceMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceMemberWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ActivityLog
   */

  export type AggregateActivityLog = {
    _count: ActivityLogCountAggregateOutputType | null
    _min: ActivityLogMinAggregateOutputType | null
    _max: ActivityLogMaxAggregateOutputType | null
  }

  export type ActivityLogMinAggregateOutputType = {
    id: string | null
    boardId: string | null
    cardId: string | null
    userId: string | null
    action: $Enums.ActivityAction | null
    createdAt: Date | null
  }

  export type ActivityLogMaxAggregateOutputType = {
    id: string | null
    boardId: string | null
    cardId: string | null
    userId: string | null
    action: $Enums.ActivityAction | null
    createdAt: Date | null
  }

  export type ActivityLogCountAggregateOutputType = {
    id: number
    boardId: number
    cardId: number
    userId: number
    action: number
    payload: number
    createdAt: number
    _all: number
  }


  export type ActivityLogMinAggregateInputType = {
    id?: true
    boardId?: true
    cardId?: true
    userId?: true
    action?: true
    createdAt?: true
  }

  export type ActivityLogMaxAggregateInputType = {
    id?: true
    boardId?: true
    cardId?: true
    userId?: true
    action?: true
    createdAt?: true
  }

  export type ActivityLogCountAggregateInputType = {
    id?: true
    boardId?: true
    cardId?: true
    userId?: true
    action?: true
    payload?: true
    createdAt?: true
    _all?: true
  }

  export type ActivityLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLog to aggregate.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityLogs
    **/
    _count?: true | ActivityLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityLogMaxAggregateInputType
  }

  export type GetActivityLogAggregateType<T extends ActivityLogAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityLog[P]>
      : GetScalarType<T[P], AggregateActivityLog[P]>
  }




  export type ActivityLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithAggregationInput | ActivityLogOrderByWithAggregationInput[]
    by: ActivityLogScalarFieldEnum[] | ActivityLogScalarFieldEnum
    having?: ActivityLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityLogCountAggregateInputType | true
    _min?: ActivityLogMinAggregateInputType
    _max?: ActivityLogMaxAggregateInputType
  }

  export type ActivityLogGroupByOutputType = {
    id: string
    boardId: string
    cardId: string | null
    userId: string | null
    action: $Enums.ActivityAction
    payload: JsonValue | null
    createdAt: Date
    _count: ActivityLogCountAggregateOutputType | null
    _min: ActivityLogMinAggregateOutputType | null
    _max: ActivityLogMaxAggregateOutputType | null
  }

  type GetActivityLogGroupByPayload<T extends ActivityLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityLogGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityLogGroupByOutputType[P]>
        }
      >
    >


  export type ActivityLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    cardId?: boolean
    userId?: boolean
    action?: boolean
    payload?: boolean
    createdAt?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
    card?: boolean | ActivityLog$cardArgs<ExtArgs>
    user?: boolean | ActivityLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    cardId?: boolean
    userId?: boolean
    action?: boolean
    payload?: boolean
    createdAt?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
    card?: boolean | ActivityLog$cardArgs<ExtArgs>
    user?: boolean | ActivityLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    cardId?: boolean
    userId?: boolean
    action?: boolean
    payload?: boolean
    createdAt?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
    card?: boolean | ActivityLog$cardArgs<ExtArgs>
    user?: boolean | ActivityLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["activityLog"]>

  export type ActivityLogSelectScalar = {
    id?: boolean
    boardId?: boolean
    cardId?: boolean
    userId?: boolean
    action?: boolean
    payload?: boolean
    createdAt?: boolean
  }

  export type ActivityLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "boardId" | "cardId" | "userId" | "action" | "payload" | "createdAt", ExtArgs["result"]["activityLog"]>
  export type ActivityLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
    card?: boolean | ActivityLog$cardArgs<ExtArgs>
    user?: boolean | ActivityLog$userArgs<ExtArgs>
  }
  export type ActivityLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
    card?: boolean | ActivityLog$cardArgs<ExtArgs>
    user?: boolean | ActivityLog$userArgs<ExtArgs>
  }
  export type ActivityLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
    card?: boolean | ActivityLog$cardArgs<ExtArgs>
    user?: boolean | ActivityLog$userArgs<ExtArgs>
  }

  export type $ActivityLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityLog"
    objects: {
      board: Prisma.$BoardPayload<ExtArgs>
      card: Prisma.$CardPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      boardId: string
      cardId: string | null
      userId: string | null
      action: $Enums.ActivityAction
      payload: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["activityLog"]>
    composites: {}
  }

  type ActivityLogGetPayload<S extends boolean | null | undefined | ActivityLogDefaultArgs> = $Result.GetResult<Prisma.$ActivityLogPayload, S>

  type ActivityLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityLogCountAggregateInputType | true
    }

  export interface ActivityLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityLog'], meta: { name: 'ActivityLog' } }
    /**
     * Find zero or one ActivityLog that matches the filter.
     * @param {ActivityLogFindUniqueArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityLogFindUniqueArgs>(args: SelectSubset<T, ActivityLogFindUniqueArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityLogFindUniqueOrThrowArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindFirstArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityLogFindFirstArgs>(args?: SelectSubset<T, ActivityLogFindFirstArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindFirstOrThrowArgs} args - Arguments to find a ActivityLog
     * @example
     * // Get one ActivityLog
     * const activityLog = await prisma.activityLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityLogs
     * const activityLogs = await prisma.activityLog.findMany()
     * 
     * // Get first 10 ActivityLogs
     * const activityLogs = await prisma.activityLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityLogFindManyArgs>(args?: SelectSubset<T, ActivityLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityLog.
     * @param {ActivityLogCreateArgs} args - Arguments to create a ActivityLog.
     * @example
     * // Create one ActivityLog
     * const ActivityLog = await prisma.activityLog.create({
     *   data: {
     *     // ... data to create a ActivityLog
     *   }
     * })
     * 
     */
    create<T extends ActivityLogCreateArgs>(args: SelectSubset<T, ActivityLogCreateArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityLogs.
     * @param {ActivityLogCreateManyArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLog = await prisma.activityLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityLogCreateManyArgs>(args?: SelectSubset<T, ActivityLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityLogs and returns the data saved in the database.
     * @param {ActivityLogCreateManyAndReturnArgs} args - Arguments to create many ActivityLogs.
     * @example
     * // Create many ActivityLogs
     * const activityLog = await prisma.activityLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityLogs and only return the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityLog.
     * @param {ActivityLogDeleteArgs} args - Arguments to delete one ActivityLog.
     * @example
     * // Delete one ActivityLog
     * const ActivityLog = await prisma.activityLog.delete({
     *   where: {
     *     // ... filter to delete one ActivityLog
     *   }
     * })
     * 
     */
    delete<T extends ActivityLogDeleteArgs>(args: SelectSubset<T, ActivityLogDeleteArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityLog.
     * @param {ActivityLogUpdateArgs} args - Arguments to update one ActivityLog.
     * @example
     * // Update one ActivityLog
     * const activityLog = await prisma.activityLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityLogUpdateArgs>(args: SelectSubset<T, ActivityLogUpdateArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityLogs.
     * @param {ActivityLogDeleteManyArgs} args - Arguments to filter ActivityLogs to delete.
     * @example
     * // Delete a few ActivityLogs
     * const { count } = await prisma.activityLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityLogDeleteManyArgs>(args?: SelectSubset<T, ActivityLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityLogs
     * const activityLog = await prisma.activityLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityLogUpdateManyArgs>(args: SelectSubset<T, ActivityLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityLogs and returns the data updated in the database.
     * @param {ActivityLogUpdateManyAndReturnArgs} args - Arguments to update many ActivityLogs.
     * @example
     * // Update many ActivityLogs
     * const activityLog = await prisma.activityLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityLogs and only return the `id`
     * const activityLogWithIdOnly = await prisma.activityLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityLog.
     * @param {ActivityLogUpsertArgs} args - Arguments to update or create a ActivityLog.
     * @example
     * // Update or create a ActivityLog
     * const activityLog = await prisma.activityLog.upsert({
     *   create: {
     *     // ... data to create a ActivityLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityLog we want to update
     *   }
     * })
     */
    upsert<T extends ActivityLogUpsertArgs>(args: SelectSubset<T, ActivityLogUpsertArgs<ExtArgs>>): Prisma__ActivityLogClient<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogCountArgs} args - Arguments to filter ActivityLogs to count.
     * @example
     * // Count the number of ActivityLogs
     * const count = await prisma.activityLog.count({
     *   where: {
     *     // ... the filter for the ActivityLogs we want to count
     *   }
     * })
    **/
    count<T extends ActivityLogCountArgs>(
      args?: Subset<T, ActivityLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityLogAggregateArgs>(args: Subset<T, ActivityLogAggregateArgs>): Prisma.PrismaPromise<GetActivityLogAggregateType<T>>

    /**
     * Group by ActivityLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityLogGroupByArgs['orderBy'] }
        : { orderBy?: ActivityLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityLog model
   */
  readonly fields: ActivityLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    board<T extends BoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoardDefaultArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    card<T extends ActivityLog$cardArgs<ExtArgs> = {}>(args?: Subset<T, ActivityLog$cardArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends ActivityLog$userArgs<ExtArgs> = {}>(args?: Subset<T, ActivityLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityLog model
   */
  interface ActivityLogFieldRefs {
    readonly id: FieldRef<"ActivityLog", 'String'>
    readonly boardId: FieldRef<"ActivityLog", 'String'>
    readonly cardId: FieldRef<"ActivityLog", 'String'>
    readonly userId: FieldRef<"ActivityLog", 'String'>
    readonly action: FieldRef<"ActivityLog", 'ActivityAction'>
    readonly payload: FieldRef<"ActivityLog", 'Json'>
    readonly createdAt: FieldRef<"ActivityLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ActivityLog findUnique
   */
  export type ActivityLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog findUniqueOrThrow
   */
  export type ActivityLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog findFirst
   */
  export type ActivityLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog findFirstOrThrow
   */
  export type ActivityLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLog to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityLogs.
     */
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog findMany
   */
  export type ActivityLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter, which ActivityLogs to fetch.
     */
    where?: ActivityLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityLogs to fetch.
     */
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityLogs.
     */
    cursor?: ActivityLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityLogs.
     */
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * ActivityLog create
   */
  export type ActivityLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityLog.
     */
    data: XOR<ActivityLogCreateInput, ActivityLogUncheckedCreateInput>
  }

  /**
   * ActivityLog createMany
   */
  export type ActivityLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogCreateManyInput | ActivityLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityLog createManyAndReturn
   */
  export type ActivityLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityLogs.
     */
    data: ActivityLogCreateManyInput | ActivityLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLog update
   */
  export type ActivityLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityLog.
     */
    data: XOR<ActivityLogUpdateInput, ActivityLogUncheckedUpdateInput>
    /**
     * Choose, which ActivityLog to update.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog updateMany
   */
  export type ActivityLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
  }

  /**
   * ActivityLog updateManyAndReturn
   */
  export type ActivityLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * The data used to update ActivityLogs.
     */
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyInput>
    /**
     * Filter which ActivityLogs to update
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityLog upsert
   */
  export type ActivityLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityLog to update in case it exists.
     */
    where: ActivityLogWhereUniqueInput
    /**
     * In case the ActivityLog found by the `where` argument doesn't exist, create a new ActivityLog with this data.
     */
    create: XOR<ActivityLogCreateInput, ActivityLogUncheckedCreateInput>
    /**
     * In case the ActivityLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityLogUpdateInput, ActivityLogUncheckedUpdateInput>
  }

  /**
   * ActivityLog delete
   */
  export type ActivityLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    /**
     * Filter which ActivityLog to delete.
     */
    where: ActivityLogWhereUniqueInput
  }

  /**
   * ActivityLog deleteMany
   */
  export type ActivityLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityLogs to delete
     */
    where?: ActivityLogWhereInput
    /**
     * Limit how many ActivityLogs to delete.
     */
    limit?: number
  }

  /**
   * ActivityLog.card
   */
  export type ActivityLog$cardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    where?: CardWhereInput
  }

  /**
   * ActivityLog.user
   */
  export type ActivityLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ActivityLog without action
   */
  export type ActivityLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
  }


  /**
   * Model Attachment
   */

  export type AggregateAttachment = {
    _count: AttachmentCountAggregateOutputType | null
    _avg: AttachmentAvgAggregateOutputType | null
    _sum: AttachmentSumAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  export type AttachmentAvgAggregateOutputType = {
    bytes: number | null
  }

  export type AttachmentSumAggregateOutputType = {
    bytes: bigint | null
  }

  export type AttachmentMinAggregateOutputType = {
    id: string | null
    cardId: string | null
    userId: string | null
    url: string | null
    filename: string | null
    bytes: bigint | null
    createdAt: Date | null
  }

  export type AttachmentMaxAggregateOutputType = {
    id: string | null
    cardId: string | null
    userId: string | null
    url: string | null
    filename: string | null
    bytes: bigint | null
    createdAt: Date | null
  }

  export type AttachmentCountAggregateOutputType = {
    id: number
    cardId: number
    userId: number
    url: number
    filename: number
    bytes: number
    meta: number
    createdAt: number
    _all: number
  }


  export type AttachmentAvgAggregateInputType = {
    bytes?: true
  }

  export type AttachmentSumAggregateInputType = {
    bytes?: true
  }

  export type AttachmentMinAggregateInputType = {
    id?: true
    cardId?: true
    userId?: true
    url?: true
    filename?: true
    bytes?: true
    createdAt?: true
  }

  export type AttachmentMaxAggregateInputType = {
    id?: true
    cardId?: true
    userId?: true
    url?: true
    filename?: true
    bytes?: true
    createdAt?: true
  }

  export type AttachmentCountAggregateInputType = {
    id?: true
    cardId?: true
    userId?: true
    url?: true
    filename?: true
    bytes?: true
    meta?: true
    createdAt?: true
    _all?: true
  }

  export type AttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachment to aggregate.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attachments
    **/
    _count?: true | AttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttachmentMaxAggregateInputType
  }

  export type GetAttachmentAggregateType<T extends AttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttachment[P]>
      : GetScalarType<T[P], AggregateAttachment[P]>
  }




  export type AttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithAggregationInput | AttachmentOrderByWithAggregationInput[]
    by: AttachmentScalarFieldEnum[] | AttachmentScalarFieldEnum
    having?: AttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttachmentCountAggregateInputType | true
    _avg?: AttachmentAvgAggregateInputType
    _sum?: AttachmentSumAggregateInputType
    _min?: AttachmentMinAggregateInputType
    _max?: AttachmentMaxAggregateInputType
  }

  export type AttachmentGroupByOutputType = {
    id: string
    cardId: string
    userId: string
    url: string
    filename: string
    bytes: bigint | null
    meta: JsonValue | null
    createdAt: Date
    _count: AttachmentCountAggregateOutputType | null
    _avg: AttachmentAvgAggregateOutputType | null
    _sum: AttachmentSumAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  type GetAttachmentGroupByPayload<T extends AttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
        }
      >
    >


  export type AttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    userId?: boolean
    url?: boolean
    filename?: boolean
    bytes?: boolean
    meta?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    userId?: boolean
    url?: boolean
    filename?: boolean
    bytes?: boolean
    meta?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    userId?: boolean
    url?: boolean
    filename?: boolean
    bytes?: boolean
    meta?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectScalar = {
    id?: boolean
    cardId?: boolean
    userId?: boolean
    url?: boolean
    filename?: boolean
    bytes?: boolean
    meta?: boolean
    createdAt?: boolean
  }

  export type AttachmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cardId" | "userId" | "url" | "filename" | "bytes" | "meta" | "createdAt", ExtArgs["result"]["attachment"]>
  export type AttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AttachmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attachment"
    objects: {
      card: Prisma.$CardPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cardId: string
      userId: string
      url: string
      filename: string
      bytes: bigint | null
      meta: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["attachment"]>
    composites: {}
  }

  type AttachmentGetPayload<S extends boolean | null | undefined | AttachmentDefaultArgs> = $Result.GetResult<Prisma.$AttachmentPayload, S>

  type AttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttachmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttachmentCountAggregateInputType | true
    }

  export interface AttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attachment'], meta: { name: 'Attachment' } }
    /**
     * Find zero or one Attachment that matches the filter.
     * @param {AttachmentFindUniqueArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttachmentFindUniqueArgs>(args: SelectSubset<T, AttachmentFindUniqueArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attachment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttachmentFindUniqueOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttachmentFindFirstArgs>(args?: SelectSubset<T, AttachmentFindFirstArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attachments
     * const attachments = await prisma.attachment.findMany()
     * 
     * // Get first 10 Attachments
     * const attachments = await prisma.attachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attachmentWithIdOnly = await prisma.attachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttachmentFindManyArgs>(args?: SelectSubset<T, AttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attachment.
     * @param {AttachmentCreateArgs} args - Arguments to create a Attachment.
     * @example
     * // Create one Attachment
     * const Attachment = await prisma.attachment.create({
     *   data: {
     *     // ... data to create a Attachment
     *   }
     * })
     * 
     */
    create<T extends AttachmentCreateArgs>(args: SelectSubset<T, AttachmentCreateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attachments.
     * @param {AttachmentCreateManyArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttachmentCreateManyArgs>(args?: SelectSubset<T, AttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attachments and returns the data saved in the database.
     * @param {AttachmentCreateManyAndReturnArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attachments and only return the `id`
     * const attachmentWithIdOnly = await prisma.attachment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Attachment.
     * @param {AttachmentDeleteArgs} args - Arguments to delete one Attachment.
     * @example
     * // Delete one Attachment
     * const Attachment = await prisma.attachment.delete({
     *   where: {
     *     // ... filter to delete one Attachment
     *   }
     * })
     * 
     */
    delete<T extends AttachmentDeleteArgs>(args: SelectSubset<T, AttachmentDeleteArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attachment.
     * @param {AttachmentUpdateArgs} args - Arguments to update one Attachment.
     * @example
     * // Update one Attachment
     * const attachment = await prisma.attachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttachmentUpdateArgs>(args: SelectSubset<T, AttachmentUpdateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attachments.
     * @param {AttachmentDeleteManyArgs} args - Arguments to filter Attachments to delete.
     * @example
     * // Delete a few Attachments
     * const { count } = await prisma.attachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttachmentDeleteManyArgs>(args?: SelectSubset<T, AttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attachments
     * const attachment = await prisma.attachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttachmentUpdateManyArgs>(args: SelectSubset<T, AttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attachments and returns the data updated in the database.
     * @param {AttachmentUpdateManyAndReturnArgs} args - Arguments to update many Attachments.
     * @example
     * // Update many Attachments
     * const attachment = await prisma.attachment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attachments and only return the `id`
     * const attachmentWithIdOnly = await prisma.attachment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttachmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AttachmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Attachment.
     * @param {AttachmentUpsertArgs} args - Arguments to update or create a Attachment.
     * @example
     * // Update or create a Attachment
     * const attachment = await prisma.attachment.upsert({
     *   create: {
     *     // ... data to create a Attachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attachment we want to update
     *   }
     * })
     */
    upsert<T extends AttachmentUpsertArgs>(args: SelectSubset<T, AttachmentUpsertArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentCountArgs} args - Arguments to filter Attachments to count.
     * @example
     * // Count the number of Attachments
     * const count = await prisma.attachment.count({
     *   where: {
     *     // ... the filter for the Attachments we want to count
     *   }
     * })
    **/
    count<T extends AttachmentCountArgs>(
      args?: Subset<T, AttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttachmentAggregateArgs>(args: Subset<T, AttachmentAggregateArgs>): Prisma.PrismaPromise<GetAttachmentAggregateType<T>>

    /**
     * Group by Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttachmentGroupByArgs['orderBy'] }
        : { orderBy?: AttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attachment model
   */
  readonly fields: AttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attachment model
   */
  interface AttachmentFieldRefs {
    readonly id: FieldRef<"Attachment", 'String'>
    readonly cardId: FieldRef<"Attachment", 'String'>
    readonly userId: FieldRef<"Attachment", 'String'>
    readonly url: FieldRef<"Attachment", 'String'>
    readonly filename: FieldRef<"Attachment", 'String'>
    readonly bytes: FieldRef<"Attachment", 'BigInt'>
    readonly meta: FieldRef<"Attachment", 'Json'>
    readonly createdAt: FieldRef<"Attachment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Attachment findUnique
   */
  export type AttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findUniqueOrThrow
   */
  export type AttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findFirst
   */
  export type AttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findFirstOrThrow
   */
  export type AttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findMany
   */
  export type AttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachments to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment create
   */
  export type AttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Attachment.
     */
    data: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
  }

  /**
   * Attachment createMany
   */
  export type AttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attachment createManyAndReturn
   */
  export type AttachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attachment update
   */
  export type AttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Attachment.
     */
    data: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
    /**
     * Choose, which Attachment to update.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment updateMany
   */
  export type AttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attachments.
     */
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyInput>
    /**
     * Filter which Attachments to update
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to update.
     */
    limit?: number
  }

  /**
   * Attachment updateManyAndReturn
   */
  export type AttachmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * The data used to update Attachments.
     */
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyInput>
    /**
     * Filter which Attachments to update
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attachment upsert
   */
  export type AttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Attachment to update in case it exists.
     */
    where: AttachmentWhereUniqueInput
    /**
     * In case the Attachment found by the `where` argument doesn't exist, create a new Attachment with this data.
     */
    create: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
    /**
     * In case the Attachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
  }

  /**
   * Attachment delete
   */
  export type AttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter which Attachment to delete.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment deleteMany
   */
  export type AttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachments to delete
     */
    where?: AttachmentWhereInput
    /**
     * Limit how many Attachments to delete.
     */
    limit?: number
  }

  /**
   * Attachment without action
   */
  export type AttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
  }


  /**
   * Model BoardMember
   */

  export type AggregateBoardMember = {
    _count: BoardMemberCountAggregateOutputType | null
    _min: BoardMemberMinAggregateOutputType | null
    _max: BoardMemberMaxAggregateOutputType | null
  }

  export type BoardMemberMinAggregateOutputType = {
    boardId: string | null
    userId: string | null
    role: $Enums.BoardRole | null
    joinedAt: Date | null
  }

  export type BoardMemberMaxAggregateOutputType = {
    boardId: string | null
    userId: string | null
    role: $Enums.BoardRole | null
    joinedAt: Date | null
  }

  export type BoardMemberCountAggregateOutputType = {
    boardId: number
    userId: number
    role: number
    joinedAt: number
    _all: number
  }


  export type BoardMemberMinAggregateInputType = {
    boardId?: true
    userId?: true
    role?: true
    joinedAt?: true
  }

  export type BoardMemberMaxAggregateInputType = {
    boardId?: true
    userId?: true
    role?: true
    joinedAt?: true
  }

  export type BoardMemberCountAggregateInputType = {
    boardId?: true
    userId?: true
    role?: true
    joinedAt?: true
    _all?: true
  }

  export type BoardMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardMember to aggregate.
     */
    where?: BoardMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardMembers to fetch.
     */
    orderBy?: BoardMemberOrderByWithRelationInput | BoardMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BoardMembers
    **/
    _count?: true | BoardMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardMemberMaxAggregateInputType
  }

  export type GetBoardMemberAggregateType<T extends BoardMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateBoardMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoardMember[P]>
      : GetScalarType<T[P], AggregateBoardMember[P]>
  }




  export type BoardMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardMemberWhereInput
    orderBy?: BoardMemberOrderByWithAggregationInput | BoardMemberOrderByWithAggregationInput[]
    by: BoardMemberScalarFieldEnum[] | BoardMemberScalarFieldEnum
    having?: BoardMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardMemberCountAggregateInputType | true
    _min?: BoardMemberMinAggregateInputType
    _max?: BoardMemberMaxAggregateInputType
  }

  export type BoardMemberGroupByOutputType = {
    boardId: string
    userId: string
    role: $Enums.BoardRole
    joinedAt: Date
    _count: BoardMemberCountAggregateOutputType | null
    _min: BoardMemberMinAggregateOutputType | null
    _max: BoardMemberMaxAggregateOutputType | null
  }

  type GetBoardMemberGroupByPayload<T extends BoardMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardMemberGroupByOutputType[P]>
            : GetScalarType<T[P], BoardMemberGroupByOutputType[P]>
        }
      >
    >


  export type BoardMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    boardId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boardMember"]>

  export type BoardMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    boardId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boardMember"]>

  export type BoardMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    boardId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boardMember"]>

  export type BoardMemberSelectScalar = {
    boardId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
  }

  export type BoardMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"boardId" | "userId" | "role" | "joinedAt", ExtArgs["result"]["boardMember"]>
  export type BoardMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BoardMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BoardMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BoardMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BoardMember"
    objects: {
      board: Prisma.$BoardPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      boardId: string
      userId: string
      role: $Enums.BoardRole
      joinedAt: Date
    }, ExtArgs["result"]["boardMember"]>
    composites: {}
  }

  type BoardMemberGetPayload<S extends boolean | null | undefined | BoardMemberDefaultArgs> = $Result.GetResult<Prisma.$BoardMemberPayload, S>

  type BoardMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BoardMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BoardMemberCountAggregateInputType | true
    }

  export interface BoardMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BoardMember'], meta: { name: 'BoardMember' } }
    /**
     * Find zero or one BoardMember that matches the filter.
     * @param {BoardMemberFindUniqueArgs} args - Arguments to find a BoardMember
     * @example
     * // Get one BoardMember
     * const boardMember = await prisma.boardMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BoardMemberFindUniqueArgs>(args: SelectSubset<T, BoardMemberFindUniqueArgs<ExtArgs>>): Prisma__BoardMemberClient<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BoardMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BoardMemberFindUniqueOrThrowArgs} args - Arguments to find a BoardMember
     * @example
     * // Get one BoardMember
     * const boardMember = await prisma.boardMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BoardMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, BoardMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BoardMemberClient<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BoardMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMemberFindFirstArgs} args - Arguments to find a BoardMember
     * @example
     * // Get one BoardMember
     * const boardMember = await prisma.boardMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BoardMemberFindFirstArgs>(args?: SelectSubset<T, BoardMemberFindFirstArgs<ExtArgs>>): Prisma__BoardMemberClient<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BoardMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMemberFindFirstOrThrowArgs} args - Arguments to find a BoardMember
     * @example
     * // Get one BoardMember
     * const boardMember = await prisma.boardMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BoardMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, BoardMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__BoardMemberClient<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BoardMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BoardMembers
     * const boardMembers = await prisma.boardMember.findMany()
     * 
     * // Get first 10 BoardMembers
     * const boardMembers = await prisma.boardMember.findMany({ take: 10 })
     * 
     * // Only select the `boardId`
     * const boardMemberWithBoardIdOnly = await prisma.boardMember.findMany({ select: { boardId: true } })
     * 
     */
    findMany<T extends BoardMemberFindManyArgs>(args?: SelectSubset<T, BoardMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BoardMember.
     * @param {BoardMemberCreateArgs} args - Arguments to create a BoardMember.
     * @example
     * // Create one BoardMember
     * const BoardMember = await prisma.boardMember.create({
     *   data: {
     *     // ... data to create a BoardMember
     *   }
     * })
     * 
     */
    create<T extends BoardMemberCreateArgs>(args: SelectSubset<T, BoardMemberCreateArgs<ExtArgs>>): Prisma__BoardMemberClient<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BoardMembers.
     * @param {BoardMemberCreateManyArgs} args - Arguments to create many BoardMembers.
     * @example
     * // Create many BoardMembers
     * const boardMember = await prisma.boardMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BoardMemberCreateManyArgs>(args?: SelectSubset<T, BoardMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BoardMembers and returns the data saved in the database.
     * @param {BoardMemberCreateManyAndReturnArgs} args - Arguments to create many BoardMembers.
     * @example
     * // Create many BoardMembers
     * const boardMember = await prisma.boardMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BoardMembers and only return the `boardId`
     * const boardMemberWithBoardIdOnly = await prisma.boardMember.createManyAndReturn({
     *   select: { boardId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BoardMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, BoardMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BoardMember.
     * @param {BoardMemberDeleteArgs} args - Arguments to delete one BoardMember.
     * @example
     * // Delete one BoardMember
     * const BoardMember = await prisma.boardMember.delete({
     *   where: {
     *     // ... filter to delete one BoardMember
     *   }
     * })
     * 
     */
    delete<T extends BoardMemberDeleteArgs>(args: SelectSubset<T, BoardMemberDeleteArgs<ExtArgs>>): Prisma__BoardMemberClient<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BoardMember.
     * @param {BoardMemberUpdateArgs} args - Arguments to update one BoardMember.
     * @example
     * // Update one BoardMember
     * const boardMember = await prisma.boardMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BoardMemberUpdateArgs>(args: SelectSubset<T, BoardMemberUpdateArgs<ExtArgs>>): Prisma__BoardMemberClient<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BoardMembers.
     * @param {BoardMemberDeleteManyArgs} args - Arguments to filter BoardMembers to delete.
     * @example
     * // Delete a few BoardMembers
     * const { count } = await prisma.boardMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BoardMemberDeleteManyArgs>(args?: SelectSubset<T, BoardMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BoardMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BoardMembers
     * const boardMember = await prisma.boardMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BoardMemberUpdateManyArgs>(args: SelectSubset<T, BoardMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BoardMembers and returns the data updated in the database.
     * @param {BoardMemberUpdateManyAndReturnArgs} args - Arguments to update many BoardMembers.
     * @example
     * // Update many BoardMembers
     * const boardMember = await prisma.boardMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BoardMembers and only return the `boardId`
     * const boardMemberWithBoardIdOnly = await prisma.boardMember.updateManyAndReturn({
     *   select: { boardId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BoardMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, BoardMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BoardMember.
     * @param {BoardMemberUpsertArgs} args - Arguments to update or create a BoardMember.
     * @example
     * // Update or create a BoardMember
     * const boardMember = await prisma.boardMember.upsert({
     *   create: {
     *     // ... data to create a BoardMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BoardMember we want to update
     *   }
     * })
     */
    upsert<T extends BoardMemberUpsertArgs>(args: SelectSubset<T, BoardMemberUpsertArgs<ExtArgs>>): Prisma__BoardMemberClient<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BoardMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMemberCountArgs} args - Arguments to filter BoardMembers to count.
     * @example
     * // Count the number of BoardMembers
     * const count = await prisma.boardMember.count({
     *   where: {
     *     // ... the filter for the BoardMembers we want to count
     *   }
     * })
    **/
    count<T extends BoardMemberCountArgs>(
      args?: Subset<T, BoardMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BoardMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardMemberAggregateArgs>(args: Subset<T, BoardMemberAggregateArgs>): Prisma.PrismaPromise<GetBoardMemberAggregateType<T>>

    /**
     * Group by BoardMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardMemberGroupByArgs['orderBy'] }
        : { orderBy?: BoardMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BoardMember model
   */
  readonly fields: BoardMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BoardMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    board<T extends BoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoardDefaultArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BoardMember model
   */
  interface BoardMemberFieldRefs {
    readonly boardId: FieldRef<"BoardMember", 'String'>
    readonly userId: FieldRef<"BoardMember", 'String'>
    readonly role: FieldRef<"BoardMember", 'BoardRole'>
    readonly joinedAt: FieldRef<"BoardMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BoardMember findUnique
   */
  export type BoardMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    /**
     * Filter, which BoardMember to fetch.
     */
    where: BoardMemberWhereUniqueInput
  }

  /**
   * BoardMember findUniqueOrThrow
   */
  export type BoardMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    /**
     * Filter, which BoardMember to fetch.
     */
    where: BoardMemberWhereUniqueInput
  }

  /**
   * BoardMember findFirst
   */
  export type BoardMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    /**
     * Filter, which BoardMember to fetch.
     */
    where?: BoardMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardMembers to fetch.
     */
    orderBy?: BoardMemberOrderByWithRelationInput | BoardMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardMembers.
     */
    cursor?: BoardMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardMembers.
     */
    distinct?: BoardMemberScalarFieldEnum | BoardMemberScalarFieldEnum[]
  }

  /**
   * BoardMember findFirstOrThrow
   */
  export type BoardMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    /**
     * Filter, which BoardMember to fetch.
     */
    where?: BoardMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardMembers to fetch.
     */
    orderBy?: BoardMemberOrderByWithRelationInput | BoardMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardMembers.
     */
    cursor?: BoardMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardMembers.
     */
    distinct?: BoardMemberScalarFieldEnum | BoardMemberScalarFieldEnum[]
  }

  /**
   * BoardMember findMany
   */
  export type BoardMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    /**
     * Filter, which BoardMembers to fetch.
     */
    where?: BoardMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardMembers to fetch.
     */
    orderBy?: BoardMemberOrderByWithRelationInput | BoardMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BoardMembers.
     */
    cursor?: BoardMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardMembers.
     */
    skip?: number
    distinct?: BoardMemberScalarFieldEnum | BoardMemberScalarFieldEnum[]
  }

  /**
   * BoardMember create
   */
  export type BoardMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a BoardMember.
     */
    data: XOR<BoardMemberCreateInput, BoardMemberUncheckedCreateInput>
  }

  /**
   * BoardMember createMany
   */
  export type BoardMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BoardMembers.
     */
    data: BoardMemberCreateManyInput | BoardMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BoardMember createManyAndReturn
   */
  export type BoardMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * The data used to create many BoardMembers.
     */
    data: BoardMemberCreateManyInput | BoardMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BoardMember update
   */
  export type BoardMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a BoardMember.
     */
    data: XOR<BoardMemberUpdateInput, BoardMemberUncheckedUpdateInput>
    /**
     * Choose, which BoardMember to update.
     */
    where: BoardMemberWhereUniqueInput
  }

  /**
   * BoardMember updateMany
   */
  export type BoardMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BoardMembers.
     */
    data: XOR<BoardMemberUpdateManyMutationInput, BoardMemberUncheckedUpdateManyInput>
    /**
     * Filter which BoardMembers to update
     */
    where?: BoardMemberWhereInput
    /**
     * Limit how many BoardMembers to update.
     */
    limit?: number
  }

  /**
   * BoardMember updateManyAndReturn
   */
  export type BoardMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * The data used to update BoardMembers.
     */
    data: XOR<BoardMemberUpdateManyMutationInput, BoardMemberUncheckedUpdateManyInput>
    /**
     * Filter which BoardMembers to update
     */
    where?: BoardMemberWhereInput
    /**
     * Limit how many BoardMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BoardMember upsert
   */
  export type BoardMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the BoardMember to update in case it exists.
     */
    where: BoardMemberWhereUniqueInput
    /**
     * In case the BoardMember found by the `where` argument doesn't exist, create a new BoardMember with this data.
     */
    create: XOR<BoardMemberCreateInput, BoardMemberUncheckedCreateInput>
    /**
     * In case the BoardMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardMemberUpdateInput, BoardMemberUncheckedUpdateInput>
  }

  /**
   * BoardMember delete
   */
  export type BoardMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    /**
     * Filter which BoardMember to delete.
     */
    where: BoardMemberWhereUniqueInput
  }

  /**
   * BoardMember deleteMany
   */
  export type BoardMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardMembers to delete
     */
    where?: BoardMemberWhereInput
    /**
     * Limit how many BoardMembers to delete.
     */
    limit?: number
  }

  /**
   * BoardMember without action
   */
  export type BoardMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
  }


  /**
   * Model Board
   */

  export type AggregateBoard = {
    _count: BoardCountAggregateOutputType | null
    _min: BoardMinAggregateOutputType | null
    _max: BoardMaxAggregateOutputType | null
  }

  export type BoardMinAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    name: string | null
    description: string | null
    createdBy: string | null
    allowCovers: boolean | null
    showComplete: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastActivityAt: Date | null
    background: $Enums.BoardBackground | null
    visibility: $Enums.BoardVisibility | null
    memberManage: $Enums.MemberManageRestrictions | null
    commenting: $Enums.CommentingRestrictions | null
  }

  export type BoardMaxAggregateOutputType = {
    id: string | null
    workspaceId: string | null
    name: string | null
    description: string | null
    createdBy: string | null
    allowCovers: boolean | null
    showComplete: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastActivityAt: Date | null
    background: $Enums.BoardBackground | null
    visibility: $Enums.BoardVisibility | null
    memberManage: $Enums.MemberManageRestrictions | null
    commenting: $Enums.CommentingRestrictions | null
  }

  export type BoardCountAggregateOutputType = {
    id: number
    workspaceId: number
    name: number
    description: number
    createdBy: number
    allowCovers: number
    showComplete: number
    createdAt: number
    updatedAt: number
    lastActivityAt: number
    background: number
    visibility: number
    memberManage: number
    commenting: number
    _all: number
  }


  export type BoardMinAggregateInputType = {
    id?: true
    workspaceId?: true
    name?: true
    description?: true
    createdBy?: true
    allowCovers?: true
    showComplete?: true
    createdAt?: true
    updatedAt?: true
    lastActivityAt?: true
    background?: true
    visibility?: true
    memberManage?: true
    commenting?: true
  }

  export type BoardMaxAggregateInputType = {
    id?: true
    workspaceId?: true
    name?: true
    description?: true
    createdBy?: true
    allowCovers?: true
    showComplete?: true
    createdAt?: true
    updatedAt?: true
    lastActivityAt?: true
    background?: true
    visibility?: true
    memberManage?: true
    commenting?: true
  }

  export type BoardCountAggregateInputType = {
    id?: true
    workspaceId?: true
    name?: true
    description?: true
    createdBy?: true
    allowCovers?: true
    showComplete?: true
    createdAt?: true
    updatedAt?: true
    lastActivityAt?: true
    background?: true
    visibility?: true
    memberManage?: true
    commenting?: true
    _all?: true
  }

  export type BoardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Board to aggregate.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Boards
    **/
    _count?: true | BoardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardMaxAggregateInputType
  }

  export type GetBoardAggregateType<T extends BoardAggregateArgs> = {
        [P in keyof T & keyof AggregateBoard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoard[P]>
      : GetScalarType<T[P], AggregateBoard[P]>
  }




  export type BoardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardWhereInput
    orderBy?: BoardOrderByWithAggregationInput | BoardOrderByWithAggregationInput[]
    by: BoardScalarFieldEnum[] | BoardScalarFieldEnum
    having?: BoardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardCountAggregateInputType | true
    _min?: BoardMinAggregateInputType
    _max?: BoardMaxAggregateInputType
  }

  export type BoardGroupByOutputType = {
    id: string
    workspaceId: string
    name: string
    description: string | null
    createdBy: string
    allowCovers: boolean
    showComplete: boolean
    createdAt: Date
    updatedAt: Date
    lastActivityAt: Date | null
    background: $Enums.BoardBackground
    visibility: $Enums.BoardVisibility
    memberManage: $Enums.MemberManageRestrictions
    commenting: $Enums.CommentingRestrictions
    _count: BoardCountAggregateOutputType | null
    _min: BoardMinAggregateOutputType | null
    _max: BoardMaxAggregateOutputType | null
  }

  type GetBoardGroupByPayload<T extends BoardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardGroupByOutputType[P]>
            : GetScalarType<T[P], BoardGroupByOutputType[P]>
        }
      >
    >


  export type BoardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    description?: boolean
    createdBy?: boolean
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastActivityAt?: boolean
    background?: boolean
    visibility?: boolean
    memberManage?: boolean
    commenting?: boolean
    activityLogs?: boolean | Board$activityLogsArgs<ExtArgs>
    boardMembers?: boolean | Board$boardMembersArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    labels?: boolean | Board$labelsArgs<ExtArgs>
    lists?: boolean | Board$listsArgs<ExtArgs>
    _count?: boolean | BoardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["board"]>

  export type BoardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    description?: boolean
    createdBy?: boolean
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastActivityAt?: boolean
    background?: boolean
    visibility?: boolean
    memberManage?: boolean
    commenting?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["board"]>

  export type BoardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    description?: boolean
    createdBy?: boolean
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastActivityAt?: boolean
    background?: boolean
    visibility?: boolean
    memberManage?: boolean
    commenting?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["board"]>

  export type BoardSelectScalar = {
    id?: boolean
    workspaceId?: boolean
    name?: boolean
    description?: boolean
    createdBy?: boolean
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastActivityAt?: boolean
    background?: boolean
    visibility?: boolean
    memberManage?: boolean
    commenting?: boolean
  }

  export type BoardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workspaceId" | "name" | "description" | "createdBy" | "allowCovers" | "showComplete" | "createdAt" | "updatedAt" | "lastActivityAt" | "background" | "visibility" | "memberManage" | "commenting", ExtArgs["result"]["board"]>
  export type BoardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityLogs?: boolean | Board$activityLogsArgs<ExtArgs>
    boardMembers?: boolean | Board$boardMembersArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
    labels?: boolean | Board$labelsArgs<ExtArgs>
    lists?: boolean | Board$listsArgs<ExtArgs>
    _count?: boolean | BoardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BoardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type BoardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $BoardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Board"
    objects: {
      activityLogs: Prisma.$ActivityLogPayload<ExtArgs>[]
      boardMembers: Prisma.$BoardMemberPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
      workspace: Prisma.$WorkspacePayload<ExtArgs>
      labels: Prisma.$LabelPayload<ExtArgs>[]
      lists: Prisma.$ListPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workspaceId: string
      name: string
      description: string | null
      createdBy: string
      allowCovers: boolean
      showComplete: boolean
      createdAt: Date
      updatedAt: Date
      lastActivityAt: Date | null
      background: $Enums.BoardBackground
      visibility: $Enums.BoardVisibility
      memberManage: $Enums.MemberManageRestrictions
      commenting: $Enums.CommentingRestrictions
    }, ExtArgs["result"]["board"]>
    composites: {}
  }

  type BoardGetPayload<S extends boolean | null | undefined | BoardDefaultArgs> = $Result.GetResult<Prisma.$BoardPayload, S>

  type BoardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BoardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BoardCountAggregateInputType | true
    }

  export interface BoardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Board'], meta: { name: 'Board' } }
    /**
     * Find zero or one Board that matches the filter.
     * @param {BoardFindUniqueArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BoardFindUniqueArgs>(args: SelectSubset<T, BoardFindUniqueArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Board that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BoardFindUniqueOrThrowArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BoardFindUniqueOrThrowArgs>(args: SelectSubset<T, BoardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Board that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindFirstArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BoardFindFirstArgs>(args?: SelectSubset<T, BoardFindFirstArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Board that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindFirstOrThrowArgs} args - Arguments to find a Board
     * @example
     * // Get one Board
     * const board = await prisma.board.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BoardFindFirstOrThrowArgs>(args?: SelectSubset<T, BoardFindFirstOrThrowArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Boards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Boards
     * const boards = await prisma.board.findMany()
     * 
     * // Get first 10 Boards
     * const boards = await prisma.board.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boardWithIdOnly = await prisma.board.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BoardFindManyArgs>(args?: SelectSubset<T, BoardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Board.
     * @param {BoardCreateArgs} args - Arguments to create a Board.
     * @example
     * // Create one Board
     * const Board = await prisma.board.create({
     *   data: {
     *     // ... data to create a Board
     *   }
     * })
     * 
     */
    create<T extends BoardCreateArgs>(args: SelectSubset<T, BoardCreateArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Boards.
     * @param {BoardCreateManyArgs} args - Arguments to create many Boards.
     * @example
     * // Create many Boards
     * const board = await prisma.board.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BoardCreateManyArgs>(args?: SelectSubset<T, BoardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Boards and returns the data saved in the database.
     * @param {BoardCreateManyAndReturnArgs} args - Arguments to create many Boards.
     * @example
     * // Create many Boards
     * const board = await prisma.board.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Boards and only return the `id`
     * const boardWithIdOnly = await prisma.board.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BoardCreateManyAndReturnArgs>(args?: SelectSubset<T, BoardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Board.
     * @param {BoardDeleteArgs} args - Arguments to delete one Board.
     * @example
     * // Delete one Board
     * const Board = await prisma.board.delete({
     *   where: {
     *     // ... filter to delete one Board
     *   }
     * })
     * 
     */
    delete<T extends BoardDeleteArgs>(args: SelectSubset<T, BoardDeleteArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Board.
     * @param {BoardUpdateArgs} args - Arguments to update one Board.
     * @example
     * // Update one Board
     * const board = await prisma.board.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BoardUpdateArgs>(args: SelectSubset<T, BoardUpdateArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Boards.
     * @param {BoardDeleteManyArgs} args - Arguments to filter Boards to delete.
     * @example
     * // Delete a few Boards
     * const { count } = await prisma.board.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BoardDeleteManyArgs>(args?: SelectSubset<T, BoardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Boards
     * const board = await prisma.board.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BoardUpdateManyArgs>(args: SelectSubset<T, BoardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boards and returns the data updated in the database.
     * @param {BoardUpdateManyAndReturnArgs} args - Arguments to update many Boards.
     * @example
     * // Update many Boards
     * const board = await prisma.board.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Boards and only return the `id`
     * const boardWithIdOnly = await prisma.board.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BoardUpdateManyAndReturnArgs>(args: SelectSubset<T, BoardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Board.
     * @param {BoardUpsertArgs} args - Arguments to update or create a Board.
     * @example
     * // Update or create a Board
     * const board = await prisma.board.upsert({
     *   create: {
     *     // ... data to create a Board
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Board we want to update
     *   }
     * })
     */
    upsert<T extends BoardUpsertArgs>(args: SelectSubset<T, BoardUpsertArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardCountArgs} args - Arguments to filter Boards to count.
     * @example
     * // Count the number of Boards
     * const count = await prisma.board.count({
     *   where: {
     *     // ... the filter for the Boards we want to count
     *   }
     * })
    **/
    count<T extends BoardCountArgs>(
      args?: Subset<T, BoardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Board.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardAggregateArgs>(args: Subset<T, BoardAggregateArgs>): Prisma.PrismaPromise<GetBoardAggregateType<T>>

    /**
     * Group by Board.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardGroupByArgs['orderBy'] }
        : { orderBy?: BoardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Board model
   */
  readonly fields: BoardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Board.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activityLogs<T extends Board$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, Board$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    boardMembers<T extends Board$boardMembersArgs<ExtArgs> = {}>(args?: Subset<T, Board$boardMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    labels<T extends Board$labelsArgs<ExtArgs> = {}>(args?: Subset<T, Board$labelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lists<T extends Board$listsArgs<ExtArgs> = {}>(args?: Subset<T, Board$listsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Board model
   */
  interface BoardFieldRefs {
    readonly id: FieldRef<"Board", 'String'>
    readonly workspaceId: FieldRef<"Board", 'String'>
    readonly name: FieldRef<"Board", 'String'>
    readonly description: FieldRef<"Board", 'String'>
    readonly createdBy: FieldRef<"Board", 'String'>
    readonly allowCovers: FieldRef<"Board", 'Boolean'>
    readonly showComplete: FieldRef<"Board", 'Boolean'>
    readonly createdAt: FieldRef<"Board", 'DateTime'>
    readonly updatedAt: FieldRef<"Board", 'DateTime'>
    readonly lastActivityAt: FieldRef<"Board", 'DateTime'>
    readonly background: FieldRef<"Board", 'BoardBackground'>
    readonly visibility: FieldRef<"Board", 'BoardVisibility'>
    readonly memberManage: FieldRef<"Board", 'MemberManageRestrictions'>
    readonly commenting: FieldRef<"Board", 'CommentingRestrictions'>
  }
    

  // Custom InputTypes
  /**
   * Board findUnique
   */
  export type BoardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board findUniqueOrThrow
   */
  export type BoardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board findFirst
   */
  export type BoardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Board findFirstOrThrow
   */
  export type BoardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Board to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Board findMany
   */
  export type BoardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where?: BoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Boards.
     */
    cursor?: BoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Board create
   */
  export type BoardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The data needed to create a Board.
     */
    data: XOR<BoardCreateInput, BoardUncheckedCreateInput>
  }

  /**
   * Board createMany
   */
  export type BoardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Boards.
     */
    data: BoardCreateManyInput | BoardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Board createManyAndReturn
   */
  export type BoardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * The data used to create many Boards.
     */
    data: BoardCreateManyInput | BoardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Board update
   */
  export type BoardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The data needed to update a Board.
     */
    data: XOR<BoardUpdateInput, BoardUncheckedUpdateInput>
    /**
     * Choose, which Board to update.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board updateMany
   */
  export type BoardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Boards.
     */
    data: XOR<BoardUpdateManyMutationInput, BoardUncheckedUpdateManyInput>
    /**
     * Filter which Boards to update
     */
    where?: BoardWhereInput
    /**
     * Limit how many Boards to update.
     */
    limit?: number
  }

  /**
   * Board updateManyAndReturn
   */
  export type BoardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * The data used to update Boards.
     */
    data: XOR<BoardUpdateManyMutationInput, BoardUncheckedUpdateManyInput>
    /**
     * Filter which Boards to update
     */
    where?: BoardWhereInput
    /**
     * Limit how many Boards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Board upsert
   */
  export type BoardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * The filter to search for the Board to update in case it exists.
     */
    where: BoardWhereUniqueInput
    /**
     * In case the Board found by the `where` argument doesn't exist, create a new Board with this data.
     */
    create: XOR<BoardCreateInput, BoardUncheckedCreateInput>
    /**
     * In case the Board was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardUpdateInput, BoardUncheckedUpdateInput>
  }

  /**
   * Board delete
   */
  export type BoardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    /**
     * Filter which Board to delete.
     */
    where: BoardWhereUniqueInput
  }

  /**
   * Board deleteMany
   */
  export type BoardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boards to delete
     */
    where?: BoardWhereInput
    /**
     * Limit how many Boards to delete.
     */
    limit?: number
  }

  /**
   * Board.activityLogs
   */
  export type Board$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    cursor?: ActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * Board.boardMembers
   */
  export type Board$boardMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    where?: BoardMemberWhereInput
    orderBy?: BoardMemberOrderByWithRelationInput | BoardMemberOrderByWithRelationInput[]
    cursor?: BoardMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardMemberScalarFieldEnum | BoardMemberScalarFieldEnum[]
  }

  /**
   * Board.labels
   */
  export type Board$labelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    where?: LabelWhereInput
    orderBy?: LabelOrderByWithRelationInput | LabelOrderByWithRelationInput[]
    cursor?: LabelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LabelScalarFieldEnum | LabelScalarFieldEnum[]
  }

  /**
   * Board.lists
   */
  export type Board$listsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
    where?: ListWhereInput
    orderBy?: ListOrderByWithRelationInput | ListOrderByWithRelationInput[]
    cursor?: ListWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListScalarFieldEnum | ListScalarFieldEnum[]
  }

  /**
   * Board without action
   */
  export type BoardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
  }


  /**
   * Model CardAssignee
   */

  export type AggregateCardAssignee = {
    _count: CardAssigneeCountAggregateOutputType | null
    _min: CardAssigneeMinAggregateOutputType | null
    _max: CardAssigneeMaxAggregateOutputType | null
  }

  export type CardAssigneeMinAggregateOutputType = {
    cardId: string | null
    userId: string | null
  }

  export type CardAssigneeMaxAggregateOutputType = {
    cardId: string | null
    userId: string | null
  }

  export type CardAssigneeCountAggregateOutputType = {
    cardId: number
    userId: number
    _all: number
  }


  export type CardAssigneeMinAggregateInputType = {
    cardId?: true
    userId?: true
  }

  export type CardAssigneeMaxAggregateInputType = {
    cardId?: true
    userId?: true
  }

  export type CardAssigneeCountAggregateInputType = {
    cardId?: true
    userId?: true
    _all?: true
  }

  export type CardAssigneeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardAssignee to aggregate.
     */
    where?: CardAssigneeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardAssignees to fetch.
     */
    orderBy?: CardAssigneeOrderByWithRelationInput | CardAssigneeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardAssigneeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardAssignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardAssignees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardAssignees
    **/
    _count?: true | CardAssigneeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardAssigneeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardAssigneeMaxAggregateInputType
  }

  export type GetCardAssigneeAggregateType<T extends CardAssigneeAggregateArgs> = {
        [P in keyof T & keyof AggregateCardAssignee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardAssignee[P]>
      : GetScalarType<T[P], AggregateCardAssignee[P]>
  }




  export type CardAssigneeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardAssigneeWhereInput
    orderBy?: CardAssigneeOrderByWithAggregationInput | CardAssigneeOrderByWithAggregationInput[]
    by: CardAssigneeScalarFieldEnum[] | CardAssigneeScalarFieldEnum
    having?: CardAssigneeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardAssigneeCountAggregateInputType | true
    _min?: CardAssigneeMinAggregateInputType
    _max?: CardAssigneeMaxAggregateInputType
  }

  export type CardAssigneeGroupByOutputType = {
    cardId: string
    userId: string
    _count: CardAssigneeCountAggregateOutputType | null
    _min: CardAssigneeMinAggregateOutputType | null
    _max: CardAssigneeMaxAggregateOutputType | null
  }

  type GetCardAssigneeGroupByPayload<T extends CardAssigneeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardAssigneeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardAssigneeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardAssigneeGroupByOutputType[P]>
            : GetScalarType<T[P], CardAssigneeGroupByOutputType[P]>
        }
      >
    >


  export type CardAssigneeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cardId?: boolean
    userId?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardAssignee"]>

  export type CardAssigneeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cardId?: boolean
    userId?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardAssignee"]>

  export type CardAssigneeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cardId?: boolean
    userId?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardAssignee"]>

  export type CardAssigneeSelectScalar = {
    cardId?: boolean
    userId?: boolean
  }

  export type CardAssigneeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"cardId" | "userId", ExtArgs["result"]["cardAssignee"]>
  export type CardAssigneeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CardAssigneeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CardAssigneeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CardAssigneePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardAssignee"
    objects: {
      card: Prisma.$CardPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      cardId: string
      userId: string
    }, ExtArgs["result"]["cardAssignee"]>
    composites: {}
  }

  type CardAssigneeGetPayload<S extends boolean | null | undefined | CardAssigneeDefaultArgs> = $Result.GetResult<Prisma.$CardAssigneePayload, S>

  type CardAssigneeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CardAssigneeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CardAssigneeCountAggregateInputType | true
    }

  export interface CardAssigneeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardAssignee'], meta: { name: 'CardAssignee' } }
    /**
     * Find zero or one CardAssignee that matches the filter.
     * @param {CardAssigneeFindUniqueArgs} args - Arguments to find a CardAssignee
     * @example
     * // Get one CardAssignee
     * const cardAssignee = await prisma.cardAssignee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardAssigneeFindUniqueArgs>(args: SelectSubset<T, CardAssigneeFindUniqueArgs<ExtArgs>>): Prisma__CardAssigneeClient<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CardAssignee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CardAssigneeFindUniqueOrThrowArgs} args - Arguments to find a CardAssignee
     * @example
     * // Get one CardAssignee
     * const cardAssignee = await prisma.cardAssignee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardAssigneeFindUniqueOrThrowArgs>(args: SelectSubset<T, CardAssigneeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardAssigneeClient<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardAssignee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAssigneeFindFirstArgs} args - Arguments to find a CardAssignee
     * @example
     * // Get one CardAssignee
     * const cardAssignee = await prisma.cardAssignee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardAssigneeFindFirstArgs>(args?: SelectSubset<T, CardAssigneeFindFirstArgs<ExtArgs>>): Prisma__CardAssigneeClient<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardAssignee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAssigneeFindFirstOrThrowArgs} args - Arguments to find a CardAssignee
     * @example
     * // Get one CardAssignee
     * const cardAssignee = await prisma.cardAssignee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardAssigneeFindFirstOrThrowArgs>(args?: SelectSubset<T, CardAssigneeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardAssigneeClient<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CardAssignees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAssigneeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardAssignees
     * const cardAssignees = await prisma.cardAssignee.findMany()
     * 
     * // Get first 10 CardAssignees
     * const cardAssignees = await prisma.cardAssignee.findMany({ take: 10 })
     * 
     * // Only select the `cardId`
     * const cardAssigneeWithCardIdOnly = await prisma.cardAssignee.findMany({ select: { cardId: true } })
     * 
     */
    findMany<T extends CardAssigneeFindManyArgs>(args?: SelectSubset<T, CardAssigneeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CardAssignee.
     * @param {CardAssigneeCreateArgs} args - Arguments to create a CardAssignee.
     * @example
     * // Create one CardAssignee
     * const CardAssignee = await prisma.cardAssignee.create({
     *   data: {
     *     // ... data to create a CardAssignee
     *   }
     * })
     * 
     */
    create<T extends CardAssigneeCreateArgs>(args: SelectSubset<T, CardAssigneeCreateArgs<ExtArgs>>): Prisma__CardAssigneeClient<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CardAssignees.
     * @param {CardAssigneeCreateManyArgs} args - Arguments to create many CardAssignees.
     * @example
     * // Create many CardAssignees
     * const cardAssignee = await prisma.cardAssignee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardAssigneeCreateManyArgs>(args?: SelectSubset<T, CardAssigneeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CardAssignees and returns the data saved in the database.
     * @param {CardAssigneeCreateManyAndReturnArgs} args - Arguments to create many CardAssignees.
     * @example
     * // Create many CardAssignees
     * const cardAssignee = await prisma.cardAssignee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CardAssignees and only return the `cardId`
     * const cardAssigneeWithCardIdOnly = await prisma.cardAssignee.createManyAndReturn({
     *   select: { cardId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CardAssigneeCreateManyAndReturnArgs>(args?: SelectSubset<T, CardAssigneeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CardAssignee.
     * @param {CardAssigneeDeleteArgs} args - Arguments to delete one CardAssignee.
     * @example
     * // Delete one CardAssignee
     * const CardAssignee = await prisma.cardAssignee.delete({
     *   where: {
     *     // ... filter to delete one CardAssignee
     *   }
     * })
     * 
     */
    delete<T extends CardAssigneeDeleteArgs>(args: SelectSubset<T, CardAssigneeDeleteArgs<ExtArgs>>): Prisma__CardAssigneeClient<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CardAssignee.
     * @param {CardAssigneeUpdateArgs} args - Arguments to update one CardAssignee.
     * @example
     * // Update one CardAssignee
     * const cardAssignee = await prisma.cardAssignee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardAssigneeUpdateArgs>(args: SelectSubset<T, CardAssigneeUpdateArgs<ExtArgs>>): Prisma__CardAssigneeClient<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CardAssignees.
     * @param {CardAssigneeDeleteManyArgs} args - Arguments to filter CardAssignees to delete.
     * @example
     * // Delete a few CardAssignees
     * const { count } = await prisma.cardAssignee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardAssigneeDeleteManyArgs>(args?: SelectSubset<T, CardAssigneeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardAssignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAssigneeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardAssignees
     * const cardAssignee = await prisma.cardAssignee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardAssigneeUpdateManyArgs>(args: SelectSubset<T, CardAssigneeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardAssignees and returns the data updated in the database.
     * @param {CardAssigneeUpdateManyAndReturnArgs} args - Arguments to update many CardAssignees.
     * @example
     * // Update many CardAssignees
     * const cardAssignee = await prisma.cardAssignee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CardAssignees and only return the `cardId`
     * const cardAssigneeWithCardIdOnly = await prisma.cardAssignee.updateManyAndReturn({
     *   select: { cardId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CardAssigneeUpdateManyAndReturnArgs>(args: SelectSubset<T, CardAssigneeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CardAssignee.
     * @param {CardAssigneeUpsertArgs} args - Arguments to update or create a CardAssignee.
     * @example
     * // Update or create a CardAssignee
     * const cardAssignee = await prisma.cardAssignee.upsert({
     *   create: {
     *     // ... data to create a CardAssignee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardAssignee we want to update
     *   }
     * })
     */
    upsert<T extends CardAssigneeUpsertArgs>(args: SelectSubset<T, CardAssigneeUpsertArgs<ExtArgs>>): Prisma__CardAssigneeClient<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CardAssignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAssigneeCountArgs} args - Arguments to filter CardAssignees to count.
     * @example
     * // Count the number of CardAssignees
     * const count = await prisma.cardAssignee.count({
     *   where: {
     *     // ... the filter for the CardAssignees we want to count
     *   }
     * })
    **/
    count<T extends CardAssigneeCountArgs>(
      args?: Subset<T, CardAssigneeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardAssigneeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardAssignee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAssigneeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardAssigneeAggregateArgs>(args: Subset<T, CardAssigneeAggregateArgs>): Prisma.PrismaPromise<GetCardAssigneeAggregateType<T>>

    /**
     * Group by CardAssignee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAssigneeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardAssigneeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardAssigneeGroupByArgs['orderBy'] }
        : { orderBy?: CardAssigneeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardAssigneeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardAssigneeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardAssignee model
   */
  readonly fields: CardAssigneeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardAssignee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardAssigneeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CardAssignee model
   */
  interface CardAssigneeFieldRefs {
    readonly cardId: FieldRef<"CardAssignee", 'String'>
    readonly userId: FieldRef<"CardAssignee", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CardAssignee findUnique
   */
  export type CardAssigneeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    /**
     * Filter, which CardAssignee to fetch.
     */
    where: CardAssigneeWhereUniqueInput
  }

  /**
   * CardAssignee findUniqueOrThrow
   */
  export type CardAssigneeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    /**
     * Filter, which CardAssignee to fetch.
     */
    where: CardAssigneeWhereUniqueInput
  }

  /**
   * CardAssignee findFirst
   */
  export type CardAssigneeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    /**
     * Filter, which CardAssignee to fetch.
     */
    where?: CardAssigneeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardAssignees to fetch.
     */
    orderBy?: CardAssigneeOrderByWithRelationInput | CardAssigneeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardAssignees.
     */
    cursor?: CardAssigneeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardAssignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardAssignees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardAssignees.
     */
    distinct?: CardAssigneeScalarFieldEnum | CardAssigneeScalarFieldEnum[]
  }

  /**
   * CardAssignee findFirstOrThrow
   */
  export type CardAssigneeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    /**
     * Filter, which CardAssignee to fetch.
     */
    where?: CardAssigneeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardAssignees to fetch.
     */
    orderBy?: CardAssigneeOrderByWithRelationInput | CardAssigneeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardAssignees.
     */
    cursor?: CardAssigneeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardAssignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardAssignees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardAssignees.
     */
    distinct?: CardAssigneeScalarFieldEnum | CardAssigneeScalarFieldEnum[]
  }

  /**
   * CardAssignee findMany
   */
  export type CardAssigneeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    /**
     * Filter, which CardAssignees to fetch.
     */
    where?: CardAssigneeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardAssignees to fetch.
     */
    orderBy?: CardAssigneeOrderByWithRelationInput | CardAssigneeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardAssignees.
     */
    cursor?: CardAssigneeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardAssignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardAssignees.
     */
    skip?: number
    distinct?: CardAssigneeScalarFieldEnum | CardAssigneeScalarFieldEnum[]
  }

  /**
   * CardAssignee create
   */
  export type CardAssigneeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    /**
     * The data needed to create a CardAssignee.
     */
    data: XOR<CardAssigneeCreateInput, CardAssigneeUncheckedCreateInput>
  }

  /**
   * CardAssignee createMany
   */
  export type CardAssigneeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardAssignees.
     */
    data: CardAssigneeCreateManyInput | CardAssigneeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CardAssignee createManyAndReturn
   */
  export type CardAssigneeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * The data used to create many CardAssignees.
     */
    data: CardAssigneeCreateManyInput | CardAssigneeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CardAssignee update
   */
  export type CardAssigneeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    /**
     * The data needed to update a CardAssignee.
     */
    data: XOR<CardAssigneeUpdateInput, CardAssigneeUncheckedUpdateInput>
    /**
     * Choose, which CardAssignee to update.
     */
    where: CardAssigneeWhereUniqueInput
  }

  /**
   * CardAssignee updateMany
   */
  export type CardAssigneeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardAssignees.
     */
    data: XOR<CardAssigneeUpdateManyMutationInput, CardAssigneeUncheckedUpdateManyInput>
    /**
     * Filter which CardAssignees to update
     */
    where?: CardAssigneeWhereInput
    /**
     * Limit how many CardAssignees to update.
     */
    limit?: number
  }

  /**
   * CardAssignee updateManyAndReturn
   */
  export type CardAssigneeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * The data used to update CardAssignees.
     */
    data: XOR<CardAssigneeUpdateManyMutationInput, CardAssigneeUncheckedUpdateManyInput>
    /**
     * Filter which CardAssignees to update
     */
    where?: CardAssigneeWhereInput
    /**
     * Limit how many CardAssignees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CardAssignee upsert
   */
  export type CardAssigneeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    /**
     * The filter to search for the CardAssignee to update in case it exists.
     */
    where: CardAssigneeWhereUniqueInput
    /**
     * In case the CardAssignee found by the `where` argument doesn't exist, create a new CardAssignee with this data.
     */
    create: XOR<CardAssigneeCreateInput, CardAssigneeUncheckedCreateInput>
    /**
     * In case the CardAssignee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardAssigneeUpdateInput, CardAssigneeUncheckedUpdateInput>
  }

  /**
   * CardAssignee delete
   */
  export type CardAssigneeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    /**
     * Filter which CardAssignee to delete.
     */
    where: CardAssigneeWhereUniqueInput
  }

  /**
   * CardAssignee deleteMany
   */
  export type CardAssigneeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardAssignees to delete
     */
    where?: CardAssigneeWhereInput
    /**
     * Limit how many CardAssignees to delete.
     */
    limit?: number
  }

  /**
   * CardAssignee without action
   */
  export type CardAssigneeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
  }


  /**
   * Model CardLabel
   */

  export type AggregateCardLabel = {
    _count: CardLabelCountAggregateOutputType | null
    _min: CardLabelMinAggregateOutputType | null
    _max: CardLabelMaxAggregateOutputType | null
  }

  export type CardLabelMinAggregateOutputType = {
    cardId: string | null
    labelId: string | null
  }

  export type CardLabelMaxAggregateOutputType = {
    cardId: string | null
    labelId: string | null
  }

  export type CardLabelCountAggregateOutputType = {
    cardId: number
    labelId: number
    _all: number
  }


  export type CardLabelMinAggregateInputType = {
    cardId?: true
    labelId?: true
  }

  export type CardLabelMaxAggregateInputType = {
    cardId?: true
    labelId?: true
  }

  export type CardLabelCountAggregateInputType = {
    cardId?: true
    labelId?: true
    _all?: true
  }

  export type CardLabelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardLabel to aggregate.
     */
    where?: CardLabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardLabels to fetch.
     */
    orderBy?: CardLabelOrderByWithRelationInput | CardLabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardLabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardLabels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardLabels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardLabels
    **/
    _count?: true | CardLabelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardLabelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardLabelMaxAggregateInputType
  }

  export type GetCardLabelAggregateType<T extends CardLabelAggregateArgs> = {
        [P in keyof T & keyof AggregateCardLabel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardLabel[P]>
      : GetScalarType<T[P], AggregateCardLabel[P]>
  }




  export type CardLabelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardLabelWhereInput
    orderBy?: CardLabelOrderByWithAggregationInput | CardLabelOrderByWithAggregationInput[]
    by: CardLabelScalarFieldEnum[] | CardLabelScalarFieldEnum
    having?: CardLabelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardLabelCountAggregateInputType | true
    _min?: CardLabelMinAggregateInputType
    _max?: CardLabelMaxAggregateInputType
  }

  export type CardLabelGroupByOutputType = {
    cardId: string
    labelId: string
    _count: CardLabelCountAggregateOutputType | null
    _min: CardLabelMinAggregateOutputType | null
    _max: CardLabelMaxAggregateOutputType | null
  }

  type GetCardLabelGroupByPayload<T extends CardLabelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardLabelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardLabelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardLabelGroupByOutputType[P]>
            : GetScalarType<T[P], CardLabelGroupByOutputType[P]>
        }
      >
    >


  export type CardLabelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cardId?: boolean
    labelId?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardLabel"]>

  export type CardLabelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cardId?: boolean
    labelId?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardLabel"]>

  export type CardLabelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cardId?: boolean
    labelId?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardLabel"]>

  export type CardLabelSelectScalar = {
    cardId?: boolean
    labelId?: boolean
  }

  export type CardLabelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"cardId" | "labelId", ExtArgs["result"]["cardLabel"]>
  export type CardLabelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
  }
  export type CardLabelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
  }
  export type CardLabelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
  }

  export type $CardLabelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardLabel"
    objects: {
      card: Prisma.$CardPayload<ExtArgs>
      label: Prisma.$LabelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      cardId: string
      labelId: string
    }, ExtArgs["result"]["cardLabel"]>
    composites: {}
  }

  type CardLabelGetPayload<S extends boolean | null | undefined | CardLabelDefaultArgs> = $Result.GetResult<Prisma.$CardLabelPayload, S>

  type CardLabelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CardLabelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CardLabelCountAggregateInputType | true
    }

  export interface CardLabelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardLabel'], meta: { name: 'CardLabel' } }
    /**
     * Find zero or one CardLabel that matches the filter.
     * @param {CardLabelFindUniqueArgs} args - Arguments to find a CardLabel
     * @example
     * // Get one CardLabel
     * const cardLabel = await prisma.cardLabel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardLabelFindUniqueArgs>(args: SelectSubset<T, CardLabelFindUniqueArgs<ExtArgs>>): Prisma__CardLabelClient<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CardLabel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CardLabelFindUniqueOrThrowArgs} args - Arguments to find a CardLabel
     * @example
     * // Get one CardLabel
     * const cardLabel = await prisma.cardLabel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardLabelFindUniqueOrThrowArgs>(args: SelectSubset<T, CardLabelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardLabelClient<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardLabel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLabelFindFirstArgs} args - Arguments to find a CardLabel
     * @example
     * // Get one CardLabel
     * const cardLabel = await prisma.cardLabel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardLabelFindFirstArgs>(args?: SelectSubset<T, CardLabelFindFirstArgs<ExtArgs>>): Prisma__CardLabelClient<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardLabel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLabelFindFirstOrThrowArgs} args - Arguments to find a CardLabel
     * @example
     * // Get one CardLabel
     * const cardLabel = await prisma.cardLabel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardLabelFindFirstOrThrowArgs>(args?: SelectSubset<T, CardLabelFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardLabelClient<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CardLabels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLabelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardLabels
     * const cardLabels = await prisma.cardLabel.findMany()
     * 
     * // Get first 10 CardLabels
     * const cardLabels = await prisma.cardLabel.findMany({ take: 10 })
     * 
     * // Only select the `cardId`
     * const cardLabelWithCardIdOnly = await prisma.cardLabel.findMany({ select: { cardId: true } })
     * 
     */
    findMany<T extends CardLabelFindManyArgs>(args?: SelectSubset<T, CardLabelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CardLabel.
     * @param {CardLabelCreateArgs} args - Arguments to create a CardLabel.
     * @example
     * // Create one CardLabel
     * const CardLabel = await prisma.cardLabel.create({
     *   data: {
     *     // ... data to create a CardLabel
     *   }
     * })
     * 
     */
    create<T extends CardLabelCreateArgs>(args: SelectSubset<T, CardLabelCreateArgs<ExtArgs>>): Prisma__CardLabelClient<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CardLabels.
     * @param {CardLabelCreateManyArgs} args - Arguments to create many CardLabels.
     * @example
     * // Create many CardLabels
     * const cardLabel = await prisma.cardLabel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardLabelCreateManyArgs>(args?: SelectSubset<T, CardLabelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CardLabels and returns the data saved in the database.
     * @param {CardLabelCreateManyAndReturnArgs} args - Arguments to create many CardLabels.
     * @example
     * // Create many CardLabels
     * const cardLabel = await prisma.cardLabel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CardLabels and only return the `cardId`
     * const cardLabelWithCardIdOnly = await prisma.cardLabel.createManyAndReturn({
     *   select: { cardId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CardLabelCreateManyAndReturnArgs>(args?: SelectSubset<T, CardLabelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CardLabel.
     * @param {CardLabelDeleteArgs} args - Arguments to delete one CardLabel.
     * @example
     * // Delete one CardLabel
     * const CardLabel = await prisma.cardLabel.delete({
     *   where: {
     *     // ... filter to delete one CardLabel
     *   }
     * })
     * 
     */
    delete<T extends CardLabelDeleteArgs>(args: SelectSubset<T, CardLabelDeleteArgs<ExtArgs>>): Prisma__CardLabelClient<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CardLabel.
     * @param {CardLabelUpdateArgs} args - Arguments to update one CardLabel.
     * @example
     * // Update one CardLabel
     * const cardLabel = await prisma.cardLabel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardLabelUpdateArgs>(args: SelectSubset<T, CardLabelUpdateArgs<ExtArgs>>): Prisma__CardLabelClient<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CardLabels.
     * @param {CardLabelDeleteManyArgs} args - Arguments to filter CardLabels to delete.
     * @example
     * // Delete a few CardLabels
     * const { count } = await prisma.cardLabel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardLabelDeleteManyArgs>(args?: SelectSubset<T, CardLabelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardLabels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLabelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardLabels
     * const cardLabel = await prisma.cardLabel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardLabelUpdateManyArgs>(args: SelectSubset<T, CardLabelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardLabels and returns the data updated in the database.
     * @param {CardLabelUpdateManyAndReturnArgs} args - Arguments to update many CardLabels.
     * @example
     * // Update many CardLabels
     * const cardLabel = await prisma.cardLabel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CardLabels and only return the `cardId`
     * const cardLabelWithCardIdOnly = await prisma.cardLabel.updateManyAndReturn({
     *   select: { cardId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CardLabelUpdateManyAndReturnArgs>(args: SelectSubset<T, CardLabelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CardLabel.
     * @param {CardLabelUpsertArgs} args - Arguments to update or create a CardLabel.
     * @example
     * // Update or create a CardLabel
     * const cardLabel = await prisma.cardLabel.upsert({
     *   create: {
     *     // ... data to create a CardLabel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardLabel we want to update
     *   }
     * })
     */
    upsert<T extends CardLabelUpsertArgs>(args: SelectSubset<T, CardLabelUpsertArgs<ExtArgs>>): Prisma__CardLabelClient<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CardLabels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLabelCountArgs} args - Arguments to filter CardLabels to count.
     * @example
     * // Count the number of CardLabels
     * const count = await prisma.cardLabel.count({
     *   where: {
     *     // ... the filter for the CardLabels we want to count
     *   }
     * })
    **/
    count<T extends CardLabelCountArgs>(
      args?: Subset<T, CardLabelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardLabelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardLabel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLabelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardLabelAggregateArgs>(args: Subset<T, CardLabelAggregateArgs>): Prisma.PrismaPromise<GetCardLabelAggregateType<T>>

    /**
     * Group by CardLabel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardLabelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardLabelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardLabelGroupByArgs['orderBy'] }
        : { orderBy?: CardLabelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardLabelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardLabelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardLabel model
   */
  readonly fields: CardLabelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardLabel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardLabelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    label<T extends LabelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LabelDefaultArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CardLabel model
   */
  interface CardLabelFieldRefs {
    readonly cardId: FieldRef<"CardLabel", 'String'>
    readonly labelId: FieldRef<"CardLabel", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CardLabel findUnique
   */
  export type CardLabelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    /**
     * Filter, which CardLabel to fetch.
     */
    where: CardLabelWhereUniqueInput
  }

  /**
   * CardLabel findUniqueOrThrow
   */
  export type CardLabelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    /**
     * Filter, which CardLabel to fetch.
     */
    where: CardLabelWhereUniqueInput
  }

  /**
   * CardLabel findFirst
   */
  export type CardLabelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    /**
     * Filter, which CardLabel to fetch.
     */
    where?: CardLabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardLabels to fetch.
     */
    orderBy?: CardLabelOrderByWithRelationInput | CardLabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardLabels.
     */
    cursor?: CardLabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardLabels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardLabels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardLabels.
     */
    distinct?: CardLabelScalarFieldEnum | CardLabelScalarFieldEnum[]
  }

  /**
   * CardLabel findFirstOrThrow
   */
  export type CardLabelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    /**
     * Filter, which CardLabel to fetch.
     */
    where?: CardLabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardLabels to fetch.
     */
    orderBy?: CardLabelOrderByWithRelationInput | CardLabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardLabels.
     */
    cursor?: CardLabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardLabels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardLabels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardLabels.
     */
    distinct?: CardLabelScalarFieldEnum | CardLabelScalarFieldEnum[]
  }

  /**
   * CardLabel findMany
   */
  export type CardLabelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    /**
     * Filter, which CardLabels to fetch.
     */
    where?: CardLabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardLabels to fetch.
     */
    orderBy?: CardLabelOrderByWithRelationInput | CardLabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardLabels.
     */
    cursor?: CardLabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardLabels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardLabels.
     */
    skip?: number
    distinct?: CardLabelScalarFieldEnum | CardLabelScalarFieldEnum[]
  }

  /**
   * CardLabel create
   */
  export type CardLabelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    /**
     * The data needed to create a CardLabel.
     */
    data: XOR<CardLabelCreateInput, CardLabelUncheckedCreateInput>
  }

  /**
   * CardLabel createMany
   */
  export type CardLabelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardLabels.
     */
    data: CardLabelCreateManyInput | CardLabelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CardLabel createManyAndReturn
   */
  export type CardLabelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * The data used to create many CardLabels.
     */
    data: CardLabelCreateManyInput | CardLabelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CardLabel update
   */
  export type CardLabelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    /**
     * The data needed to update a CardLabel.
     */
    data: XOR<CardLabelUpdateInput, CardLabelUncheckedUpdateInput>
    /**
     * Choose, which CardLabel to update.
     */
    where: CardLabelWhereUniqueInput
  }

  /**
   * CardLabel updateMany
   */
  export type CardLabelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardLabels.
     */
    data: XOR<CardLabelUpdateManyMutationInput, CardLabelUncheckedUpdateManyInput>
    /**
     * Filter which CardLabels to update
     */
    where?: CardLabelWhereInput
    /**
     * Limit how many CardLabels to update.
     */
    limit?: number
  }

  /**
   * CardLabel updateManyAndReturn
   */
  export type CardLabelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * The data used to update CardLabels.
     */
    data: XOR<CardLabelUpdateManyMutationInput, CardLabelUncheckedUpdateManyInput>
    /**
     * Filter which CardLabels to update
     */
    where?: CardLabelWhereInput
    /**
     * Limit how many CardLabels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CardLabel upsert
   */
  export type CardLabelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    /**
     * The filter to search for the CardLabel to update in case it exists.
     */
    where: CardLabelWhereUniqueInput
    /**
     * In case the CardLabel found by the `where` argument doesn't exist, create a new CardLabel with this data.
     */
    create: XOR<CardLabelCreateInput, CardLabelUncheckedCreateInput>
    /**
     * In case the CardLabel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardLabelUpdateInput, CardLabelUncheckedUpdateInput>
  }

  /**
   * CardLabel delete
   */
  export type CardLabelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    /**
     * Filter which CardLabel to delete.
     */
    where: CardLabelWhereUniqueInput
  }

  /**
   * CardLabel deleteMany
   */
  export type CardLabelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardLabels to delete
     */
    where?: CardLabelWhereInput
    /**
     * Limit how many CardLabels to delete.
     */
    limit?: number
  }

  /**
   * CardLabel without action
   */
  export type CardLabelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
  }


  /**
   * Model CardWatcher
   */

  export type AggregateCardWatcher = {
    _count: CardWatcherCountAggregateOutputType | null
    _min: CardWatcherMinAggregateOutputType | null
    _max: CardWatcherMaxAggregateOutputType | null
  }

  export type CardWatcherMinAggregateOutputType = {
    cardId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type CardWatcherMaxAggregateOutputType = {
    cardId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type CardWatcherCountAggregateOutputType = {
    cardId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type CardWatcherMinAggregateInputType = {
    cardId?: true
    userId?: true
    createdAt?: true
  }

  export type CardWatcherMaxAggregateInputType = {
    cardId?: true
    userId?: true
    createdAt?: true
  }

  export type CardWatcherCountAggregateInputType = {
    cardId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type CardWatcherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardWatcher to aggregate.
     */
    where?: CardWatcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardWatchers to fetch.
     */
    orderBy?: CardWatcherOrderByWithRelationInput | CardWatcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardWatcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardWatchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardWatchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CardWatchers
    **/
    _count?: true | CardWatcherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardWatcherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardWatcherMaxAggregateInputType
  }

  export type GetCardWatcherAggregateType<T extends CardWatcherAggregateArgs> = {
        [P in keyof T & keyof AggregateCardWatcher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCardWatcher[P]>
      : GetScalarType<T[P], AggregateCardWatcher[P]>
  }




  export type CardWatcherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWatcherWhereInput
    orderBy?: CardWatcherOrderByWithAggregationInput | CardWatcherOrderByWithAggregationInput[]
    by: CardWatcherScalarFieldEnum[] | CardWatcherScalarFieldEnum
    having?: CardWatcherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardWatcherCountAggregateInputType | true
    _min?: CardWatcherMinAggregateInputType
    _max?: CardWatcherMaxAggregateInputType
  }

  export type CardWatcherGroupByOutputType = {
    cardId: string
    userId: string
    createdAt: Date
    _count: CardWatcherCountAggregateOutputType | null
    _min: CardWatcherMinAggregateOutputType | null
    _max: CardWatcherMaxAggregateOutputType | null
  }

  type GetCardWatcherGroupByPayload<T extends CardWatcherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardWatcherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardWatcherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardWatcherGroupByOutputType[P]>
            : GetScalarType<T[P], CardWatcherGroupByOutputType[P]>
        }
      >
    >


  export type CardWatcherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cardId?: boolean
    userId?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardWatcher"]>

  export type CardWatcherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cardId?: boolean
    userId?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardWatcher"]>

  export type CardWatcherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    cardId?: boolean
    userId?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cardWatcher"]>

  export type CardWatcherSelectScalar = {
    cardId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type CardWatcherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"cardId" | "userId" | "createdAt", ExtArgs["result"]["cardWatcher"]>
  export type CardWatcherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CardWatcherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CardWatcherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CardWatcherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CardWatcher"
    objects: {
      card: Prisma.$CardPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      cardId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["cardWatcher"]>
    composites: {}
  }

  type CardWatcherGetPayload<S extends boolean | null | undefined | CardWatcherDefaultArgs> = $Result.GetResult<Prisma.$CardWatcherPayload, S>

  type CardWatcherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CardWatcherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CardWatcherCountAggregateInputType | true
    }

  export interface CardWatcherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CardWatcher'], meta: { name: 'CardWatcher' } }
    /**
     * Find zero or one CardWatcher that matches the filter.
     * @param {CardWatcherFindUniqueArgs} args - Arguments to find a CardWatcher
     * @example
     * // Get one CardWatcher
     * const cardWatcher = await prisma.cardWatcher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardWatcherFindUniqueArgs>(args: SelectSubset<T, CardWatcherFindUniqueArgs<ExtArgs>>): Prisma__CardWatcherClient<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CardWatcher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CardWatcherFindUniqueOrThrowArgs} args - Arguments to find a CardWatcher
     * @example
     * // Get one CardWatcher
     * const cardWatcher = await prisma.cardWatcher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardWatcherFindUniqueOrThrowArgs>(args: SelectSubset<T, CardWatcherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardWatcherClient<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardWatcher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardWatcherFindFirstArgs} args - Arguments to find a CardWatcher
     * @example
     * // Get one CardWatcher
     * const cardWatcher = await prisma.cardWatcher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardWatcherFindFirstArgs>(args?: SelectSubset<T, CardWatcherFindFirstArgs<ExtArgs>>): Prisma__CardWatcherClient<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CardWatcher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardWatcherFindFirstOrThrowArgs} args - Arguments to find a CardWatcher
     * @example
     * // Get one CardWatcher
     * const cardWatcher = await prisma.cardWatcher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardWatcherFindFirstOrThrowArgs>(args?: SelectSubset<T, CardWatcherFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardWatcherClient<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CardWatchers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardWatcherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CardWatchers
     * const cardWatchers = await prisma.cardWatcher.findMany()
     * 
     * // Get first 10 CardWatchers
     * const cardWatchers = await prisma.cardWatcher.findMany({ take: 10 })
     * 
     * // Only select the `cardId`
     * const cardWatcherWithCardIdOnly = await prisma.cardWatcher.findMany({ select: { cardId: true } })
     * 
     */
    findMany<T extends CardWatcherFindManyArgs>(args?: SelectSubset<T, CardWatcherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CardWatcher.
     * @param {CardWatcherCreateArgs} args - Arguments to create a CardWatcher.
     * @example
     * // Create one CardWatcher
     * const CardWatcher = await prisma.cardWatcher.create({
     *   data: {
     *     // ... data to create a CardWatcher
     *   }
     * })
     * 
     */
    create<T extends CardWatcherCreateArgs>(args: SelectSubset<T, CardWatcherCreateArgs<ExtArgs>>): Prisma__CardWatcherClient<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CardWatchers.
     * @param {CardWatcherCreateManyArgs} args - Arguments to create many CardWatchers.
     * @example
     * // Create many CardWatchers
     * const cardWatcher = await prisma.cardWatcher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardWatcherCreateManyArgs>(args?: SelectSubset<T, CardWatcherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CardWatchers and returns the data saved in the database.
     * @param {CardWatcherCreateManyAndReturnArgs} args - Arguments to create many CardWatchers.
     * @example
     * // Create many CardWatchers
     * const cardWatcher = await prisma.cardWatcher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CardWatchers and only return the `cardId`
     * const cardWatcherWithCardIdOnly = await prisma.cardWatcher.createManyAndReturn({
     *   select: { cardId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CardWatcherCreateManyAndReturnArgs>(args?: SelectSubset<T, CardWatcherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CardWatcher.
     * @param {CardWatcherDeleteArgs} args - Arguments to delete one CardWatcher.
     * @example
     * // Delete one CardWatcher
     * const CardWatcher = await prisma.cardWatcher.delete({
     *   where: {
     *     // ... filter to delete one CardWatcher
     *   }
     * })
     * 
     */
    delete<T extends CardWatcherDeleteArgs>(args: SelectSubset<T, CardWatcherDeleteArgs<ExtArgs>>): Prisma__CardWatcherClient<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CardWatcher.
     * @param {CardWatcherUpdateArgs} args - Arguments to update one CardWatcher.
     * @example
     * // Update one CardWatcher
     * const cardWatcher = await prisma.cardWatcher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardWatcherUpdateArgs>(args: SelectSubset<T, CardWatcherUpdateArgs<ExtArgs>>): Prisma__CardWatcherClient<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CardWatchers.
     * @param {CardWatcherDeleteManyArgs} args - Arguments to filter CardWatchers to delete.
     * @example
     * // Delete a few CardWatchers
     * const { count } = await prisma.cardWatcher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardWatcherDeleteManyArgs>(args?: SelectSubset<T, CardWatcherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardWatchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardWatcherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CardWatchers
     * const cardWatcher = await prisma.cardWatcher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardWatcherUpdateManyArgs>(args: SelectSubset<T, CardWatcherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CardWatchers and returns the data updated in the database.
     * @param {CardWatcherUpdateManyAndReturnArgs} args - Arguments to update many CardWatchers.
     * @example
     * // Update many CardWatchers
     * const cardWatcher = await prisma.cardWatcher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CardWatchers and only return the `cardId`
     * const cardWatcherWithCardIdOnly = await prisma.cardWatcher.updateManyAndReturn({
     *   select: { cardId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CardWatcherUpdateManyAndReturnArgs>(args: SelectSubset<T, CardWatcherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CardWatcher.
     * @param {CardWatcherUpsertArgs} args - Arguments to update or create a CardWatcher.
     * @example
     * // Update or create a CardWatcher
     * const cardWatcher = await prisma.cardWatcher.upsert({
     *   create: {
     *     // ... data to create a CardWatcher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CardWatcher we want to update
     *   }
     * })
     */
    upsert<T extends CardWatcherUpsertArgs>(args: SelectSubset<T, CardWatcherUpsertArgs<ExtArgs>>): Prisma__CardWatcherClient<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CardWatchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardWatcherCountArgs} args - Arguments to filter CardWatchers to count.
     * @example
     * // Count the number of CardWatchers
     * const count = await prisma.cardWatcher.count({
     *   where: {
     *     // ... the filter for the CardWatchers we want to count
     *   }
     * })
    **/
    count<T extends CardWatcherCountArgs>(
      args?: Subset<T, CardWatcherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardWatcherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CardWatcher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardWatcherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardWatcherAggregateArgs>(args: Subset<T, CardWatcherAggregateArgs>): Prisma.PrismaPromise<GetCardWatcherAggregateType<T>>

    /**
     * Group by CardWatcher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardWatcherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardWatcherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardWatcherGroupByArgs['orderBy'] }
        : { orderBy?: CardWatcherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardWatcherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardWatcherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CardWatcher model
   */
  readonly fields: CardWatcherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CardWatcher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardWatcherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CardWatcher model
   */
  interface CardWatcherFieldRefs {
    readonly cardId: FieldRef<"CardWatcher", 'String'>
    readonly userId: FieldRef<"CardWatcher", 'String'>
    readonly createdAt: FieldRef<"CardWatcher", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CardWatcher findUnique
   */
  export type CardWatcherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    /**
     * Filter, which CardWatcher to fetch.
     */
    where: CardWatcherWhereUniqueInput
  }

  /**
   * CardWatcher findUniqueOrThrow
   */
  export type CardWatcherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    /**
     * Filter, which CardWatcher to fetch.
     */
    where: CardWatcherWhereUniqueInput
  }

  /**
   * CardWatcher findFirst
   */
  export type CardWatcherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    /**
     * Filter, which CardWatcher to fetch.
     */
    where?: CardWatcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardWatchers to fetch.
     */
    orderBy?: CardWatcherOrderByWithRelationInput | CardWatcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardWatchers.
     */
    cursor?: CardWatcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardWatchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardWatchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardWatchers.
     */
    distinct?: CardWatcherScalarFieldEnum | CardWatcherScalarFieldEnum[]
  }

  /**
   * CardWatcher findFirstOrThrow
   */
  export type CardWatcherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    /**
     * Filter, which CardWatcher to fetch.
     */
    where?: CardWatcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardWatchers to fetch.
     */
    orderBy?: CardWatcherOrderByWithRelationInput | CardWatcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CardWatchers.
     */
    cursor?: CardWatcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardWatchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardWatchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CardWatchers.
     */
    distinct?: CardWatcherScalarFieldEnum | CardWatcherScalarFieldEnum[]
  }

  /**
   * CardWatcher findMany
   */
  export type CardWatcherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    /**
     * Filter, which CardWatchers to fetch.
     */
    where?: CardWatcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CardWatchers to fetch.
     */
    orderBy?: CardWatcherOrderByWithRelationInput | CardWatcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CardWatchers.
     */
    cursor?: CardWatcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CardWatchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CardWatchers.
     */
    skip?: number
    distinct?: CardWatcherScalarFieldEnum | CardWatcherScalarFieldEnum[]
  }

  /**
   * CardWatcher create
   */
  export type CardWatcherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    /**
     * The data needed to create a CardWatcher.
     */
    data: XOR<CardWatcherCreateInput, CardWatcherUncheckedCreateInput>
  }

  /**
   * CardWatcher createMany
   */
  export type CardWatcherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CardWatchers.
     */
    data: CardWatcherCreateManyInput | CardWatcherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CardWatcher createManyAndReturn
   */
  export type CardWatcherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * The data used to create many CardWatchers.
     */
    data: CardWatcherCreateManyInput | CardWatcherCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CardWatcher update
   */
  export type CardWatcherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    /**
     * The data needed to update a CardWatcher.
     */
    data: XOR<CardWatcherUpdateInput, CardWatcherUncheckedUpdateInput>
    /**
     * Choose, which CardWatcher to update.
     */
    where: CardWatcherWhereUniqueInput
  }

  /**
   * CardWatcher updateMany
   */
  export type CardWatcherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CardWatchers.
     */
    data: XOR<CardWatcherUpdateManyMutationInput, CardWatcherUncheckedUpdateManyInput>
    /**
     * Filter which CardWatchers to update
     */
    where?: CardWatcherWhereInput
    /**
     * Limit how many CardWatchers to update.
     */
    limit?: number
  }

  /**
   * CardWatcher updateManyAndReturn
   */
  export type CardWatcherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * The data used to update CardWatchers.
     */
    data: XOR<CardWatcherUpdateManyMutationInput, CardWatcherUncheckedUpdateManyInput>
    /**
     * Filter which CardWatchers to update
     */
    where?: CardWatcherWhereInput
    /**
     * Limit how many CardWatchers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CardWatcher upsert
   */
  export type CardWatcherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    /**
     * The filter to search for the CardWatcher to update in case it exists.
     */
    where: CardWatcherWhereUniqueInput
    /**
     * In case the CardWatcher found by the `where` argument doesn't exist, create a new CardWatcher with this data.
     */
    create: XOR<CardWatcherCreateInput, CardWatcherUncheckedCreateInput>
    /**
     * In case the CardWatcher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardWatcherUpdateInput, CardWatcherUncheckedUpdateInput>
  }

  /**
   * CardWatcher delete
   */
  export type CardWatcherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    /**
     * Filter which CardWatcher to delete.
     */
    where: CardWatcherWhereUniqueInput
  }

  /**
   * CardWatcher deleteMany
   */
  export type CardWatcherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CardWatchers to delete
     */
    where?: CardWatcherWhereInput
    /**
     * Limit how many CardWatchers to delete.
     */
    limit?: number
  }

  /**
   * CardWatcher without action
   */
  export type CardWatcherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
  }


  /**
   * Model Card
   */

  export type AggregateCard = {
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  export type CardAvgAggregateOutputType = {
    position: Decimal | null
  }

  export type CardSumAggregateOutputType = {
    position: Decimal | null
  }

  export type CardMinAggregateOutputType = {
    id: string | null
    listId: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    startDate: Date | null
    position: Decimal | null
    isArchived: boolean | null
    createdBy: string | null
    coverImageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CardMaxAggregateOutputType = {
    id: string | null
    listId: string | null
    title: string | null
    description: string | null
    dueDate: Date | null
    startDate: Date | null
    position: Decimal | null
    isArchived: boolean | null
    createdBy: string | null
    coverImageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CardCountAggregateOutputType = {
    id: number
    listId: number
    title: number
    description: number
    dueDate: number
    startDate: number
    position: number
    isArchived: number
    createdBy: number
    coverImageUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CardAvgAggregateInputType = {
    position?: true
  }

  export type CardSumAggregateInputType = {
    position?: true
  }

  export type CardMinAggregateInputType = {
    id?: true
    listId?: true
    title?: true
    description?: true
    dueDate?: true
    startDate?: true
    position?: true
    isArchived?: true
    createdBy?: true
    coverImageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CardMaxAggregateInputType = {
    id?: true
    listId?: true
    title?: true
    description?: true
    dueDate?: true
    startDate?: true
    position?: true
    isArchived?: true
    createdBy?: true
    coverImageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CardCountAggregateInputType = {
    id?: true
    listId?: true
    title?: true
    description?: true
    dueDate?: true
    startDate?: true
    position?: true
    isArchived?: true
    createdBy?: true
    coverImageUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Card to aggregate.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cards
    **/
    _count?: true | CardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CardMaxAggregateInputType
  }

  export type GetCardAggregateType<T extends CardAggregateArgs> = {
        [P in keyof T & keyof AggregateCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCard[P]>
      : GetScalarType<T[P], AggregateCard[P]>
  }




  export type CardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CardWhereInput
    orderBy?: CardOrderByWithAggregationInput | CardOrderByWithAggregationInput[]
    by: CardScalarFieldEnum[] | CardScalarFieldEnum
    having?: CardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CardCountAggregateInputType | true
    _avg?: CardAvgAggregateInputType
    _sum?: CardSumAggregateInputType
    _min?: CardMinAggregateInputType
    _max?: CardMaxAggregateInputType
  }

  export type CardGroupByOutputType = {
    id: string
    listId: string
    title: string
    description: string | null
    dueDate: Date | null
    startDate: Date | null
    position: Decimal
    isArchived: boolean
    createdBy: string
    coverImageUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: CardCountAggregateOutputType | null
    _avg: CardAvgAggregateOutputType | null
    _sum: CardSumAggregateOutputType | null
    _min: CardMinAggregateOutputType | null
    _max: CardMaxAggregateOutputType | null
  }

  type GetCardGroupByPayload<T extends CardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CardGroupByOutputType[P]>
            : GetScalarType<T[P], CardGroupByOutputType[P]>
        }
      >
    >


  export type CardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    startDate?: boolean
    position?: boolean
    isArchived?: boolean
    createdBy?: boolean
    coverImageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activityLogs?: boolean | Card$activityLogsArgs<ExtArgs>
    attachments?: boolean | Card$attachmentsArgs<ExtArgs>
    assignees?: boolean | Card$assigneesArgs<ExtArgs>
    cardLabels?: boolean | Card$cardLabelsArgs<ExtArgs>
    watchers?: boolean | Card$watchersArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    list?: boolean | ListDefaultArgs<ExtArgs>
    checklists?: boolean | Card$checklistsArgs<ExtArgs>
    comments?: boolean | Card$commentsArgs<ExtArgs>
    _count?: boolean | CardCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["card"]>

  export type CardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    startDate?: boolean
    position?: boolean
    isArchived?: boolean
    createdBy?: boolean
    coverImageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    list?: boolean | ListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["card"]>

  export type CardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    listId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    startDate?: boolean
    position?: boolean
    isArchived?: boolean
    createdBy?: boolean
    coverImageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    list?: boolean | ListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["card"]>

  export type CardSelectScalar = {
    id?: boolean
    listId?: boolean
    title?: boolean
    description?: boolean
    dueDate?: boolean
    startDate?: boolean
    position?: boolean
    isArchived?: boolean
    createdBy?: boolean
    coverImageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "listId" | "title" | "description" | "dueDate" | "startDate" | "position" | "isArchived" | "createdBy" | "coverImageUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["card"]>
  export type CardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityLogs?: boolean | Card$activityLogsArgs<ExtArgs>
    attachments?: boolean | Card$attachmentsArgs<ExtArgs>
    assignees?: boolean | Card$assigneesArgs<ExtArgs>
    cardLabels?: boolean | Card$cardLabelsArgs<ExtArgs>
    watchers?: boolean | Card$watchersArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    list?: boolean | ListDefaultArgs<ExtArgs>
    checklists?: boolean | Card$checklistsArgs<ExtArgs>
    comments?: boolean | Card$commentsArgs<ExtArgs>
    _count?: boolean | CardCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    list?: boolean | ListDefaultArgs<ExtArgs>
  }
  export type CardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    list?: boolean | ListDefaultArgs<ExtArgs>
  }

  export type $CardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Card"
    objects: {
      activityLogs: Prisma.$ActivityLogPayload<ExtArgs>[]
      attachments: Prisma.$AttachmentPayload<ExtArgs>[]
      assignees: Prisma.$CardAssigneePayload<ExtArgs>[]
      cardLabels: Prisma.$CardLabelPayload<ExtArgs>[]
      watchers: Prisma.$CardWatcherPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
      list: Prisma.$ListPayload<ExtArgs>
      checklists: Prisma.$ChecklistPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      listId: string
      title: string
      description: string | null
      dueDate: Date | null
      startDate: Date | null
      position: Prisma.Decimal
      isArchived: boolean
      createdBy: string
      coverImageUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["card"]>
    composites: {}
  }

  type CardGetPayload<S extends boolean | null | undefined | CardDefaultArgs> = $Result.GetResult<Prisma.$CardPayload, S>

  type CardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CardCountAggregateInputType | true
    }

  export interface CardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Card'], meta: { name: 'Card' } }
    /**
     * Find zero or one Card that matches the filter.
     * @param {CardFindUniqueArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CardFindUniqueArgs>(args: SelectSubset<T, CardFindUniqueArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Card that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CardFindUniqueOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CardFindUniqueOrThrowArgs>(args: SelectSubset<T, CardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Card that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CardFindFirstArgs>(args?: SelectSubset<T, CardFindFirstArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Card that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindFirstOrThrowArgs} args - Arguments to find a Card
     * @example
     * // Get one Card
     * const card = await prisma.card.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CardFindFirstOrThrowArgs>(args?: SelectSubset<T, CardFindFirstOrThrowArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cards
     * const cards = await prisma.card.findMany()
     * 
     * // Get first 10 Cards
     * const cards = await prisma.card.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cardWithIdOnly = await prisma.card.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CardFindManyArgs>(args?: SelectSubset<T, CardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Card.
     * @param {CardCreateArgs} args - Arguments to create a Card.
     * @example
     * // Create one Card
     * const Card = await prisma.card.create({
     *   data: {
     *     // ... data to create a Card
     *   }
     * })
     * 
     */
    create<T extends CardCreateArgs>(args: SelectSubset<T, CardCreateArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cards.
     * @param {CardCreateManyArgs} args - Arguments to create many Cards.
     * @example
     * // Create many Cards
     * const card = await prisma.card.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CardCreateManyArgs>(args?: SelectSubset<T, CardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cards and returns the data saved in the database.
     * @param {CardCreateManyAndReturnArgs} args - Arguments to create many Cards.
     * @example
     * // Create many Cards
     * const card = await prisma.card.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cards and only return the `id`
     * const cardWithIdOnly = await prisma.card.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CardCreateManyAndReturnArgs>(args?: SelectSubset<T, CardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Card.
     * @param {CardDeleteArgs} args - Arguments to delete one Card.
     * @example
     * // Delete one Card
     * const Card = await prisma.card.delete({
     *   where: {
     *     // ... filter to delete one Card
     *   }
     * })
     * 
     */
    delete<T extends CardDeleteArgs>(args: SelectSubset<T, CardDeleteArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Card.
     * @param {CardUpdateArgs} args - Arguments to update one Card.
     * @example
     * // Update one Card
     * const card = await prisma.card.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CardUpdateArgs>(args: SelectSubset<T, CardUpdateArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cards.
     * @param {CardDeleteManyArgs} args - Arguments to filter Cards to delete.
     * @example
     * // Delete a few Cards
     * const { count } = await prisma.card.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CardDeleteManyArgs>(args?: SelectSubset<T, CardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cards
     * const card = await prisma.card.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CardUpdateManyArgs>(args: SelectSubset<T, CardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cards and returns the data updated in the database.
     * @param {CardUpdateManyAndReturnArgs} args - Arguments to update many Cards.
     * @example
     * // Update many Cards
     * const card = await prisma.card.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cards and only return the `id`
     * const cardWithIdOnly = await prisma.card.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CardUpdateManyAndReturnArgs>(args: SelectSubset<T, CardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Card.
     * @param {CardUpsertArgs} args - Arguments to update or create a Card.
     * @example
     * // Update or create a Card
     * const card = await prisma.card.upsert({
     *   create: {
     *     // ... data to create a Card
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Card we want to update
     *   }
     * })
     */
    upsert<T extends CardUpsertArgs>(args: SelectSubset<T, CardUpsertArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardCountArgs} args - Arguments to filter Cards to count.
     * @example
     * // Count the number of Cards
     * const count = await prisma.card.count({
     *   where: {
     *     // ... the filter for the Cards we want to count
     *   }
     * })
    **/
    count<T extends CardCountArgs>(
      args?: Subset<T, CardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CardAggregateArgs>(args: Subset<T, CardAggregateArgs>): Prisma.PrismaPromise<GetCardAggregateType<T>>

    /**
     * Group by Card.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CardGroupByArgs['orderBy'] }
        : { orderBy?: CardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Card model
   */
  readonly fields: CardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Card.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activityLogs<T extends Card$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, Card$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attachments<T extends Card$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Card$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignees<T extends Card$assigneesArgs<ExtArgs> = {}>(args?: Subset<T, Card$assigneesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cardLabels<T extends Card$cardLabelsArgs<ExtArgs> = {}>(args?: Subset<T, Card$cardLabelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchers<T extends Card$watchersArgs<ExtArgs> = {}>(args?: Subset<T, Card$watchersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    list<T extends ListDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ListDefaultArgs<ExtArgs>>): Prisma__ListClient<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    checklists<T extends Card$checklistsArgs<ExtArgs> = {}>(args?: Subset<T, Card$checklistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Card$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Card$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Card model
   */
  interface CardFieldRefs {
    readonly id: FieldRef<"Card", 'String'>
    readonly listId: FieldRef<"Card", 'String'>
    readonly title: FieldRef<"Card", 'String'>
    readonly description: FieldRef<"Card", 'String'>
    readonly dueDate: FieldRef<"Card", 'DateTime'>
    readonly startDate: FieldRef<"Card", 'DateTime'>
    readonly position: FieldRef<"Card", 'Decimal'>
    readonly isArchived: FieldRef<"Card", 'Boolean'>
    readonly createdBy: FieldRef<"Card", 'String'>
    readonly coverImageUrl: FieldRef<"Card", 'String'>
    readonly createdAt: FieldRef<"Card", 'DateTime'>
    readonly updatedAt: FieldRef<"Card", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Card findUnique
   */
  export type CardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findUniqueOrThrow
   */
  export type CardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card findFirst
   */
  export type CardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card findFirstOrThrow
   */
  export type CardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Card to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cards.
     */
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card findMany
   */
  export type CardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter, which Cards to fetch.
     */
    where?: CardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cards to fetch.
     */
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cards.
     */
    cursor?: CardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cards.
     */
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * Card create
   */
  export type CardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The data needed to create a Card.
     */
    data: XOR<CardCreateInput, CardUncheckedCreateInput>
  }

  /**
   * Card createMany
   */
  export type CardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cards.
     */
    data: CardCreateManyInput | CardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Card createManyAndReturn
   */
  export type CardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * The data used to create many Cards.
     */
    data: CardCreateManyInput | CardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Card update
   */
  export type CardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The data needed to update a Card.
     */
    data: XOR<CardUpdateInput, CardUncheckedUpdateInput>
    /**
     * Choose, which Card to update.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card updateMany
   */
  export type CardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cards.
     */
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyInput>
    /**
     * Filter which Cards to update
     */
    where?: CardWhereInput
    /**
     * Limit how many Cards to update.
     */
    limit?: number
  }

  /**
   * Card updateManyAndReturn
   */
  export type CardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * The data used to update Cards.
     */
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyInput>
    /**
     * Filter which Cards to update
     */
    where?: CardWhereInput
    /**
     * Limit how many Cards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Card upsert
   */
  export type CardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * The filter to search for the Card to update in case it exists.
     */
    where: CardWhereUniqueInput
    /**
     * In case the Card found by the `where` argument doesn't exist, create a new Card with this data.
     */
    create: XOR<CardCreateInput, CardUncheckedCreateInput>
    /**
     * In case the Card was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CardUpdateInput, CardUncheckedUpdateInput>
  }

  /**
   * Card delete
   */
  export type CardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    /**
     * Filter which Card to delete.
     */
    where: CardWhereUniqueInput
  }

  /**
   * Card deleteMany
   */
  export type CardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cards to delete
     */
    where?: CardWhereInput
    /**
     * Limit how many Cards to delete.
     */
    limit?: number
  }

  /**
   * Card.activityLogs
   */
  export type Card$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    cursor?: ActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * Card.attachments
   */
  export type Card$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    cursor?: AttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Card.assignees
   */
  export type Card$assigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    where?: CardAssigneeWhereInput
    orderBy?: CardAssigneeOrderByWithRelationInput | CardAssigneeOrderByWithRelationInput[]
    cursor?: CardAssigneeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardAssigneeScalarFieldEnum | CardAssigneeScalarFieldEnum[]
  }

  /**
   * Card.cardLabels
   */
  export type Card$cardLabelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    where?: CardLabelWhereInput
    orderBy?: CardLabelOrderByWithRelationInput | CardLabelOrderByWithRelationInput[]
    cursor?: CardLabelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardLabelScalarFieldEnum | CardLabelScalarFieldEnum[]
  }

  /**
   * Card.watchers
   */
  export type Card$watchersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    where?: CardWatcherWhereInput
    orderBy?: CardWatcherOrderByWithRelationInput | CardWatcherOrderByWithRelationInput[]
    cursor?: CardWatcherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardWatcherScalarFieldEnum | CardWatcherScalarFieldEnum[]
  }

  /**
   * Card.checklists
   */
  export type Card$checklistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
    where?: ChecklistWhereInput
    orderBy?: ChecklistOrderByWithRelationInput | ChecklistOrderByWithRelationInput[]
    cursor?: ChecklistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChecklistScalarFieldEnum | ChecklistScalarFieldEnum[]
  }

  /**
   * Card.comments
   */
  export type Card$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Card without action
   */
  export type CardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
  }


  /**
   * Model ChecklistItemAssignee
   */

  export type AggregateChecklistItemAssignee = {
    _count: ChecklistItemAssigneeCountAggregateOutputType | null
    _min: ChecklistItemAssigneeMinAggregateOutputType | null
    _max: ChecklistItemAssigneeMaxAggregateOutputType | null
  }

  export type ChecklistItemAssigneeMinAggregateOutputType = {
    itemId: string | null
    userId: string | null
  }

  export type ChecklistItemAssigneeMaxAggregateOutputType = {
    itemId: string | null
    userId: string | null
  }

  export type ChecklistItemAssigneeCountAggregateOutputType = {
    itemId: number
    userId: number
    _all: number
  }


  export type ChecklistItemAssigneeMinAggregateInputType = {
    itemId?: true
    userId?: true
  }

  export type ChecklistItemAssigneeMaxAggregateInputType = {
    itemId?: true
    userId?: true
  }

  export type ChecklistItemAssigneeCountAggregateInputType = {
    itemId?: true
    userId?: true
    _all?: true
  }

  export type ChecklistItemAssigneeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChecklistItemAssignee to aggregate.
     */
    where?: ChecklistItemAssigneeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistItemAssignees to fetch.
     */
    orderBy?: ChecklistItemAssigneeOrderByWithRelationInput | ChecklistItemAssigneeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChecklistItemAssigneeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistItemAssignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistItemAssignees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChecklistItemAssignees
    **/
    _count?: true | ChecklistItemAssigneeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChecklistItemAssigneeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChecklistItemAssigneeMaxAggregateInputType
  }

  export type GetChecklistItemAssigneeAggregateType<T extends ChecklistItemAssigneeAggregateArgs> = {
        [P in keyof T & keyof AggregateChecklistItemAssignee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChecklistItemAssignee[P]>
      : GetScalarType<T[P], AggregateChecklistItemAssignee[P]>
  }




  export type ChecklistItemAssigneeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChecklistItemAssigneeWhereInput
    orderBy?: ChecklistItemAssigneeOrderByWithAggregationInput | ChecklistItemAssigneeOrderByWithAggregationInput[]
    by: ChecklistItemAssigneeScalarFieldEnum[] | ChecklistItemAssigneeScalarFieldEnum
    having?: ChecklistItemAssigneeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChecklistItemAssigneeCountAggregateInputType | true
    _min?: ChecklistItemAssigneeMinAggregateInputType
    _max?: ChecklistItemAssigneeMaxAggregateInputType
  }

  export type ChecklistItemAssigneeGroupByOutputType = {
    itemId: string
    userId: string
    _count: ChecklistItemAssigneeCountAggregateOutputType | null
    _min: ChecklistItemAssigneeMinAggregateOutputType | null
    _max: ChecklistItemAssigneeMaxAggregateOutputType | null
  }

  type GetChecklistItemAssigneeGroupByPayload<T extends ChecklistItemAssigneeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChecklistItemAssigneeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChecklistItemAssigneeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChecklistItemAssigneeGroupByOutputType[P]>
            : GetScalarType<T[P], ChecklistItemAssigneeGroupByOutputType[P]>
        }
      >
    >


  export type ChecklistItemAssigneeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    itemId?: boolean
    userId?: boolean
    item?: boolean | ChecklistItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklistItemAssignee"]>

  export type ChecklistItemAssigneeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    itemId?: boolean
    userId?: boolean
    item?: boolean | ChecklistItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklistItemAssignee"]>

  export type ChecklistItemAssigneeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    itemId?: boolean
    userId?: boolean
    item?: boolean | ChecklistItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklistItemAssignee"]>

  export type ChecklistItemAssigneeSelectScalar = {
    itemId?: boolean
    userId?: boolean
  }

  export type ChecklistItemAssigneeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"itemId" | "userId", ExtArgs["result"]["checklistItemAssignee"]>
  export type ChecklistItemAssigneeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ChecklistItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChecklistItemAssigneeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ChecklistItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChecklistItemAssigneeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ChecklistItemDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChecklistItemAssigneePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChecklistItemAssignee"
    objects: {
      item: Prisma.$ChecklistItemPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      itemId: string
      userId: string
    }, ExtArgs["result"]["checklistItemAssignee"]>
    composites: {}
  }

  type ChecklistItemAssigneeGetPayload<S extends boolean | null | undefined | ChecklistItemAssigneeDefaultArgs> = $Result.GetResult<Prisma.$ChecklistItemAssigneePayload, S>

  type ChecklistItemAssigneeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChecklistItemAssigneeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChecklistItemAssigneeCountAggregateInputType | true
    }

  export interface ChecklistItemAssigneeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChecklistItemAssignee'], meta: { name: 'ChecklistItemAssignee' } }
    /**
     * Find zero or one ChecklistItemAssignee that matches the filter.
     * @param {ChecklistItemAssigneeFindUniqueArgs} args - Arguments to find a ChecklistItemAssignee
     * @example
     * // Get one ChecklistItemAssignee
     * const checklistItemAssignee = await prisma.checklistItemAssignee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChecklistItemAssigneeFindUniqueArgs>(args: SelectSubset<T, ChecklistItemAssigneeFindUniqueArgs<ExtArgs>>): Prisma__ChecklistItemAssigneeClient<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChecklistItemAssignee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChecklistItemAssigneeFindUniqueOrThrowArgs} args - Arguments to find a ChecklistItemAssignee
     * @example
     * // Get one ChecklistItemAssignee
     * const checklistItemAssignee = await prisma.checklistItemAssignee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChecklistItemAssigneeFindUniqueOrThrowArgs>(args: SelectSubset<T, ChecklistItemAssigneeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChecklistItemAssigneeClient<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChecklistItemAssignee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemAssigneeFindFirstArgs} args - Arguments to find a ChecklistItemAssignee
     * @example
     * // Get one ChecklistItemAssignee
     * const checklistItemAssignee = await prisma.checklistItemAssignee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChecklistItemAssigneeFindFirstArgs>(args?: SelectSubset<T, ChecklistItemAssigneeFindFirstArgs<ExtArgs>>): Prisma__ChecklistItemAssigneeClient<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChecklistItemAssignee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemAssigneeFindFirstOrThrowArgs} args - Arguments to find a ChecklistItemAssignee
     * @example
     * // Get one ChecklistItemAssignee
     * const checklistItemAssignee = await prisma.checklistItemAssignee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChecklistItemAssigneeFindFirstOrThrowArgs>(args?: SelectSubset<T, ChecklistItemAssigneeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChecklistItemAssigneeClient<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChecklistItemAssignees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemAssigneeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChecklistItemAssignees
     * const checklistItemAssignees = await prisma.checklistItemAssignee.findMany()
     * 
     * // Get first 10 ChecklistItemAssignees
     * const checklistItemAssignees = await prisma.checklistItemAssignee.findMany({ take: 10 })
     * 
     * // Only select the `itemId`
     * const checklistItemAssigneeWithItemIdOnly = await prisma.checklistItemAssignee.findMany({ select: { itemId: true } })
     * 
     */
    findMany<T extends ChecklistItemAssigneeFindManyArgs>(args?: SelectSubset<T, ChecklistItemAssigneeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChecklistItemAssignee.
     * @param {ChecklistItemAssigneeCreateArgs} args - Arguments to create a ChecklistItemAssignee.
     * @example
     * // Create one ChecklistItemAssignee
     * const ChecklistItemAssignee = await prisma.checklistItemAssignee.create({
     *   data: {
     *     // ... data to create a ChecklistItemAssignee
     *   }
     * })
     * 
     */
    create<T extends ChecklistItemAssigneeCreateArgs>(args: SelectSubset<T, ChecklistItemAssigneeCreateArgs<ExtArgs>>): Prisma__ChecklistItemAssigneeClient<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChecklistItemAssignees.
     * @param {ChecklistItemAssigneeCreateManyArgs} args - Arguments to create many ChecklistItemAssignees.
     * @example
     * // Create many ChecklistItemAssignees
     * const checklistItemAssignee = await prisma.checklistItemAssignee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChecklistItemAssigneeCreateManyArgs>(args?: SelectSubset<T, ChecklistItemAssigneeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChecklistItemAssignees and returns the data saved in the database.
     * @param {ChecklistItemAssigneeCreateManyAndReturnArgs} args - Arguments to create many ChecklistItemAssignees.
     * @example
     * // Create many ChecklistItemAssignees
     * const checklistItemAssignee = await prisma.checklistItemAssignee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChecklistItemAssignees and only return the `itemId`
     * const checklistItemAssigneeWithItemIdOnly = await prisma.checklistItemAssignee.createManyAndReturn({
     *   select: { itemId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChecklistItemAssigneeCreateManyAndReturnArgs>(args?: SelectSubset<T, ChecklistItemAssigneeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChecklistItemAssignee.
     * @param {ChecklistItemAssigneeDeleteArgs} args - Arguments to delete one ChecklistItemAssignee.
     * @example
     * // Delete one ChecklistItemAssignee
     * const ChecklistItemAssignee = await prisma.checklistItemAssignee.delete({
     *   where: {
     *     // ... filter to delete one ChecklistItemAssignee
     *   }
     * })
     * 
     */
    delete<T extends ChecklistItemAssigneeDeleteArgs>(args: SelectSubset<T, ChecklistItemAssigneeDeleteArgs<ExtArgs>>): Prisma__ChecklistItemAssigneeClient<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChecklistItemAssignee.
     * @param {ChecklistItemAssigneeUpdateArgs} args - Arguments to update one ChecklistItemAssignee.
     * @example
     * // Update one ChecklistItemAssignee
     * const checklistItemAssignee = await prisma.checklistItemAssignee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChecklistItemAssigneeUpdateArgs>(args: SelectSubset<T, ChecklistItemAssigneeUpdateArgs<ExtArgs>>): Prisma__ChecklistItemAssigneeClient<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChecklistItemAssignees.
     * @param {ChecklistItemAssigneeDeleteManyArgs} args - Arguments to filter ChecklistItemAssignees to delete.
     * @example
     * // Delete a few ChecklistItemAssignees
     * const { count } = await prisma.checklistItemAssignee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChecklistItemAssigneeDeleteManyArgs>(args?: SelectSubset<T, ChecklistItemAssigneeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChecklistItemAssignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemAssigneeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChecklistItemAssignees
     * const checklistItemAssignee = await prisma.checklistItemAssignee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChecklistItemAssigneeUpdateManyArgs>(args: SelectSubset<T, ChecklistItemAssigneeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChecklistItemAssignees and returns the data updated in the database.
     * @param {ChecklistItemAssigneeUpdateManyAndReturnArgs} args - Arguments to update many ChecklistItemAssignees.
     * @example
     * // Update many ChecklistItemAssignees
     * const checklistItemAssignee = await prisma.checklistItemAssignee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChecklistItemAssignees and only return the `itemId`
     * const checklistItemAssigneeWithItemIdOnly = await prisma.checklistItemAssignee.updateManyAndReturn({
     *   select: { itemId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChecklistItemAssigneeUpdateManyAndReturnArgs>(args: SelectSubset<T, ChecklistItemAssigneeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChecklistItemAssignee.
     * @param {ChecklistItemAssigneeUpsertArgs} args - Arguments to update or create a ChecklistItemAssignee.
     * @example
     * // Update or create a ChecklistItemAssignee
     * const checklistItemAssignee = await prisma.checklistItemAssignee.upsert({
     *   create: {
     *     // ... data to create a ChecklistItemAssignee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChecklistItemAssignee we want to update
     *   }
     * })
     */
    upsert<T extends ChecklistItemAssigneeUpsertArgs>(args: SelectSubset<T, ChecklistItemAssigneeUpsertArgs<ExtArgs>>): Prisma__ChecklistItemAssigneeClient<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChecklistItemAssignees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemAssigneeCountArgs} args - Arguments to filter ChecklistItemAssignees to count.
     * @example
     * // Count the number of ChecklistItemAssignees
     * const count = await prisma.checklistItemAssignee.count({
     *   where: {
     *     // ... the filter for the ChecklistItemAssignees we want to count
     *   }
     * })
    **/
    count<T extends ChecklistItemAssigneeCountArgs>(
      args?: Subset<T, ChecklistItemAssigneeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChecklistItemAssigneeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChecklistItemAssignee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemAssigneeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChecklistItemAssigneeAggregateArgs>(args: Subset<T, ChecklistItemAssigneeAggregateArgs>): Prisma.PrismaPromise<GetChecklistItemAssigneeAggregateType<T>>

    /**
     * Group by ChecklistItemAssignee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemAssigneeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChecklistItemAssigneeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChecklistItemAssigneeGroupByArgs['orderBy'] }
        : { orderBy?: ChecklistItemAssigneeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChecklistItemAssigneeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChecklistItemAssigneeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChecklistItemAssignee model
   */
  readonly fields: ChecklistItemAssigneeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChecklistItemAssignee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChecklistItemAssigneeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends ChecklistItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChecklistItemDefaultArgs<ExtArgs>>): Prisma__ChecklistItemClient<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChecklistItemAssignee model
   */
  interface ChecklistItemAssigneeFieldRefs {
    readonly itemId: FieldRef<"ChecklistItemAssignee", 'String'>
    readonly userId: FieldRef<"ChecklistItemAssignee", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChecklistItemAssignee findUnique
   */
  export type ChecklistItemAssigneeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistItemAssignee to fetch.
     */
    where: ChecklistItemAssigneeWhereUniqueInput
  }

  /**
   * ChecklistItemAssignee findUniqueOrThrow
   */
  export type ChecklistItemAssigneeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistItemAssignee to fetch.
     */
    where: ChecklistItemAssigneeWhereUniqueInput
  }

  /**
   * ChecklistItemAssignee findFirst
   */
  export type ChecklistItemAssigneeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistItemAssignee to fetch.
     */
    where?: ChecklistItemAssigneeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistItemAssignees to fetch.
     */
    orderBy?: ChecklistItemAssigneeOrderByWithRelationInput | ChecklistItemAssigneeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChecklistItemAssignees.
     */
    cursor?: ChecklistItemAssigneeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistItemAssignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistItemAssignees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChecklistItemAssignees.
     */
    distinct?: ChecklistItemAssigneeScalarFieldEnum | ChecklistItemAssigneeScalarFieldEnum[]
  }

  /**
   * ChecklistItemAssignee findFirstOrThrow
   */
  export type ChecklistItemAssigneeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistItemAssignee to fetch.
     */
    where?: ChecklistItemAssigneeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistItemAssignees to fetch.
     */
    orderBy?: ChecklistItemAssigneeOrderByWithRelationInput | ChecklistItemAssigneeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChecklistItemAssignees.
     */
    cursor?: ChecklistItemAssigneeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistItemAssignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistItemAssignees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChecklistItemAssignees.
     */
    distinct?: ChecklistItemAssigneeScalarFieldEnum | ChecklistItemAssigneeScalarFieldEnum[]
  }

  /**
   * ChecklistItemAssignee findMany
   */
  export type ChecklistItemAssigneeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistItemAssignees to fetch.
     */
    where?: ChecklistItemAssigneeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistItemAssignees to fetch.
     */
    orderBy?: ChecklistItemAssigneeOrderByWithRelationInput | ChecklistItemAssigneeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChecklistItemAssignees.
     */
    cursor?: ChecklistItemAssigneeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistItemAssignees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistItemAssignees.
     */
    skip?: number
    distinct?: ChecklistItemAssigneeScalarFieldEnum | ChecklistItemAssigneeScalarFieldEnum[]
  }

  /**
   * ChecklistItemAssignee create
   */
  export type ChecklistItemAssigneeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    /**
     * The data needed to create a ChecklistItemAssignee.
     */
    data: XOR<ChecklistItemAssigneeCreateInput, ChecklistItemAssigneeUncheckedCreateInput>
  }

  /**
   * ChecklistItemAssignee createMany
   */
  export type ChecklistItemAssigneeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChecklistItemAssignees.
     */
    data: ChecklistItemAssigneeCreateManyInput | ChecklistItemAssigneeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChecklistItemAssignee createManyAndReturn
   */
  export type ChecklistItemAssigneeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * The data used to create many ChecklistItemAssignees.
     */
    data: ChecklistItemAssigneeCreateManyInput | ChecklistItemAssigneeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChecklistItemAssignee update
   */
  export type ChecklistItemAssigneeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    /**
     * The data needed to update a ChecklistItemAssignee.
     */
    data: XOR<ChecklistItemAssigneeUpdateInput, ChecklistItemAssigneeUncheckedUpdateInput>
    /**
     * Choose, which ChecklistItemAssignee to update.
     */
    where: ChecklistItemAssigneeWhereUniqueInput
  }

  /**
   * ChecklistItemAssignee updateMany
   */
  export type ChecklistItemAssigneeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChecklistItemAssignees.
     */
    data: XOR<ChecklistItemAssigneeUpdateManyMutationInput, ChecklistItemAssigneeUncheckedUpdateManyInput>
    /**
     * Filter which ChecklistItemAssignees to update
     */
    where?: ChecklistItemAssigneeWhereInput
    /**
     * Limit how many ChecklistItemAssignees to update.
     */
    limit?: number
  }

  /**
   * ChecklistItemAssignee updateManyAndReturn
   */
  export type ChecklistItemAssigneeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * The data used to update ChecklistItemAssignees.
     */
    data: XOR<ChecklistItemAssigneeUpdateManyMutationInput, ChecklistItemAssigneeUncheckedUpdateManyInput>
    /**
     * Filter which ChecklistItemAssignees to update
     */
    where?: ChecklistItemAssigneeWhereInput
    /**
     * Limit how many ChecklistItemAssignees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChecklistItemAssignee upsert
   */
  export type ChecklistItemAssigneeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    /**
     * The filter to search for the ChecklistItemAssignee to update in case it exists.
     */
    where: ChecklistItemAssigneeWhereUniqueInput
    /**
     * In case the ChecklistItemAssignee found by the `where` argument doesn't exist, create a new ChecklistItemAssignee with this data.
     */
    create: XOR<ChecklistItemAssigneeCreateInput, ChecklistItemAssigneeUncheckedCreateInput>
    /**
     * In case the ChecklistItemAssignee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChecklistItemAssigneeUpdateInput, ChecklistItemAssigneeUncheckedUpdateInput>
  }

  /**
   * ChecklistItemAssignee delete
   */
  export type ChecklistItemAssigneeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    /**
     * Filter which ChecklistItemAssignee to delete.
     */
    where: ChecklistItemAssigneeWhereUniqueInput
  }

  /**
   * ChecklistItemAssignee deleteMany
   */
  export type ChecklistItemAssigneeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChecklistItemAssignees to delete
     */
    where?: ChecklistItemAssigneeWhereInput
    /**
     * Limit how many ChecklistItemAssignees to delete.
     */
    limit?: number
  }

  /**
   * ChecklistItemAssignee without action
   */
  export type ChecklistItemAssigneeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
  }


  /**
   * Model ChecklistItem
   */

  export type AggregateChecklistItem = {
    _count: ChecklistItemCountAggregateOutputType | null
    _avg: ChecklistItemAvgAggregateOutputType | null
    _sum: ChecklistItemSumAggregateOutputType | null
    _min: ChecklistItemMinAggregateOutputType | null
    _max: ChecklistItemMaxAggregateOutputType | null
  }

  export type ChecklistItemAvgAggregateOutputType = {
    position: Decimal | null
  }

  export type ChecklistItemSumAggregateOutputType = {
    position: Decimal | null
  }

  export type ChecklistItemMinAggregateOutputType = {
    id: string | null
    checklistId: string | null
    text: string | null
    isCompleted: boolean | null
    dueDate: Date | null
    position: Decimal | null
  }

  export type ChecklistItemMaxAggregateOutputType = {
    id: string | null
    checklistId: string | null
    text: string | null
    isCompleted: boolean | null
    dueDate: Date | null
    position: Decimal | null
  }

  export type ChecklistItemCountAggregateOutputType = {
    id: number
    checklistId: number
    text: number
    isCompleted: number
    dueDate: number
    position: number
    _all: number
  }


  export type ChecklistItemAvgAggregateInputType = {
    position?: true
  }

  export type ChecklistItemSumAggregateInputType = {
    position?: true
  }

  export type ChecklistItemMinAggregateInputType = {
    id?: true
    checklistId?: true
    text?: true
    isCompleted?: true
    dueDate?: true
    position?: true
  }

  export type ChecklistItemMaxAggregateInputType = {
    id?: true
    checklistId?: true
    text?: true
    isCompleted?: true
    dueDate?: true
    position?: true
  }

  export type ChecklistItemCountAggregateInputType = {
    id?: true
    checklistId?: true
    text?: true
    isCompleted?: true
    dueDate?: true
    position?: true
    _all?: true
  }

  export type ChecklistItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChecklistItem to aggregate.
     */
    where?: ChecklistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistItems to fetch.
     */
    orderBy?: ChecklistItemOrderByWithRelationInput | ChecklistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChecklistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChecklistItems
    **/
    _count?: true | ChecklistItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChecklistItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChecklistItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChecklistItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChecklistItemMaxAggregateInputType
  }

  export type GetChecklistItemAggregateType<T extends ChecklistItemAggregateArgs> = {
        [P in keyof T & keyof AggregateChecklistItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChecklistItem[P]>
      : GetScalarType<T[P], AggregateChecklistItem[P]>
  }




  export type ChecklistItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChecklistItemWhereInput
    orderBy?: ChecklistItemOrderByWithAggregationInput | ChecklistItemOrderByWithAggregationInput[]
    by: ChecklistItemScalarFieldEnum[] | ChecklistItemScalarFieldEnum
    having?: ChecklistItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChecklistItemCountAggregateInputType | true
    _avg?: ChecklistItemAvgAggregateInputType
    _sum?: ChecklistItemSumAggregateInputType
    _min?: ChecklistItemMinAggregateInputType
    _max?: ChecklistItemMaxAggregateInputType
  }

  export type ChecklistItemGroupByOutputType = {
    id: string
    checklistId: string
    text: string
    isCompleted: boolean
    dueDate: Date | null
    position: Decimal
    _count: ChecklistItemCountAggregateOutputType | null
    _avg: ChecklistItemAvgAggregateOutputType | null
    _sum: ChecklistItemSumAggregateOutputType | null
    _min: ChecklistItemMinAggregateOutputType | null
    _max: ChecklistItemMaxAggregateOutputType | null
  }

  type GetChecklistItemGroupByPayload<T extends ChecklistItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChecklistItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChecklistItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChecklistItemGroupByOutputType[P]>
            : GetScalarType<T[P], ChecklistItemGroupByOutputType[P]>
        }
      >
    >


  export type ChecklistItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checklistId?: boolean
    text?: boolean
    isCompleted?: boolean
    dueDate?: boolean
    position?: boolean
    assignees?: boolean | ChecklistItem$assigneesArgs<ExtArgs>
    checklist?: boolean | ChecklistDefaultArgs<ExtArgs>
    _count?: boolean | ChecklistItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklistItem"]>

  export type ChecklistItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checklistId?: boolean
    text?: boolean
    isCompleted?: boolean
    dueDate?: boolean
    position?: boolean
    checklist?: boolean | ChecklistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklistItem"]>

  export type ChecklistItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checklistId?: boolean
    text?: boolean
    isCompleted?: boolean
    dueDate?: boolean
    position?: boolean
    checklist?: boolean | ChecklistDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklistItem"]>

  export type ChecklistItemSelectScalar = {
    id?: boolean
    checklistId?: boolean
    text?: boolean
    isCompleted?: boolean
    dueDate?: boolean
    position?: boolean
  }

  export type ChecklistItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "checklistId" | "text" | "isCompleted" | "dueDate" | "position", ExtArgs["result"]["checklistItem"]>
  export type ChecklistItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignees?: boolean | ChecklistItem$assigneesArgs<ExtArgs>
    checklist?: boolean | ChecklistDefaultArgs<ExtArgs>
    _count?: boolean | ChecklistItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChecklistItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checklist?: boolean | ChecklistDefaultArgs<ExtArgs>
  }
  export type ChecklistItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checklist?: boolean | ChecklistDefaultArgs<ExtArgs>
  }

  export type $ChecklistItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChecklistItem"
    objects: {
      assignees: Prisma.$ChecklistItemAssigneePayload<ExtArgs>[]
      checklist: Prisma.$ChecklistPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      checklistId: string
      text: string
      isCompleted: boolean
      dueDate: Date | null
      position: Prisma.Decimal
    }, ExtArgs["result"]["checklistItem"]>
    composites: {}
  }

  type ChecklistItemGetPayload<S extends boolean | null | undefined | ChecklistItemDefaultArgs> = $Result.GetResult<Prisma.$ChecklistItemPayload, S>

  type ChecklistItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChecklistItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChecklistItemCountAggregateInputType | true
    }

  export interface ChecklistItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChecklistItem'], meta: { name: 'ChecklistItem' } }
    /**
     * Find zero or one ChecklistItem that matches the filter.
     * @param {ChecklistItemFindUniqueArgs} args - Arguments to find a ChecklistItem
     * @example
     * // Get one ChecklistItem
     * const checklistItem = await prisma.checklistItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChecklistItemFindUniqueArgs>(args: SelectSubset<T, ChecklistItemFindUniqueArgs<ExtArgs>>): Prisma__ChecklistItemClient<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChecklistItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChecklistItemFindUniqueOrThrowArgs} args - Arguments to find a ChecklistItem
     * @example
     * // Get one ChecklistItem
     * const checklistItem = await prisma.checklistItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChecklistItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ChecklistItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChecklistItemClient<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChecklistItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemFindFirstArgs} args - Arguments to find a ChecklistItem
     * @example
     * // Get one ChecklistItem
     * const checklistItem = await prisma.checklistItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChecklistItemFindFirstArgs>(args?: SelectSubset<T, ChecklistItemFindFirstArgs<ExtArgs>>): Prisma__ChecklistItemClient<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChecklistItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemFindFirstOrThrowArgs} args - Arguments to find a ChecklistItem
     * @example
     * // Get one ChecklistItem
     * const checklistItem = await prisma.checklistItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChecklistItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ChecklistItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChecklistItemClient<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChecklistItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChecklistItems
     * const checklistItems = await prisma.checklistItem.findMany()
     * 
     * // Get first 10 ChecklistItems
     * const checklistItems = await prisma.checklistItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const checklistItemWithIdOnly = await prisma.checklistItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChecklistItemFindManyArgs>(args?: SelectSubset<T, ChecklistItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChecklistItem.
     * @param {ChecklistItemCreateArgs} args - Arguments to create a ChecklistItem.
     * @example
     * // Create one ChecklistItem
     * const ChecklistItem = await prisma.checklistItem.create({
     *   data: {
     *     // ... data to create a ChecklistItem
     *   }
     * })
     * 
     */
    create<T extends ChecklistItemCreateArgs>(args: SelectSubset<T, ChecklistItemCreateArgs<ExtArgs>>): Prisma__ChecklistItemClient<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChecklistItems.
     * @param {ChecklistItemCreateManyArgs} args - Arguments to create many ChecklistItems.
     * @example
     * // Create many ChecklistItems
     * const checklistItem = await prisma.checklistItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChecklistItemCreateManyArgs>(args?: SelectSubset<T, ChecklistItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChecklistItems and returns the data saved in the database.
     * @param {ChecklistItemCreateManyAndReturnArgs} args - Arguments to create many ChecklistItems.
     * @example
     * // Create many ChecklistItems
     * const checklistItem = await prisma.checklistItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChecklistItems and only return the `id`
     * const checklistItemWithIdOnly = await prisma.checklistItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChecklistItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ChecklistItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChecklistItem.
     * @param {ChecklistItemDeleteArgs} args - Arguments to delete one ChecklistItem.
     * @example
     * // Delete one ChecklistItem
     * const ChecklistItem = await prisma.checklistItem.delete({
     *   where: {
     *     // ... filter to delete one ChecklistItem
     *   }
     * })
     * 
     */
    delete<T extends ChecklistItemDeleteArgs>(args: SelectSubset<T, ChecklistItemDeleteArgs<ExtArgs>>): Prisma__ChecklistItemClient<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChecklistItem.
     * @param {ChecklistItemUpdateArgs} args - Arguments to update one ChecklistItem.
     * @example
     * // Update one ChecklistItem
     * const checklistItem = await prisma.checklistItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChecklistItemUpdateArgs>(args: SelectSubset<T, ChecklistItemUpdateArgs<ExtArgs>>): Prisma__ChecklistItemClient<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChecklistItems.
     * @param {ChecklistItemDeleteManyArgs} args - Arguments to filter ChecklistItems to delete.
     * @example
     * // Delete a few ChecklistItems
     * const { count } = await prisma.checklistItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChecklistItemDeleteManyArgs>(args?: SelectSubset<T, ChecklistItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChecklistItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChecklistItems
     * const checklistItem = await prisma.checklistItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChecklistItemUpdateManyArgs>(args: SelectSubset<T, ChecklistItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChecklistItems and returns the data updated in the database.
     * @param {ChecklistItemUpdateManyAndReturnArgs} args - Arguments to update many ChecklistItems.
     * @example
     * // Update many ChecklistItems
     * const checklistItem = await prisma.checklistItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChecklistItems and only return the `id`
     * const checklistItemWithIdOnly = await prisma.checklistItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChecklistItemUpdateManyAndReturnArgs>(args: SelectSubset<T, ChecklistItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChecklistItem.
     * @param {ChecklistItemUpsertArgs} args - Arguments to update or create a ChecklistItem.
     * @example
     * // Update or create a ChecklistItem
     * const checklistItem = await prisma.checklistItem.upsert({
     *   create: {
     *     // ... data to create a ChecklistItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChecklistItem we want to update
     *   }
     * })
     */
    upsert<T extends ChecklistItemUpsertArgs>(args: SelectSubset<T, ChecklistItemUpsertArgs<ExtArgs>>): Prisma__ChecklistItemClient<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChecklistItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemCountArgs} args - Arguments to filter ChecklistItems to count.
     * @example
     * // Count the number of ChecklistItems
     * const count = await prisma.checklistItem.count({
     *   where: {
     *     // ... the filter for the ChecklistItems we want to count
     *   }
     * })
    **/
    count<T extends ChecklistItemCountArgs>(
      args?: Subset<T, ChecklistItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChecklistItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChecklistItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChecklistItemAggregateArgs>(args: Subset<T, ChecklistItemAggregateArgs>): Prisma.PrismaPromise<GetChecklistItemAggregateType<T>>

    /**
     * Group by ChecklistItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChecklistItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChecklistItemGroupByArgs['orderBy'] }
        : { orderBy?: ChecklistItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChecklistItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChecklistItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChecklistItem model
   */
  readonly fields: ChecklistItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChecklistItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChecklistItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignees<T extends ChecklistItem$assigneesArgs<ExtArgs> = {}>(args?: Subset<T, ChecklistItem$assigneesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    checklist<T extends ChecklistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChecklistDefaultArgs<ExtArgs>>): Prisma__ChecklistClient<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChecklistItem model
   */
  interface ChecklistItemFieldRefs {
    readonly id: FieldRef<"ChecklistItem", 'String'>
    readonly checklistId: FieldRef<"ChecklistItem", 'String'>
    readonly text: FieldRef<"ChecklistItem", 'String'>
    readonly isCompleted: FieldRef<"ChecklistItem", 'Boolean'>
    readonly dueDate: FieldRef<"ChecklistItem", 'DateTime'>
    readonly position: FieldRef<"ChecklistItem", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * ChecklistItem findUnique
   */
  export type ChecklistItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistItem to fetch.
     */
    where: ChecklistItemWhereUniqueInput
  }

  /**
   * ChecklistItem findUniqueOrThrow
   */
  export type ChecklistItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistItem to fetch.
     */
    where: ChecklistItemWhereUniqueInput
  }

  /**
   * ChecklistItem findFirst
   */
  export type ChecklistItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistItem to fetch.
     */
    where?: ChecklistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistItems to fetch.
     */
    orderBy?: ChecklistItemOrderByWithRelationInput | ChecklistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChecklistItems.
     */
    cursor?: ChecklistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChecklistItems.
     */
    distinct?: ChecklistItemScalarFieldEnum | ChecklistItemScalarFieldEnum[]
  }

  /**
   * ChecklistItem findFirstOrThrow
   */
  export type ChecklistItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistItem to fetch.
     */
    where?: ChecklistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistItems to fetch.
     */
    orderBy?: ChecklistItemOrderByWithRelationInput | ChecklistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChecklistItems.
     */
    cursor?: ChecklistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChecklistItems.
     */
    distinct?: ChecklistItemScalarFieldEnum | ChecklistItemScalarFieldEnum[]
  }

  /**
   * ChecklistItem findMany
   */
  export type ChecklistItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
    /**
     * Filter, which ChecklistItems to fetch.
     */
    where?: ChecklistItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChecklistItems to fetch.
     */
    orderBy?: ChecklistItemOrderByWithRelationInput | ChecklistItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChecklistItems.
     */
    cursor?: ChecklistItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChecklistItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChecklistItems.
     */
    skip?: number
    distinct?: ChecklistItemScalarFieldEnum | ChecklistItemScalarFieldEnum[]
  }

  /**
   * ChecklistItem create
   */
  export type ChecklistItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ChecklistItem.
     */
    data: XOR<ChecklistItemCreateInput, ChecklistItemUncheckedCreateInput>
  }

  /**
   * ChecklistItem createMany
   */
  export type ChecklistItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChecklistItems.
     */
    data: ChecklistItemCreateManyInput | ChecklistItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChecklistItem createManyAndReturn
   */
  export type ChecklistItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * The data used to create many ChecklistItems.
     */
    data: ChecklistItemCreateManyInput | ChecklistItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChecklistItem update
   */
  export type ChecklistItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ChecklistItem.
     */
    data: XOR<ChecklistItemUpdateInput, ChecklistItemUncheckedUpdateInput>
    /**
     * Choose, which ChecklistItem to update.
     */
    where: ChecklistItemWhereUniqueInput
  }

  /**
   * ChecklistItem updateMany
   */
  export type ChecklistItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChecklistItems.
     */
    data: XOR<ChecklistItemUpdateManyMutationInput, ChecklistItemUncheckedUpdateManyInput>
    /**
     * Filter which ChecklistItems to update
     */
    where?: ChecklistItemWhereInput
    /**
     * Limit how many ChecklistItems to update.
     */
    limit?: number
  }

  /**
   * ChecklistItem updateManyAndReturn
   */
  export type ChecklistItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * The data used to update ChecklistItems.
     */
    data: XOR<ChecklistItemUpdateManyMutationInput, ChecklistItemUncheckedUpdateManyInput>
    /**
     * Filter which ChecklistItems to update
     */
    where?: ChecklistItemWhereInput
    /**
     * Limit how many ChecklistItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChecklistItem upsert
   */
  export type ChecklistItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ChecklistItem to update in case it exists.
     */
    where: ChecklistItemWhereUniqueInput
    /**
     * In case the ChecklistItem found by the `where` argument doesn't exist, create a new ChecklistItem with this data.
     */
    create: XOR<ChecklistItemCreateInput, ChecklistItemUncheckedCreateInput>
    /**
     * In case the ChecklistItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChecklistItemUpdateInput, ChecklistItemUncheckedUpdateInput>
  }

  /**
   * ChecklistItem delete
   */
  export type ChecklistItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
    /**
     * Filter which ChecklistItem to delete.
     */
    where: ChecklistItemWhereUniqueInput
  }

  /**
   * ChecklistItem deleteMany
   */
  export type ChecklistItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChecklistItems to delete
     */
    where?: ChecklistItemWhereInput
    /**
     * Limit how many ChecklistItems to delete.
     */
    limit?: number
  }

  /**
   * ChecklistItem.assignees
   */
  export type ChecklistItem$assigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    where?: ChecklistItemAssigneeWhereInput
    orderBy?: ChecklistItemAssigneeOrderByWithRelationInput | ChecklistItemAssigneeOrderByWithRelationInput[]
    cursor?: ChecklistItemAssigneeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChecklistItemAssigneeScalarFieldEnum | ChecklistItemAssigneeScalarFieldEnum[]
  }

  /**
   * ChecklistItem without action
   */
  export type ChecklistItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
  }


  /**
   * Model Checklist
   */

  export type AggregateChecklist = {
    _count: ChecklistCountAggregateOutputType | null
    _avg: ChecklistAvgAggregateOutputType | null
    _sum: ChecklistSumAggregateOutputType | null
    _min: ChecklistMinAggregateOutputType | null
    _max: ChecklistMaxAggregateOutputType | null
  }

  export type ChecklistAvgAggregateOutputType = {
    position: Decimal | null
  }

  export type ChecklistSumAggregateOutputType = {
    position: Decimal | null
  }

  export type ChecklistMinAggregateOutputType = {
    id: string | null
    cardId: string | null
    title: string | null
    position: Decimal | null
  }

  export type ChecklistMaxAggregateOutputType = {
    id: string | null
    cardId: string | null
    title: string | null
    position: Decimal | null
  }

  export type ChecklistCountAggregateOutputType = {
    id: number
    cardId: number
    title: number
    position: number
    _all: number
  }


  export type ChecklistAvgAggregateInputType = {
    position?: true
  }

  export type ChecklistSumAggregateInputType = {
    position?: true
  }

  export type ChecklistMinAggregateInputType = {
    id?: true
    cardId?: true
    title?: true
    position?: true
  }

  export type ChecklistMaxAggregateInputType = {
    id?: true
    cardId?: true
    title?: true
    position?: true
  }

  export type ChecklistCountAggregateInputType = {
    id?: true
    cardId?: true
    title?: true
    position?: true
    _all?: true
  }

  export type ChecklistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Checklist to aggregate.
     */
    where?: ChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Checklists to fetch.
     */
    orderBy?: ChecklistOrderByWithRelationInput | ChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Checklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Checklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Checklists
    **/
    _count?: true | ChecklistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChecklistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChecklistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChecklistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChecklistMaxAggregateInputType
  }

  export type GetChecklistAggregateType<T extends ChecklistAggregateArgs> = {
        [P in keyof T & keyof AggregateChecklist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChecklist[P]>
      : GetScalarType<T[P], AggregateChecklist[P]>
  }




  export type ChecklistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChecklistWhereInput
    orderBy?: ChecklistOrderByWithAggregationInput | ChecklistOrderByWithAggregationInput[]
    by: ChecklistScalarFieldEnum[] | ChecklistScalarFieldEnum
    having?: ChecklistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChecklistCountAggregateInputType | true
    _avg?: ChecklistAvgAggregateInputType
    _sum?: ChecklistSumAggregateInputType
    _min?: ChecklistMinAggregateInputType
    _max?: ChecklistMaxAggregateInputType
  }

  export type ChecklistGroupByOutputType = {
    id: string
    cardId: string
    title: string
    position: Decimal
    _count: ChecklistCountAggregateOutputType | null
    _avg: ChecklistAvgAggregateOutputType | null
    _sum: ChecklistSumAggregateOutputType | null
    _min: ChecklistMinAggregateOutputType | null
    _max: ChecklistMaxAggregateOutputType | null
  }

  type GetChecklistGroupByPayload<T extends ChecklistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChecklistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChecklistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChecklistGroupByOutputType[P]>
            : GetScalarType<T[P], ChecklistGroupByOutputType[P]>
        }
      >
    >


  export type ChecklistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    title?: boolean
    position?: boolean
    items?: boolean | Checklist$itemsArgs<ExtArgs>
    card?: boolean | CardDefaultArgs<ExtArgs>
    _count?: boolean | ChecklistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklist"]>

  export type ChecklistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    title?: boolean
    position?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklist"]>

  export type ChecklistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    title?: boolean
    position?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["checklist"]>

  export type ChecklistSelectScalar = {
    id?: boolean
    cardId?: boolean
    title?: boolean
    position?: boolean
  }

  export type ChecklistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cardId" | "title" | "position", ExtArgs["result"]["checklist"]>
  export type ChecklistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | Checklist$itemsArgs<ExtArgs>
    card?: boolean | CardDefaultArgs<ExtArgs>
    _count?: boolean | ChecklistCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChecklistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
  }
  export type ChecklistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
  }

  export type $ChecklistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Checklist"
    objects: {
      items: Prisma.$ChecklistItemPayload<ExtArgs>[]
      card: Prisma.$CardPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cardId: string
      title: string
      position: Prisma.Decimal
    }, ExtArgs["result"]["checklist"]>
    composites: {}
  }

  type ChecklistGetPayload<S extends boolean | null | undefined | ChecklistDefaultArgs> = $Result.GetResult<Prisma.$ChecklistPayload, S>

  type ChecklistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChecklistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChecklistCountAggregateInputType | true
    }

  export interface ChecklistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Checklist'], meta: { name: 'Checklist' } }
    /**
     * Find zero or one Checklist that matches the filter.
     * @param {ChecklistFindUniqueArgs} args - Arguments to find a Checklist
     * @example
     * // Get one Checklist
     * const checklist = await prisma.checklist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChecklistFindUniqueArgs>(args: SelectSubset<T, ChecklistFindUniqueArgs<ExtArgs>>): Prisma__ChecklistClient<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Checklist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChecklistFindUniqueOrThrowArgs} args - Arguments to find a Checklist
     * @example
     * // Get one Checklist
     * const checklist = await prisma.checklist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChecklistFindUniqueOrThrowArgs>(args: SelectSubset<T, ChecklistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChecklistClient<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Checklist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistFindFirstArgs} args - Arguments to find a Checklist
     * @example
     * // Get one Checklist
     * const checklist = await prisma.checklist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChecklistFindFirstArgs>(args?: SelectSubset<T, ChecklistFindFirstArgs<ExtArgs>>): Prisma__ChecklistClient<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Checklist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistFindFirstOrThrowArgs} args - Arguments to find a Checklist
     * @example
     * // Get one Checklist
     * const checklist = await prisma.checklist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChecklistFindFirstOrThrowArgs>(args?: SelectSubset<T, ChecklistFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChecklistClient<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Checklists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Checklists
     * const checklists = await prisma.checklist.findMany()
     * 
     * // Get first 10 Checklists
     * const checklists = await prisma.checklist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const checklistWithIdOnly = await prisma.checklist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChecklistFindManyArgs>(args?: SelectSubset<T, ChecklistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Checklist.
     * @param {ChecklistCreateArgs} args - Arguments to create a Checklist.
     * @example
     * // Create one Checklist
     * const Checklist = await prisma.checklist.create({
     *   data: {
     *     // ... data to create a Checklist
     *   }
     * })
     * 
     */
    create<T extends ChecklistCreateArgs>(args: SelectSubset<T, ChecklistCreateArgs<ExtArgs>>): Prisma__ChecklistClient<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Checklists.
     * @param {ChecklistCreateManyArgs} args - Arguments to create many Checklists.
     * @example
     * // Create many Checklists
     * const checklist = await prisma.checklist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChecklistCreateManyArgs>(args?: SelectSubset<T, ChecklistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Checklists and returns the data saved in the database.
     * @param {ChecklistCreateManyAndReturnArgs} args - Arguments to create many Checklists.
     * @example
     * // Create many Checklists
     * const checklist = await prisma.checklist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Checklists and only return the `id`
     * const checklistWithIdOnly = await prisma.checklist.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChecklistCreateManyAndReturnArgs>(args?: SelectSubset<T, ChecklistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Checklist.
     * @param {ChecklistDeleteArgs} args - Arguments to delete one Checklist.
     * @example
     * // Delete one Checklist
     * const Checklist = await prisma.checklist.delete({
     *   where: {
     *     // ... filter to delete one Checklist
     *   }
     * })
     * 
     */
    delete<T extends ChecklistDeleteArgs>(args: SelectSubset<T, ChecklistDeleteArgs<ExtArgs>>): Prisma__ChecklistClient<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Checklist.
     * @param {ChecklistUpdateArgs} args - Arguments to update one Checklist.
     * @example
     * // Update one Checklist
     * const checklist = await prisma.checklist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChecklistUpdateArgs>(args: SelectSubset<T, ChecklistUpdateArgs<ExtArgs>>): Prisma__ChecklistClient<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Checklists.
     * @param {ChecklistDeleteManyArgs} args - Arguments to filter Checklists to delete.
     * @example
     * // Delete a few Checklists
     * const { count } = await prisma.checklist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChecklistDeleteManyArgs>(args?: SelectSubset<T, ChecklistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Checklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Checklists
     * const checklist = await prisma.checklist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChecklistUpdateManyArgs>(args: SelectSubset<T, ChecklistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Checklists and returns the data updated in the database.
     * @param {ChecklistUpdateManyAndReturnArgs} args - Arguments to update many Checklists.
     * @example
     * // Update many Checklists
     * const checklist = await prisma.checklist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Checklists and only return the `id`
     * const checklistWithIdOnly = await prisma.checklist.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChecklistUpdateManyAndReturnArgs>(args: SelectSubset<T, ChecklistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Checklist.
     * @param {ChecklistUpsertArgs} args - Arguments to update or create a Checklist.
     * @example
     * // Update or create a Checklist
     * const checklist = await prisma.checklist.upsert({
     *   create: {
     *     // ... data to create a Checklist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Checklist we want to update
     *   }
     * })
     */
    upsert<T extends ChecklistUpsertArgs>(args: SelectSubset<T, ChecklistUpsertArgs<ExtArgs>>): Prisma__ChecklistClient<$Result.GetResult<Prisma.$ChecklistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Checklists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistCountArgs} args - Arguments to filter Checklists to count.
     * @example
     * // Count the number of Checklists
     * const count = await prisma.checklist.count({
     *   where: {
     *     // ... the filter for the Checklists we want to count
     *   }
     * })
    **/
    count<T extends ChecklistCountArgs>(
      args?: Subset<T, ChecklistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChecklistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Checklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChecklistAggregateArgs>(args: Subset<T, ChecklistAggregateArgs>): Prisma.PrismaPromise<GetChecklistAggregateType<T>>

    /**
     * Group by Checklist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChecklistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChecklistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChecklistGroupByArgs['orderBy'] }
        : { orderBy?: ChecklistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChecklistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChecklistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Checklist model
   */
  readonly fields: ChecklistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Checklist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChecklistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends Checklist$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Checklist$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Checklist model
   */
  interface ChecklistFieldRefs {
    readonly id: FieldRef<"Checklist", 'String'>
    readonly cardId: FieldRef<"Checklist", 'String'>
    readonly title: FieldRef<"Checklist", 'String'>
    readonly position: FieldRef<"Checklist", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Checklist findUnique
   */
  export type ChecklistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
    /**
     * Filter, which Checklist to fetch.
     */
    where: ChecklistWhereUniqueInput
  }

  /**
   * Checklist findUniqueOrThrow
   */
  export type ChecklistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
    /**
     * Filter, which Checklist to fetch.
     */
    where: ChecklistWhereUniqueInput
  }

  /**
   * Checklist findFirst
   */
  export type ChecklistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
    /**
     * Filter, which Checklist to fetch.
     */
    where?: ChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Checklists to fetch.
     */
    orderBy?: ChecklistOrderByWithRelationInput | ChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Checklists.
     */
    cursor?: ChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Checklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Checklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Checklists.
     */
    distinct?: ChecklistScalarFieldEnum | ChecklistScalarFieldEnum[]
  }

  /**
   * Checklist findFirstOrThrow
   */
  export type ChecklistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
    /**
     * Filter, which Checklist to fetch.
     */
    where?: ChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Checklists to fetch.
     */
    orderBy?: ChecklistOrderByWithRelationInput | ChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Checklists.
     */
    cursor?: ChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Checklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Checklists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Checklists.
     */
    distinct?: ChecklistScalarFieldEnum | ChecklistScalarFieldEnum[]
  }

  /**
   * Checklist findMany
   */
  export type ChecklistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
    /**
     * Filter, which Checklists to fetch.
     */
    where?: ChecklistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Checklists to fetch.
     */
    orderBy?: ChecklistOrderByWithRelationInput | ChecklistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Checklists.
     */
    cursor?: ChecklistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Checklists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Checklists.
     */
    skip?: number
    distinct?: ChecklistScalarFieldEnum | ChecklistScalarFieldEnum[]
  }

  /**
   * Checklist create
   */
  export type ChecklistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
    /**
     * The data needed to create a Checklist.
     */
    data: XOR<ChecklistCreateInput, ChecklistUncheckedCreateInput>
  }

  /**
   * Checklist createMany
   */
  export type ChecklistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Checklists.
     */
    data: ChecklistCreateManyInput | ChecklistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Checklist createManyAndReturn
   */
  export type ChecklistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * The data used to create many Checklists.
     */
    data: ChecklistCreateManyInput | ChecklistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Checklist update
   */
  export type ChecklistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
    /**
     * The data needed to update a Checklist.
     */
    data: XOR<ChecklistUpdateInput, ChecklistUncheckedUpdateInput>
    /**
     * Choose, which Checklist to update.
     */
    where: ChecklistWhereUniqueInput
  }

  /**
   * Checklist updateMany
   */
  export type ChecklistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Checklists.
     */
    data: XOR<ChecklistUpdateManyMutationInput, ChecklistUncheckedUpdateManyInput>
    /**
     * Filter which Checklists to update
     */
    where?: ChecklistWhereInput
    /**
     * Limit how many Checklists to update.
     */
    limit?: number
  }

  /**
   * Checklist updateManyAndReturn
   */
  export type ChecklistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * The data used to update Checklists.
     */
    data: XOR<ChecklistUpdateManyMutationInput, ChecklistUncheckedUpdateManyInput>
    /**
     * Filter which Checklists to update
     */
    where?: ChecklistWhereInput
    /**
     * Limit how many Checklists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Checklist upsert
   */
  export type ChecklistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
    /**
     * The filter to search for the Checklist to update in case it exists.
     */
    where: ChecklistWhereUniqueInput
    /**
     * In case the Checklist found by the `where` argument doesn't exist, create a new Checklist with this data.
     */
    create: XOR<ChecklistCreateInput, ChecklistUncheckedCreateInput>
    /**
     * In case the Checklist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChecklistUpdateInput, ChecklistUncheckedUpdateInput>
  }

  /**
   * Checklist delete
   */
  export type ChecklistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
    /**
     * Filter which Checklist to delete.
     */
    where: ChecklistWhereUniqueInput
  }

  /**
   * Checklist deleteMany
   */
  export type ChecklistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Checklists to delete
     */
    where?: ChecklistWhereInput
    /**
     * Limit how many Checklists to delete.
     */
    limit?: number
  }

  /**
   * Checklist.items
   */
  export type Checklist$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItem
     */
    select?: ChecklistItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItem
     */
    omit?: ChecklistItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemInclude<ExtArgs> | null
    where?: ChecklistItemWhereInput
    orderBy?: ChecklistItemOrderByWithRelationInput | ChecklistItemOrderByWithRelationInput[]
    cursor?: ChecklistItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChecklistItemScalarFieldEnum | ChecklistItemScalarFieldEnum[]
  }

  /**
   * Checklist without action
   */
  export type ChecklistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Checklist
     */
    select?: ChecklistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Checklist
     */
    omit?: ChecklistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    cardId: string | null
    userId: string | null
    text: string | null
    createdAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    cardId: string | null
    userId: string | null
    text: string | null
    createdAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    cardId: number
    userId: number
    text: number
    createdAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    cardId?: true
    userId?: true
    text?: true
    createdAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    cardId?: true
    userId?: true
    text?: true
    createdAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    cardId?: true
    userId?: true
    text?: true
    createdAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    cardId: string
    userId: string
    text: string
    createdAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    userId?: boolean
    text?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    userId?: boolean
    text?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardId?: boolean
    userId?: boolean
    text?: boolean
    createdAt?: boolean
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    cardId?: boolean
    userId?: boolean
    text?: boolean
    createdAt?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cardId" | "userId" | "text" | "createdAt", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    card?: boolean | CardDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      card: Prisma.$CardPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cardId: string
      userId: string
      text: string
      createdAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    card<T extends CardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CardDefaultArgs<ExtArgs>>): Prisma__CardClient<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly cardId: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly text: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Label
   */

  export type AggregateLabel = {
    _count: LabelCountAggregateOutputType | null
    _min: LabelMinAggregateOutputType | null
    _max: LabelMaxAggregateOutputType | null
  }

  export type LabelMinAggregateOutputType = {
    id: string | null
    boardId: string | null
    name: string | null
    color: $Enums.Color | null
  }

  export type LabelMaxAggregateOutputType = {
    id: string | null
    boardId: string | null
    name: string | null
    color: $Enums.Color | null
  }

  export type LabelCountAggregateOutputType = {
    id: number
    boardId: number
    name: number
    color: number
    _all: number
  }


  export type LabelMinAggregateInputType = {
    id?: true
    boardId?: true
    name?: true
    color?: true
  }

  export type LabelMaxAggregateInputType = {
    id?: true
    boardId?: true
    name?: true
    color?: true
  }

  export type LabelCountAggregateInputType = {
    id?: true
    boardId?: true
    name?: true
    color?: true
    _all?: true
  }

  export type LabelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Label to aggregate.
     */
    where?: LabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labels to fetch.
     */
    orderBy?: LabelOrderByWithRelationInput | LabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Labels
    **/
    _count?: true | LabelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LabelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LabelMaxAggregateInputType
  }

  export type GetLabelAggregateType<T extends LabelAggregateArgs> = {
        [P in keyof T & keyof AggregateLabel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLabel[P]>
      : GetScalarType<T[P], AggregateLabel[P]>
  }




  export type LabelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LabelWhereInput
    orderBy?: LabelOrderByWithAggregationInput | LabelOrderByWithAggregationInput[]
    by: LabelScalarFieldEnum[] | LabelScalarFieldEnum
    having?: LabelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LabelCountAggregateInputType | true
    _min?: LabelMinAggregateInputType
    _max?: LabelMaxAggregateInputType
  }

  export type LabelGroupByOutputType = {
    id: string
    boardId: string
    name: string | null
    color: $Enums.Color
    _count: LabelCountAggregateOutputType | null
    _min: LabelMinAggregateOutputType | null
    _max: LabelMaxAggregateOutputType | null
  }

  type GetLabelGroupByPayload<T extends LabelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LabelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LabelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LabelGroupByOutputType[P]>
            : GetScalarType<T[P], LabelGroupByOutputType[P]>
        }
      >
    >


  export type LabelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    name?: boolean
    color?: boolean
    cardLabels?: boolean | Label$cardLabelsArgs<ExtArgs>
    board?: boolean | BoardDefaultArgs<ExtArgs>
    _count?: boolean | LabelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["label"]>

  export type LabelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    name?: boolean
    color?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["label"]>

  export type LabelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    name?: boolean
    color?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["label"]>

  export type LabelSelectScalar = {
    id?: boolean
    boardId?: boolean
    name?: boolean
    color?: boolean
  }

  export type LabelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "boardId" | "name" | "color", ExtArgs["result"]["label"]>
  export type LabelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cardLabels?: boolean | Label$cardLabelsArgs<ExtArgs>
    board?: boolean | BoardDefaultArgs<ExtArgs>
    _count?: boolean | LabelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LabelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
  }
  export type LabelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
  }

  export type $LabelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Label"
    objects: {
      cardLabels: Prisma.$CardLabelPayload<ExtArgs>[]
      board: Prisma.$BoardPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      boardId: string
      name: string | null
      color: $Enums.Color
    }, ExtArgs["result"]["label"]>
    composites: {}
  }

  type LabelGetPayload<S extends boolean | null | undefined | LabelDefaultArgs> = $Result.GetResult<Prisma.$LabelPayload, S>

  type LabelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LabelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LabelCountAggregateInputType | true
    }

  export interface LabelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Label'], meta: { name: 'Label' } }
    /**
     * Find zero or one Label that matches the filter.
     * @param {LabelFindUniqueArgs} args - Arguments to find a Label
     * @example
     * // Get one Label
     * const label = await prisma.label.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LabelFindUniqueArgs>(args: SelectSubset<T, LabelFindUniqueArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Label that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LabelFindUniqueOrThrowArgs} args - Arguments to find a Label
     * @example
     * // Get one Label
     * const label = await prisma.label.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LabelFindUniqueOrThrowArgs>(args: SelectSubset<T, LabelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Label that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelFindFirstArgs} args - Arguments to find a Label
     * @example
     * // Get one Label
     * const label = await prisma.label.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LabelFindFirstArgs>(args?: SelectSubset<T, LabelFindFirstArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Label that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelFindFirstOrThrowArgs} args - Arguments to find a Label
     * @example
     * // Get one Label
     * const label = await prisma.label.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LabelFindFirstOrThrowArgs>(args?: SelectSubset<T, LabelFindFirstOrThrowArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Labels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Labels
     * const labels = await prisma.label.findMany()
     * 
     * // Get first 10 Labels
     * const labels = await prisma.label.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const labelWithIdOnly = await prisma.label.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LabelFindManyArgs>(args?: SelectSubset<T, LabelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Label.
     * @param {LabelCreateArgs} args - Arguments to create a Label.
     * @example
     * // Create one Label
     * const Label = await prisma.label.create({
     *   data: {
     *     // ... data to create a Label
     *   }
     * })
     * 
     */
    create<T extends LabelCreateArgs>(args: SelectSubset<T, LabelCreateArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Labels.
     * @param {LabelCreateManyArgs} args - Arguments to create many Labels.
     * @example
     * // Create many Labels
     * const label = await prisma.label.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LabelCreateManyArgs>(args?: SelectSubset<T, LabelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Labels and returns the data saved in the database.
     * @param {LabelCreateManyAndReturnArgs} args - Arguments to create many Labels.
     * @example
     * // Create many Labels
     * const label = await prisma.label.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Labels and only return the `id`
     * const labelWithIdOnly = await prisma.label.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LabelCreateManyAndReturnArgs>(args?: SelectSubset<T, LabelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Label.
     * @param {LabelDeleteArgs} args - Arguments to delete one Label.
     * @example
     * // Delete one Label
     * const Label = await prisma.label.delete({
     *   where: {
     *     // ... filter to delete one Label
     *   }
     * })
     * 
     */
    delete<T extends LabelDeleteArgs>(args: SelectSubset<T, LabelDeleteArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Label.
     * @param {LabelUpdateArgs} args - Arguments to update one Label.
     * @example
     * // Update one Label
     * const label = await prisma.label.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LabelUpdateArgs>(args: SelectSubset<T, LabelUpdateArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Labels.
     * @param {LabelDeleteManyArgs} args - Arguments to filter Labels to delete.
     * @example
     * // Delete a few Labels
     * const { count } = await prisma.label.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LabelDeleteManyArgs>(args?: SelectSubset<T, LabelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Labels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Labels
     * const label = await prisma.label.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LabelUpdateManyArgs>(args: SelectSubset<T, LabelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Labels and returns the data updated in the database.
     * @param {LabelUpdateManyAndReturnArgs} args - Arguments to update many Labels.
     * @example
     * // Update many Labels
     * const label = await prisma.label.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Labels and only return the `id`
     * const labelWithIdOnly = await prisma.label.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LabelUpdateManyAndReturnArgs>(args: SelectSubset<T, LabelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Label.
     * @param {LabelUpsertArgs} args - Arguments to update or create a Label.
     * @example
     * // Update or create a Label
     * const label = await prisma.label.upsert({
     *   create: {
     *     // ... data to create a Label
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Label we want to update
     *   }
     * })
     */
    upsert<T extends LabelUpsertArgs>(args: SelectSubset<T, LabelUpsertArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Labels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelCountArgs} args - Arguments to filter Labels to count.
     * @example
     * // Count the number of Labels
     * const count = await prisma.label.count({
     *   where: {
     *     // ... the filter for the Labels we want to count
     *   }
     * })
    **/
    count<T extends LabelCountArgs>(
      args?: Subset<T, LabelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LabelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Label.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LabelAggregateArgs>(args: Subset<T, LabelAggregateArgs>): Prisma.PrismaPromise<GetLabelAggregateType<T>>

    /**
     * Group by Label.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LabelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LabelGroupByArgs['orderBy'] }
        : { orderBy?: LabelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LabelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLabelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Label model
   */
  readonly fields: LabelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Label.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LabelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cardLabels<T extends Label$cardLabelsArgs<ExtArgs> = {}>(args?: Subset<T, Label$cardLabelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardLabelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    board<T extends BoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoardDefaultArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Label model
   */
  interface LabelFieldRefs {
    readonly id: FieldRef<"Label", 'String'>
    readonly boardId: FieldRef<"Label", 'String'>
    readonly name: FieldRef<"Label", 'String'>
    readonly color: FieldRef<"Label", 'Color'>
  }
    

  // Custom InputTypes
  /**
   * Label findUnique
   */
  export type LabelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter, which Label to fetch.
     */
    where: LabelWhereUniqueInput
  }

  /**
   * Label findUniqueOrThrow
   */
  export type LabelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter, which Label to fetch.
     */
    where: LabelWhereUniqueInput
  }

  /**
   * Label findFirst
   */
  export type LabelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter, which Label to fetch.
     */
    where?: LabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labels to fetch.
     */
    orderBy?: LabelOrderByWithRelationInput | LabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Labels.
     */
    cursor?: LabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Labels.
     */
    distinct?: LabelScalarFieldEnum | LabelScalarFieldEnum[]
  }

  /**
   * Label findFirstOrThrow
   */
  export type LabelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter, which Label to fetch.
     */
    where?: LabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labels to fetch.
     */
    orderBy?: LabelOrderByWithRelationInput | LabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Labels.
     */
    cursor?: LabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Labels.
     */
    distinct?: LabelScalarFieldEnum | LabelScalarFieldEnum[]
  }

  /**
   * Label findMany
   */
  export type LabelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter, which Labels to fetch.
     */
    where?: LabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labels to fetch.
     */
    orderBy?: LabelOrderByWithRelationInput | LabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Labels.
     */
    cursor?: LabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labels.
     */
    skip?: number
    distinct?: LabelScalarFieldEnum | LabelScalarFieldEnum[]
  }

  /**
   * Label create
   */
  export type LabelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * The data needed to create a Label.
     */
    data: XOR<LabelCreateInput, LabelUncheckedCreateInput>
  }

  /**
   * Label createMany
   */
  export type LabelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Labels.
     */
    data: LabelCreateManyInput | LabelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Label createManyAndReturn
   */
  export type LabelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * The data used to create many Labels.
     */
    data: LabelCreateManyInput | LabelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Label update
   */
  export type LabelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * The data needed to update a Label.
     */
    data: XOR<LabelUpdateInput, LabelUncheckedUpdateInput>
    /**
     * Choose, which Label to update.
     */
    where: LabelWhereUniqueInput
  }

  /**
   * Label updateMany
   */
  export type LabelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Labels.
     */
    data: XOR<LabelUpdateManyMutationInput, LabelUncheckedUpdateManyInput>
    /**
     * Filter which Labels to update
     */
    where?: LabelWhereInput
    /**
     * Limit how many Labels to update.
     */
    limit?: number
  }

  /**
   * Label updateManyAndReturn
   */
  export type LabelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * The data used to update Labels.
     */
    data: XOR<LabelUpdateManyMutationInput, LabelUncheckedUpdateManyInput>
    /**
     * Filter which Labels to update
     */
    where?: LabelWhereInput
    /**
     * Limit how many Labels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Label upsert
   */
  export type LabelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * The filter to search for the Label to update in case it exists.
     */
    where: LabelWhereUniqueInput
    /**
     * In case the Label found by the `where` argument doesn't exist, create a new Label with this data.
     */
    create: XOR<LabelCreateInput, LabelUncheckedCreateInput>
    /**
     * In case the Label was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LabelUpdateInput, LabelUncheckedUpdateInput>
  }

  /**
   * Label delete
   */
  export type LabelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter which Label to delete.
     */
    where: LabelWhereUniqueInput
  }

  /**
   * Label deleteMany
   */
  export type LabelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Labels to delete
     */
    where?: LabelWhereInput
    /**
     * Limit how many Labels to delete.
     */
    limit?: number
  }

  /**
   * Label.cardLabels
   */
  export type Label$cardLabelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardLabel
     */
    select?: CardLabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardLabel
     */
    omit?: CardLabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardLabelInclude<ExtArgs> | null
    where?: CardLabelWhereInput
    orderBy?: CardLabelOrderByWithRelationInput | CardLabelOrderByWithRelationInput[]
    cursor?: CardLabelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardLabelScalarFieldEnum | CardLabelScalarFieldEnum[]
  }

  /**
   * Label without action
   */
  export type LabelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
  }


  /**
   * Model ListWatcher
   */

  export type AggregateListWatcher = {
    _count: ListWatcherCountAggregateOutputType | null
    _min: ListWatcherMinAggregateOutputType | null
    _max: ListWatcherMaxAggregateOutputType | null
  }

  export type ListWatcherMinAggregateOutputType = {
    listId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type ListWatcherMaxAggregateOutputType = {
    listId: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type ListWatcherCountAggregateOutputType = {
    listId: number
    userId: number
    createdAt: number
    _all: number
  }


  export type ListWatcherMinAggregateInputType = {
    listId?: true
    userId?: true
    createdAt?: true
  }

  export type ListWatcherMaxAggregateInputType = {
    listId?: true
    userId?: true
    createdAt?: true
  }

  export type ListWatcherCountAggregateInputType = {
    listId?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type ListWatcherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ListWatcher to aggregate.
     */
    where?: ListWatcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListWatchers to fetch.
     */
    orderBy?: ListWatcherOrderByWithRelationInput | ListWatcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ListWatcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListWatchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListWatchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ListWatchers
    **/
    _count?: true | ListWatcherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListWatcherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListWatcherMaxAggregateInputType
  }

  export type GetListWatcherAggregateType<T extends ListWatcherAggregateArgs> = {
        [P in keyof T & keyof AggregateListWatcher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateListWatcher[P]>
      : GetScalarType<T[P], AggregateListWatcher[P]>
  }




  export type ListWatcherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListWatcherWhereInput
    orderBy?: ListWatcherOrderByWithAggregationInput | ListWatcherOrderByWithAggregationInput[]
    by: ListWatcherScalarFieldEnum[] | ListWatcherScalarFieldEnum
    having?: ListWatcherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListWatcherCountAggregateInputType | true
    _min?: ListWatcherMinAggregateInputType
    _max?: ListWatcherMaxAggregateInputType
  }

  export type ListWatcherGroupByOutputType = {
    listId: string
    userId: string
    createdAt: Date
    _count: ListWatcherCountAggregateOutputType | null
    _min: ListWatcherMinAggregateOutputType | null
    _max: ListWatcherMaxAggregateOutputType | null
  }

  type GetListWatcherGroupByPayload<T extends ListWatcherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListWatcherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListWatcherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListWatcherGroupByOutputType[P]>
            : GetScalarType<T[P], ListWatcherGroupByOutputType[P]>
        }
      >
    >


  export type ListWatcherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    listId?: boolean
    userId?: boolean
    createdAt?: boolean
    list?: boolean | ListDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listWatcher"]>

  export type ListWatcherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    listId?: boolean
    userId?: boolean
    createdAt?: boolean
    list?: boolean | ListDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listWatcher"]>

  export type ListWatcherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    listId?: boolean
    userId?: boolean
    createdAt?: boolean
    list?: boolean | ListDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listWatcher"]>

  export type ListWatcherSelectScalar = {
    listId?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type ListWatcherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"listId" | "userId" | "createdAt", ExtArgs["result"]["listWatcher"]>
  export type ListWatcherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | ListDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ListWatcherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | ListDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ListWatcherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | ListDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ListWatcherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ListWatcher"
    objects: {
      list: Prisma.$ListPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      listId: string
      userId: string
      createdAt: Date
    }, ExtArgs["result"]["listWatcher"]>
    composites: {}
  }

  type ListWatcherGetPayload<S extends boolean | null | undefined | ListWatcherDefaultArgs> = $Result.GetResult<Prisma.$ListWatcherPayload, S>

  type ListWatcherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ListWatcherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ListWatcherCountAggregateInputType | true
    }

  export interface ListWatcherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ListWatcher'], meta: { name: 'ListWatcher' } }
    /**
     * Find zero or one ListWatcher that matches the filter.
     * @param {ListWatcherFindUniqueArgs} args - Arguments to find a ListWatcher
     * @example
     * // Get one ListWatcher
     * const listWatcher = await prisma.listWatcher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ListWatcherFindUniqueArgs>(args: SelectSubset<T, ListWatcherFindUniqueArgs<ExtArgs>>): Prisma__ListWatcherClient<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ListWatcher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ListWatcherFindUniqueOrThrowArgs} args - Arguments to find a ListWatcher
     * @example
     * // Get one ListWatcher
     * const listWatcher = await prisma.listWatcher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ListWatcherFindUniqueOrThrowArgs>(args: SelectSubset<T, ListWatcherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ListWatcherClient<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ListWatcher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListWatcherFindFirstArgs} args - Arguments to find a ListWatcher
     * @example
     * // Get one ListWatcher
     * const listWatcher = await prisma.listWatcher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ListWatcherFindFirstArgs>(args?: SelectSubset<T, ListWatcherFindFirstArgs<ExtArgs>>): Prisma__ListWatcherClient<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ListWatcher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListWatcherFindFirstOrThrowArgs} args - Arguments to find a ListWatcher
     * @example
     * // Get one ListWatcher
     * const listWatcher = await prisma.listWatcher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ListWatcherFindFirstOrThrowArgs>(args?: SelectSubset<T, ListWatcherFindFirstOrThrowArgs<ExtArgs>>): Prisma__ListWatcherClient<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ListWatchers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListWatcherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ListWatchers
     * const listWatchers = await prisma.listWatcher.findMany()
     * 
     * // Get first 10 ListWatchers
     * const listWatchers = await prisma.listWatcher.findMany({ take: 10 })
     * 
     * // Only select the `listId`
     * const listWatcherWithListIdOnly = await prisma.listWatcher.findMany({ select: { listId: true } })
     * 
     */
    findMany<T extends ListWatcherFindManyArgs>(args?: SelectSubset<T, ListWatcherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ListWatcher.
     * @param {ListWatcherCreateArgs} args - Arguments to create a ListWatcher.
     * @example
     * // Create one ListWatcher
     * const ListWatcher = await prisma.listWatcher.create({
     *   data: {
     *     // ... data to create a ListWatcher
     *   }
     * })
     * 
     */
    create<T extends ListWatcherCreateArgs>(args: SelectSubset<T, ListWatcherCreateArgs<ExtArgs>>): Prisma__ListWatcherClient<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ListWatchers.
     * @param {ListWatcherCreateManyArgs} args - Arguments to create many ListWatchers.
     * @example
     * // Create many ListWatchers
     * const listWatcher = await prisma.listWatcher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ListWatcherCreateManyArgs>(args?: SelectSubset<T, ListWatcherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ListWatchers and returns the data saved in the database.
     * @param {ListWatcherCreateManyAndReturnArgs} args - Arguments to create many ListWatchers.
     * @example
     * // Create many ListWatchers
     * const listWatcher = await prisma.listWatcher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ListWatchers and only return the `listId`
     * const listWatcherWithListIdOnly = await prisma.listWatcher.createManyAndReturn({
     *   select: { listId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ListWatcherCreateManyAndReturnArgs>(args?: SelectSubset<T, ListWatcherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ListWatcher.
     * @param {ListWatcherDeleteArgs} args - Arguments to delete one ListWatcher.
     * @example
     * // Delete one ListWatcher
     * const ListWatcher = await prisma.listWatcher.delete({
     *   where: {
     *     // ... filter to delete one ListWatcher
     *   }
     * })
     * 
     */
    delete<T extends ListWatcherDeleteArgs>(args: SelectSubset<T, ListWatcherDeleteArgs<ExtArgs>>): Prisma__ListWatcherClient<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ListWatcher.
     * @param {ListWatcherUpdateArgs} args - Arguments to update one ListWatcher.
     * @example
     * // Update one ListWatcher
     * const listWatcher = await prisma.listWatcher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ListWatcherUpdateArgs>(args: SelectSubset<T, ListWatcherUpdateArgs<ExtArgs>>): Prisma__ListWatcherClient<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ListWatchers.
     * @param {ListWatcherDeleteManyArgs} args - Arguments to filter ListWatchers to delete.
     * @example
     * // Delete a few ListWatchers
     * const { count } = await prisma.listWatcher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ListWatcherDeleteManyArgs>(args?: SelectSubset<T, ListWatcherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ListWatchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListWatcherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ListWatchers
     * const listWatcher = await prisma.listWatcher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ListWatcherUpdateManyArgs>(args: SelectSubset<T, ListWatcherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ListWatchers and returns the data updated in the database.
     * @param {ListWatcherUpdateManyAndReturnArgs} args - Arguments to update many ListWatchers.
     * @example
     * // Update many ListWatchers
     * const listWatcher = await prisma.listWatcher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ListWatchers and only return the `listId`
     * const listWatcherWithListIdOnly = await prisma.listWatcher.updateManyAndReturn({
     *   select: { listId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ListWatcherUpdateManyAndReturnArgs>(args: SelectSubset<T, ListWatcherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ListWatcher.
     * @param {ListWatcherUpsertArgs} args - Arguments to update or create a ListWatcher.
     * @example
     * // Update or create a ListWatcher
     * const listWatcher = await prisma.listWatcher.upsert({
     *   create: {
     *     // ... data to create a ListWatcher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ListWatcher we want to update
     *   }
     * })
     */
    upsert<T extends ListWatcherUpsertArgs>(args: SelectSubset<T, ListWatcherUpsertArgs<ExtArgs>>): Prisma__ListWatcherClient<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ListWatchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListWatcherCountArgs} args - Arguments to filter ListWatchers to count.
     * @example
     * // Count the number of ListWatchers
     * const count = await prisma.listWatcher.count({
     *   where: {
     *     // ... the filter for the ListWatchers we want to count
     *   }
     * })
    **/
    count<T extends ListWatcherCountArgs>(
      args?: Subset<T, ListWatcherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListWatcherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ListWatcher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListWatcherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListWatcherAggregateArgs>(args: Subset<T, ListWatcherAggregateArgs>): Prisma.PrismaPromise<GetListWatcherAggregateType<T>>

    /**
     * Group by ListWatcher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListWatcherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListWatcherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListWatcherGroupByArgs['orderBy'] }
        : { orderBy?: ListWatcherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListWatcherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListWatcherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ListWatcher model
   */
  readonly fields: ListWatcherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ListWatcher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ListWatcherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    list<T extends ListDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ListDefaultArgs<ExtArgs>>): Prisma__ListClient<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ListWatcher model
   */
  interface ListWatcherFieldRefs {
    readonly listId: FieldRef<"ListWatcher", 'String'>
    readonly userId: FieldRef<"ListWatcher", 'String'>
    readonly createdAt: FieldRef<"ListWatcher", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ListWatcher findUnique
   */
  export type ListWatcherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    /**
     * Filter, which ListWatcher to fetch.
     */
    where: ListWatcherWhereUniqueInput
  }

  /**
   * ListWatcher findUniqueOrThrow
   */
  export type ListWatcherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    /**
     * Filter, which ListWatcher to fetch.
     */
    where: ListWatcherWhereUniqueInput
  }

  /**
   * ListWatcher findFirst
   */
  export type ListWatcherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    /**
     * Filter, which ListWatcher to fetch.
     */
    where?: ListWatcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListWatchers to fetch.
     */
    orderBy?: ListWatcherOrderByWithRelationInput | ListWatcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ListWatchers.
     */
    cursor?: ListWatcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListWatchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListWatchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ListWatchers.
     */
    distinct?: ListWatcherScalarFieldEnum | ListWatcherScalarFieldEnum[]
  }

  /**
   * ListWatcher findFirstOrThrow
   */
  export type ListWatcherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    /**
     * Filter, which ListWatcher to fetch.
     */
    where?: ListWatcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListWatchers to fetch.
     */
    orderBy?: ListWatcherOrderByWithRelationInput | ListWatcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ListWatchers.
     */
    cursor?: ListWatcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListWatchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListWatchers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ListWatchers.
     */
    distinct?: ListWatcherScalarFieldEnum | ListWatcherScalarFieldEnum[]
  }

  /**
   * ListWatcher findMany
   */
  export type ListWatcherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    /**
     * Filter, which ListWatchers to fetch.
     */
    where?: ListWatcherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListWatchers to fetch.
     */
    orderBy?: ListWatcherOrderByWithRelationInput | ListWatcherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ListWatchers.
     */
    cursor?: ListWatcherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListWatchers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListWatchers.
     */
    skip?: number
    distinct?: ListWatcherScalarFieldEnum | ListWatcherScalarFieldEnum[]
  }

  /**
   * ListWatcher create
   */
  export type ListWatcherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    /**
     * The data needed to create a ListWatcher.
     */
    data: XOR<ListWatcherCreateInput, ListWatcherUncheckedCreateInput>
  }

  /**
   * ListWatcher createMany
   */
  export type ListWatcherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ListWatchers.
     */
    data: ListWatcherCreateManyInput | ListWatcherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ListWatcher createManyAndReturn
   */
  export type ListWatcherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * The data used to create many ListWatchers.
     */
    data: ListWatcherCreateManyInput | ListWatcherCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ListWatcher update
   */
  export type ListWatcherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    /**
     * The data needed to update a ListWatcher.
     */
    data: XOR<ListWatcherUpdateInput, ListWatcherUncheckedUpdateInput>
    /**
     * Choose, which ListWatcher to update.
     */
    where: ListWatcherWhereUniqueInput
  }

  /**
   * ListWatcher updateMany
   */
  export type ListWatcherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ListWatchers.
     */
    data: XOR<ListWatcherUpdateManyMutationInput, ListWatcherUncheckedUpdateManyInput>
    /**
     * Filter which ListWatchers to update
     */
    where?: ListWatcherWhereInput
    /**
     * Limit how many ListWatchers to update.
     */
    limit?: number
  }

  /**
   * ListWatcher updateManyAndReturn
   */
  export type ListWatcherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * The data used to update ListWatchers.
     */
    data: XOR<ListWatcherUpdateManyMutationInput, ListWatcherUncheckedUpdateManyInput>
    /**
     * Filter which ListWatchers to update
     */
    where?: ListWatcherWhereInput
    /**
     * Limit how many ListWatchers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ListWatcher upsert
   */
  export type ListWatcherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    /**
     * The filter to search for the ListWatcher to update in case it exists.
     */
    where: ListWatcherWhereUniqueInput
    /**
     * In case the ListWatcher found by the `where` argument doesn't exist, create a new ListWatcher with this data.
     */
    create: XOR<ListWatcherCreateInput, ListWatcherUncheckedCreateInput>
    /**
     * In case the ListWatcher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ListWatcherUpdateInput, ListWatcherUncheckedUpdateInput>
  }

  /**
   * ListWatcher delete
   */
  export type ListWatcherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    /**
     * Filter which ListWatcher to delete.
     */
    where: ListWatcherWhereUniqueInput
  }

  /**
   * ListWatcher deleteMany
   */
  export type ListWatcherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ListWatchers to delete
     */
    where?: ListWatcherWhereInput
    /**
     * Limit how many ListWatchers to delete.
     */
    limit?: number
  }

  /**
   * ListWatcher without action
   */
  export type ListWatcherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
  }


  /**
   * Model List
   */

  export type AggregateList = {
    _count: ListCountAggregateOutputType | null
    _avg: ListAvgAggregateOutputType | null
    _sum: ListSumAggregateOutputType | null
    _min: ListMinAggregateOutputType | null
    _max: ListMaxAggregateOutputType | null
  }

  export type ListAvgAggregateOutputType = {
    position: Decimal | null
  }

  export type ListSumAggregateOutputType = {
    position: Decimal | null
  }

  export type ListMinAggregateOutputType = {
    id: string | null
    boardId: string | null
    name: string | null
    position: Decimal | null
    isArchived: boolean | null
    subscribed: boolean | null
  }

  export type ListMaxAggregateOutputType = {
    id: string | null
    boardId: string | null
    name: string | null
    position: Decimal | null
    isArchived: boolean | null
    subscribed: boolean | null
  }

  export type ListCountAggregateOutputType = {
    id: number
    boardId: number
    name: number
    position: number
    isArchived: number
    subscribed: number
    _all: number
  }


  export type ListAvgAggregateInputType = {
    position?: true
  }

  export type ListSumAggregateInputType = {
    position?: true
  }

  export type ListMinAggregateInputType = {
    id?: true
    boardId?: true
    name?: true
    position?: true
    isArchived?: true
    subscribed?: true
  }

  export type ListMaxAggregateInputType = {
    id?: true
    boardId?: true
    name?: true
    position?: true
    isArchived?: true
    subscribed?: true
  }

  export type ListCountAggregateInputType = {
    id?: true
    boardId?: true
    name?: true
    position?: true
    isArchived?: true
    subscribed?: true
    _all?: true
  }

  export type ListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which List to aggregate.
     */
    where?: ListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     */
    orderBy?: ListOrderByWithRelationInput | ListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lists
    **/
    _count?: true | ListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListMaxAggregateInputType
  }

  export type GetListAggregateType<T extends ListAggregateArgs> = {
        [P in keyof T & keyof AggregateList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateList[P]>
      : GetScalarType<T[P], AggregateList[P]>
  }




  export type ListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListWhereInput
    orderBy?: ListOrderByWithAggregationInput | ListOrderByWithAggregationInput[]
    by: ListScalarFieldEnum[] | ListScalarFieldEnum
    having?: ListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListCountAggregateInputType | true
    _avg?: ListAvgAggregateInputType
    _sum?: ListSumAggregateInputType
    _min?: ListMinAggregateInputType
    _max?: ListMaxAggregateInputType
  }

  export type ListGroupByOutputType = {
    id: string
    boardId: string
    name: string
    position: Decimal
    isArchived: boolean
    subscribed: boolean
    _count: ListCountAggregateOutputType | null
    _avg: ListAvgAggregateOutputType | null
    _sum: ListSumAggregateOutputType | null
    _min: ListMinAggregateOutputType | null
    _max: ListMaxAggregateOutputType | null
  }

  type GetListGroupByPayload<T extends ListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListGroupByOutputType[P]>
            : GetScalarType<T[P], ListGroupByOutputType[P]>
        }
      >
    >


  export type ListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    name?: boolean
    position?: boolean
    isArchived?: boolean
    subscribed?: boolean
    cards?: boolean | List$cardsArgs<ExtArgs>
    watchers?: boolean | List$watchersArgs<ExtArgs>
    board?: boolean | BoardDefaultArgs<ExtArgs>
    _count?: boolean | ListCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["list"]>

  export type ListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    name?: boolean
    position?: boolean
    isArchived?: boolean
    subscribed?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["list"]>

  export type ListSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    boardId?: boolean
    name?: boolean
    position?: boolean
    isArchived?: boolean
    subscribed?: boolean
    board?: boolean | BoardDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["list"]>

  export type ListSelectScalar = {
    id?: boolean
    boardId?: boolean
    name?: boolean
    position?: boolean
    isArchived?: boolean
    subscribed?: boolean
  }

  export type ListOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "boardId" | "name" | "position" | "isArchived" | "subscribed", ExtArgs["result"]["list"]>
  export type ListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cards?: boolean | List$cardsArgs<ExtArgs>
    watchers?: boolean | List$watchersArgs<ExtArgs>
    board?: boolean | BoardDefaultArgs<ExtArgs>
    _count?: boolean | ListCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
  }
  export type ListIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardDefaultArgs<ExtArgs>
  }

  export type $ListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "List"
    objects: {
      cards: Prisma.$CardPayload<ExtArgs>[]
      watchers: Prisma.$ListWatcherPayload<ExtArgs>[]
      board: Prisma.$BoardPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      boardId: string
      name: string
      position: Prisma.Decimal
      isArchived: boolean
      subscribed: boolean
    }, ExtArgs["result"]["list"]>
    composites: {}
  }

  type ListGetPayload<S extends boolean | null | undefined | ListDefaultArgs> = $Result.GetResult<Prisma.$ListPayload, S>

  type ListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ListCountAggregateInputType | true
    }

  export interface ListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['List'], meta: { name: 'List' } }
    /**
     * Find zero or one List that matches the filter.
     * @param {ListFindUniqueArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ListFindUniqueArgs>(args: SelectSubset<T, ListFindUniqueArgs<ExtArgs>>): Prisma__ListClient<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one List that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ListFindUniqueOrThrowArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ListFindUniqueOrThrowArgs>(args: SelectSubset<T, ListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ListClient<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first List that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListFindFirstArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ListFindFirstArgs>(args?: SelectSubset<T, ListFindFirstArgs<ExtArgs>>): Prisma__ListClient<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first List that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListFindFirstOrThrowArgs} args - Arguments to find a List
     * @example
     * // Get one List
     * const list = await prisma.list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ListFindFirstOrThrowArgs>(args?: SelectSubset<T, ListFindFirstOrThrowArgs<ExtArgs>>): Prisma__ListClient<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lists
     * const lists = await prisma.list.findMany()
     * 
     * // Get first 10 Lists
     * const lists = await prisma.list.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const listWithIdOnly = await prisma.list.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ListFindManyArgs>(args?: SelectSubset<T, ListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a List.
     * @param {ListCreateArgs} args - Arguments to create a List.
     * @example
     * // Create one List
     * const List = await prisma.list.create({
     *   data: {
     *     // ... data to create a List
     *   }
     * })
     * 
     */
    create<T extends ListCreateArgs>(args: SelectSubset<T, ListCreateArgs<ExtArgs>>): Prisma__ListClient<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lists.
     * @param {ListCreateManyArgs} args - Arguments to create many Lists.
     * @example
     * // Create many Lists
     * const list = await prisma.list.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ListCreateManyArgs>(args?: SelectSubset<T, ListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lists and returns the data saved in the database.
     * @param {ListCreateManyAndReturnArgs} args - Arguments to create many Lists.
     * @example
     * // Create many Lists
     * const list = await prisma.list.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lists and only return the `id`
     * const listWithIdOnly = await prisma.list.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ListCreateManyAndReturnArgs>(args?: SelectSubset<T, ListCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a List.
     * @param {ListDeleteArgs} args - Arguments to delete one List.
     * @example
     * // Delete one List
     * const List = await prisma.list.delete({
     *   where: {
     *     // ... filter to delete one List
     *   }
     * })
     * 
     */
    delete<T extends ListDeleteArgs>(args: SelectSubset<T, ListDeleteArgs<ExtArgs>>): Prisma__ListClient<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one List.
     * @param {ListUpdateArgs} args - Arguments to update one List.
     * @example
     * // Update one List
     * const list = await prisma.list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ListUpdateArgs>(args: SelectSubset<T, ListUpdateArgs<ExtArgs>>): Prisma__ListClient<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lists.
     * @param {ListDeleteManyArgs} args - Arguments to filter Lists to delete.
     * @example
     * // Delete a few Lists
     * const { count } = await prisma.list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ListDeleteManyArgs>(args?: SelectSubset<T, ListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lists
     * const list = await prisma.list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ListUpdateManyArgs>(args: SelectSubset<T, ListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lists and returns the data updated in the database.
     * @param {ListUpdateManyAndReturnArgs} args - Arguments to update many Lists.
     * @example
     * // Update many Lists
     * const list = await prisma.list.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lists and only return the `id`
     * const listWithIdOnly = await prisma.list.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ListUpdateManyAndReturnArgs>(args: SelectSubset<T, ListUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one List.
     * @param {ListUpsertArgs} args - Arguments to update or create a List.
     * @example
     * // Update or create a List
     * const list = await prisma.list.upsert({
     *   create: {
     *     // ... data to create a List
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the List we want to update
     *   }
     * })
     */
    upsert<T extends ListUpsertArgs>(args: SelectSubset<T, ListUpsertArgs<ExtArgs>>): Prisma__ListClient<$Result.GetResult<Prisma.$ListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListCountArgs} args - Arguments to filter Lists to count.
     * @example
     * // Count the number of Lists
     * const count = await prisma.list.count({
     *   where: {
     *     // ... the filter for the Lists we want to count
     *   }
     * })
    **/
    count<T extends ListCountArgs>(
      args?: Subset<T, ListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a List.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListAggregateArgs>(args: Subset<T, ListAggregateArgs>): Prisma.PrismaPromise<GetListAggregateType<T>>

    /**
     * Group by List.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListGroupByArgs['orderBy'] }
        : { orderBy?: ListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the List model
   */
  readonly fields: ListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for List.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cards<T extends List$cardsArgs<ExtArgs> = {}>(args?: Subset<T, List$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchers<T extends List$watchersArgs<ExtArgs> = {}>(args?: Subset<T, List$watchersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    board<T extends BoardDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoardDefaultArgs<ExtArgs>>): Prisma__BoardClient<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the List model
   */
  interface ListFieldRefs {
    readonly id: FieldRef<"List", 'String'>
    readonly boardId: FieldRef<"List", 'String'>
    readonly name: FieldRef<"List", 'String'>
    readonly position: FieldRef<"List", 'Decimal'>
    readonly isArchived: FieldRef<"List", 'Boolean'>
    readonly subscribed: FieldRef<"List", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * List findUnique
   */
  export type ListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
    /**
     * Filter, which List to fetch.
     */
    where: ListWhereUniqueInput
  }

  /**
   * List findUniqueOrThrow
   */
  export type ListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
    /**
     * Filter, which List to fetch.
     */
    where: ListWhereUniqueInput
  }

  /**
   * List findFirst
   */
  export type ListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
    /**
     * Filter, which List to fetch.
     */
    where?: ListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     */
    orderBy?: ListOrderByWithRelationInput | ListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lists.
     */
    cursor?: ListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lists.
     */
    distinct?: ListScalarFieldEnum | ListScalarFieldEnum[]
  }

  /**
   * List findFirstOrThrow
   */
  export type ListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
    /**
     * Filter, which List to fetch.
     */
    where?: ListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     */
    orderBy?: ListOrderByWithRelationInput | ListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lists.
     */
    cursor?: ListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lists.
     */
    distinct?: ListScalarFieldEnum | ListScalarFieldEnum[]
  }

  /**
   * List findMany
   */
  export type ListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
    /**
     * Filter, which Lists to fetch.
     */
    where?: ListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lists to fetch.
     */
    orderBy?: ListOrderByWithRelationInput | ListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lists.
     */
    cursor?: ListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lists.
     */
    skip?: number
    distinct?: ListScalarFieldEnum | ListScalarFieldEnum[]
  }

  /**
   * List create
   */
  export type ListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
    /**
     * The data needed to create a List.
     */
    data: XOR<ListCreateInput, ListUncheckedCreateInput>
  }

  /**
   * List createMany
   */
  export type ListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lists.
     */
    data: ListCreateManyInput | ListCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * List createManyAndReturn
   */
  export type ListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * The data used to create many Lists.
     */
    data: ListCreateManyInput | ListCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * List update
   */
  export type ListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
    /**
     * The data needed to update a List.
     */
    data: XOR<ListUpdateInput, ListUncheckedUpdateInput>
    /**
     * Choose, which List to update.
     */
    where: ListWhereUniqueInput
  }

  /**
   * List updateMany
   */
  export type ListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lists.
     */
    data: XOR<ListUpdateManyMutationInput, ListUncheckedUpdateManyInput>
    /**
     * Filter which Lists to update
     */
    where?: ListWhereInput
    /**
     * Limit how many Lists to update.
     */
    limit?: number
  }

  /**
   * List updateManyAndReturn
   */
  export type ListUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * The data used to update Lists.
     */
    data: XOR<ListUpdateManyMutationInput, ListUncheckedUpdateManyInput>
    /**
     * Filter which Lists to update
     */
    where?: ListWhereInput
    /**
     * Limit how many Lists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * List upsert
   */
  export type ListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
    /**
     * The filter to search for the List to update in case it exists.
     */
    where: ListWhereUniqueInput
    /**
     * In case the List found by the `where` argument doesn't exist, create a new List with this data.
     */
    create: XOR<ListCreateInput, ListUncheckedCreateInput>
    /**
     * In case the List was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ListUpdateInput, ListUncheckedUpdateInput>
  }

  /**
   * List delete
   */
  export type ListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
    /**
     * Filter which List to delete.
     */
    where: ListWhereUniqueInput
  }

  /**
   * List deleteMany
   */
  export type ListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lists to delete
     */
    where?: ListWhereInput
    /**
     * Limit how many Lists to delete.
     */
    limit?: number
  }

  /**
   * List.cards
   */
  export type List$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    where?: CardWhereInput
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * List.watchers
   */
  export type List$watchersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    where?: ListWatcherWhereInput
    orderBy?: ListWatcherOrderByWithRelationInput | ListWatcherOrderByWithRelationInput[]
    cursor?: ListWatcherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListWatcherScalarFieldEnum | ListWatcherScalarFieldEnum[]
  }

  /**
   * List without action
   */
  export type ListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the List
     */
    select?: ListSelect<ExtArgs> | null
    /**
     * Omit specific fields from the List
     */
    omit?: ListOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    clerkId: string | null
    email: string | null
    username: string | null
    fullName: string | null
    avatarUrl: string | null
    theme: $Enums.Theme | null
    emailNotification: boolean | null
    pushNotification: boolean | null
    createdAt: Date | null
    bio: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    clerkId: string | null
    email: string | null
    username: string | null
    fullName: string | null
    avatarUrl: string | null
    theme: $Enums.Theme | null
    emailNotification: boolean | null
    pushNotification: boolean | null
    createdAt: Date | null
    bio: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    clerkId: number
    email: number
    username: number
    fullName: number
    avatarUrl: number
    theme: number
    recentlyViewedBoards: number
    emailNotification: number
    pushNotification: number
    createdAt: number
    bio: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    clerkId?: true
    email?: true
    username?: true
    fullName?: true
    avatarUrl?: true
    theme?: true
    emailNotification?: true
    pushNotification?: true
    createdAt?: true
    bio?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    clerkId?: true
    email?: true
    username?: true
    fullName?: true
    avatarUrl?: true
    theme?: true
    emailNotification?: true
    pushNotification?: true
    createdAt?: true
    bio?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    clerkId?: true
    email?: true
    username?: true
    fullName?: true
    avatarUrl?: true
    theme?: true
    recentlyViewedBoards?: true
    emailNotification?: true
    pushNotification?: true
    createdAt?: true
    bio?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    clerkId: string
    email: string
    username: string | null
    fullName: string
    avatarUrl: string
    theme: $Enums.Theme
    recentlyViewedBoards: string[]
    emailNotification: boolean
    pushNotification: boolean
    createdAt: Date
    bio: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    email?: boolean
    username?: boolean
    fullName?: boolean
    avatarUrl?: boolean
    theme?: boolean
    recentlyViewedBoards?: boolean
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: boolean
    bio?: boolean
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    attachments?: boolean | User$attachmentsArgs<ExtArgs>
    boardMembers?: boolean | User$boardMembersArgs<ExtArgs>
    boards?: boolean | User$boardsArgs<ExtArgs>
    cardAssignees?: boolean | User$cardAssigneesArgs<ExtArgs>
    cardWatchers?: boolean | User$cardWatchersArgs<ExtArgs>
    cards?: boolean | User$cardsArgs<ExtArgs>
    checklistItemAssignees?: boolean | User$checklistItemAssigneesArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    listWatchers?: boolean | User$listWatchersArgs<ExtArgs>
    workspaceMembers?: boolean | User$workspaceMembersArgs<ExtArgs>
    workspaces?: boolean | User$workspacesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    email?: boolean
    username?: boolean
    fullName?: boolean
    avatarUrl?: boolean
    theme?: boolean
    recentlyViewedBoards?: boolean
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: boolean
    bio?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    email?: boolean
    username?: boolean
    fullName?: boolean
    avatarUrl?: boolean
    theme?: boolean
    recentlyViewedBoards?: boolean
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: boolean
    bio?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    clerkId?: boolean
    email?: boolean
    username?: boolean
    fullName?: boolean
    avatarUrl?: boolean
    theme?: boolean
    recentlyViewedBoards?: boolean
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: boolean
    bio?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clerkId" | "email" | "username" | "fullName" | "avatarUrl" | "theme" | "recentlyViewedBoards" | "emailNotification" | "pushNotification" | "createdAt" | "bio", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityLogs?: boolean | User$activityLogsArgs<ExtArgs>
    attachments?: boolean | User$attachmentsArgs<ExtArgs>
    boardMembers?: boolean | User$boardMembersArgs<ExtArgs>
    boards?: boolean | User$boardsArgs<ExtArgs>
    cardAssignees?: boolean | User$cardAssigneesArgs<ExtArgs>
    cardWatchers?: boolean | User$cardWatchersArgs<ExtArgs>
    cards?: boolean | User$cardsArgs<ExtArgs>
    checklistItemAssignees?: boolean | User$checklistItemAssigneesArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    listWatchers?: boolean | User$listWatchersArgs<ExtArgs>
    workspaceMembers?: boolean | User$workspaceMembersArgs<ExtArgs>
    workspaces?: boolean | User$workspacesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      activityLogs: Prisma.$ActivityLogPayload<ExtArgs>[]
      attachments: Prisma.$AttachmentPayload<ExtArgs>[]
      boardMembers: Prisma.$BoardMemberPayload<ExtArgs>[]
      boards: Prisma.$BoardPayload<ExtArgs>[]
      cardAssignees: Prisma.$CardAssigneePayload<ExtArgs>[]
      cardWatchers: Prisma.$CardWatcherPayload<ExtArgs>[]
      cards: Prisma.$CardPayload<ExtArgs>[]
      checklistItemAssignees: Prisma.$ChecklistItemAssigneePayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      listWatchers: Prisma.$ListWatcherPayload<ExtArgs>[]
      workspaceMembers: Prisma.$WorkspaceMemberPayload<ExtArgs>[]
      workspaces: Prisma.$WorkspacePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clerkId: string
      email: string
      username: string | null
      fullName: string
      avatarUrl: string
      theme: $Enums.Theme
      recentlyViewedBoards: string[]
      emailNotification: boolean
      pushNotification: boolean
      createdAt: Date
      bio: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activityLogs<T extends User$activityLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$activityLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attachments<T extends User$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    boardMembers<T extends User$boardMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$boardMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    boards<T extends User$boardsArgs<ExtArgs> = {}>(args?: Subset<T, User$boardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cardAssignees<T extends User$cardAssigneesArgs<ExtArgs> = {}>(args?: Subset<T, User$cardAssigneesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardAssigneePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cardWatchers<T extends User$cardWatchersArgs<ExtArgs> = {}>(args?: Subset<T, User$cardWatchersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardWatcherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    cards<T extends User$cardsArgs<ExtArgs> = {}>(args?: Subset<T, User$cardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    checklistItemAssignees<T extends User$checklistItemAssigneesArgs<ExtArgs> = {}>(args?: Subset<T, User$checklistItemAssigneesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChecklistItemAssigneePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    listWatchers<T extends User$listWatchersArgs<ExtArgs> = {}>(args?: Subset<T, User$listWatchersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListWatcherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workspaceMembers<T extends User$workspaceMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$workspaceMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workspaces<T extends User$workspacesArgs<ExtArgs> = {}>(args?: Subset<T, User$workspacesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly clerkId: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly theme: FieldRef<"User", 'Theme'>
    readonly recentlyViewedBoards: FieldRef<"User", 'String[]'>
    readonly emailNotification: FieldRef<"User", 'Boolean'>
    readonly pushNotification: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly bio: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.activityLogs
   */
  export type User$activityLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityLog
     */
    select?: ActivityLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityLog
     */
    omit?: ActivityLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityLogInclude<ExtArgs> | null
    where?: ActivityLogWhereInput
    orderBy?: ActivityLogOrderByWithRelationInput | ActivityLogOrderByWithRelationInput[]
    cursor?: ActivityLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityLogScalarFieldEnum | ActivityLogScalarFieldEnum[]
  }

  /**
   * User.attachments
   */
  export type User$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attachment
     */
    omit?: AttachmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    cursor?: AttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * User.boardMembers
   */
  export type User$boardMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardMember
     */
    select?: BoardMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BoardMember
     */
    omit?: BoardMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardMemberInclude<ExtArgs> | null
    where?: BoardMemberWhereInput
    orderBy?: BoardMemberOrderByWithRelationInput | BoardMemberOrderByWithRelationInput[]
    cursor?: BoardMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardMemberScalarFieldEnum | BoardMemberScalarFieldEnum[]
  }

  /**
   * User.boards
   */
  export type User$boardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    where?: BoardWhereInput
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    cursor?: BoardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * User.cardAssignees
   */
  export type User$cardAssigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardAssignee
     */
    select?: CardAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardAssignee
     */
    omit?: CardAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardAssigneeInclude<ExtArgs> | null
    where?: CardAssigneeWhereInput
    orderBy?: CardAssigneeOrderByWithRelationInput | CardAssigneeOrderByWithRelationInput[]
    cursor?: CardAssigneeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardAssigneeScalarFieldEnum | CardAssigneeScalarFieldEnum[]
  }

  /**
   * User.cardWatchers
   */
  export type User$cardWatchersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CardWatcher
     */
    select?: CardWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CardWatcher
     */
    omit?: CardWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardWatcherInclude<ExtArgs> | null
    where?: CardWatcherWhereInput
    orderBy?: CardWatcherOrderByWithRelationInput | CardWatcherOrderByWithRelationInput[]
    cursor?: CardWatcherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardWatcherScalarFieldEnum | CardWatcherScalarFieldEnum[]
  }

  /**
   * User.cards
   */
  export type User$cardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Card
     */
    select?: CardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Card
     */
    omit?: CardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CardInclude<ExtArgs> | null
    where?: CardWhereInput
    orderBy?: CardOrderByWithRelationInput | CardOrderByWithRelationInput[]
    cursor?: CardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CardScalarFieldEnum | CardScalarFieldEnum[]
  }

  /**
   * User.checklistItemAssignees
   */
  export type User$checklistItemAssigneesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChecklistItemAssignee
     */
    select?: ChecklistItemAssigneeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChecklistItemAssignee
     */
    omit?: ChecklistItemAssigneeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChecklistItemAssigneeInclude<ExtArgs> | null
    where?: ChecklistItemAssigneeWhereInput
    orderBy?: ChecklistItemAssigneeOrderByWithRelationInput | ChecklistItemAssigneeOrderByWithRelationInput[]
    cursor?: ChecklistItemAssigneeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChecklistItemAssigneeScalarFieldEnum | ChecklistItemAssigneeScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.listWatchers
   */
  export type User$listWatchersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListWatcher
     */
    select?: ListWatcherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListWatcher
     */
    omit?: ListWatcherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListWatcherInclude<ExtArgs> | null
    where?: ListWatcherWhereInput
    orderBy?: ListWatcherOrderByWithRelationInput | ListWatcherOrderByWithRelationInput[]
    cursor?: ListWatcherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListWatcherScalarFieldEnum | ListWatcherScalarFieldEnum[]
  }

  /**
   * User.workspaceMembers
   */
  export type User$workspaceMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    where?: WorkspaceMemberWhereInput
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    cursor?: WorkspaceMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * User.workspaces
   */
  export type User$workspacesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    where?: WorkspaceWhereInput
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    cursor?: WorkspaceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model WorkspaceMember
   */

  export type AggregateWorkspaceMember = {
    _count: WorkspaceMemberCountAggregateOutputType | null
    _min: WorkspaceMemberMinAggregateOutputType | null
    _max: WorkspaceMemberMaxAggregateOutputType | null
  }

  export type WorkspaceMemberMinAggregateOutputType = {
    workspaceId: string | null
    userId: string | null
    role: $Enums.WorkspaceRole | null
    joinedAt: Date | null
  }

  export type WorkspaceMemberMaxAggregateOutputType = {
    workspaceId: string | null
    userId: string | null
    role: $Enums.WorkspaceRole | null
    joinedAt: Date | null
  }

  export type WorkspaceMemberCountAggregateOutputType = {
    workspaceId: number
    userId: number
    role: number
    joinedAt: number
    _all: number
  }


  export type WorkspaceMemberMinAggregateInputType = {
    workspaceId?: true
    userId?: true
    role?: true
    joinedAt?: true
  }

  export type WorkspaceMemberMaxAggregateInputType = {
    workspaceId?: true
    userId?: true
    role?: true
    joinedAt?: true
  }

  export type WorkspaceMemberCountAggregateInputType = {
    workspaceId?: true
    userId?: true
    role?: true
    joinedAt?: true
    _all?: true
  }

  export type WorkspaceMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceMember to aggregate.
     */
    where?: WorkspaceMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkspaceMembers
    **/
    _count?: true | WorkspaceMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceMemberMaxAggregateInputType
  }

  export type GetWorkspaceMemberAggregateType<T extends WorkspaceMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspaceMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspaceMember[P]>
      : GetScalarType<T[P], AggregateWorkspaceMember[P]>
  }




  export type WorkspaceMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceMemberWhereInput
    orderBy?: WorkspaceMemberOrderByWithAggregationInput | WorkspaceMemberOrderByWithAggregationInput[]
    by: WorkspaceMemberScalarFieldEnum[] | WorkspaceMemberScalarFieldEnum
    having?: WorkspaceMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceMemberCountAggregateInputType | true
    _min?: WorkspaceMemberMinAggregateInputType
    _max?: WorkspaceMemberMaxAggregateInputType
  }

  export type WorkspaceMemberGroupByOutputType = {
    workspaceId: string
    userId: string
    role: $Enums.WorkspaceRole
    joinedAt: Date
    _count: WorkspaceMemberCountAggregateOutputType | null
    _min: WorkspaceMemberMinAggregateOutputType | null
    _max: WorkspaceMemberMaxAggregateOutputType | null
  }

  type GetWorkspaceMemberGroupByPayload<T extends WorkspaceMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceMemberGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceMemberGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workspaceId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceMember"]>

  export type WorkspaceMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workspaceId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceMember"]>

  export type WorkspaceMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    workspaceId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspaceMember"]>

  export type WorkspaceMemberSelectScalar = {
    workspaceId?: boolean
    userId?: boolean
    role?: boolean
    joinedAt?: boolean
  }

  export type WorkspaceMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"workspaceId" | "userId" | "role" | "joinedAt", ExtArgs["result"]["workspaceMember"]>
  export type WorkspaceMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type WorkspaceMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }
  export type WorkspaceMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    workspace?: boolean | WorkspaceDefaultArgs<ExtArgs>
  }

  export type $WorkspaceMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkspaceMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      workspace: Prisma.$WorkspacePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      workspaceId: string
      userId: string
      role: $Enums.WorkspaceRole
      joinedAt: Date
    }, ExtArgs["result"]["workspaceMember"]>
    composites: {}
  }

  type WorkspaceMemberGetPayload<S extends boolean | null | undefined | WorkspaceMemberDefaultArgs> = $Result.GetResult<Prisma.$WorkspaceMemberPayload, S>

  type WorkspaceMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspaceMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspaceMemberCountAggregateInputType | true
    }

  export interface WorkspaceMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkspaceMember'], meta: { name: 'WorkspaceMember' } }
    /**
     * Find zero or one WorkspaceMember that matches the filter.
     * @param {WorkspaceMemberFindUniqueArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceMemberFindUniqueArgs>(args: SelectSubset<T, WorkspaceMemberFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkspaceMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceMemberFindUniqueOrThrowArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberFindFirstArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceMemberFindFirstArgs>(args?: SelectSubset<T, WorkspaceMemberFindFirstArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkspaceMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberFindFirstOrThrowArgs} args - Arguments to find a WorkspaceMember
     * @example
     * // Get one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkspaceMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkspaceMembers
     * const workspaceMembers = await prisma.workspaceMember.findMany()
     * 
     * // Get first 10 WorkspaceMembers
     * const workspaceMembers = await prisma.workspaceMember.findMany({ take: 10 })
     * 
     * // Only select the `workspaceId`
     * const workspaceMemberWithWorkspaceIdOnly = await prisma.workspaceMember.findMany({ select: { workspaceId: true } })
     * 
     */
    findMany<T extends WorkspaceMemberFindManyArgs>(args?: SelectSubset<T, WorkspaceMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkspaceMember.
     * @param {WorkspaceMemberCreateArgs} args - Arguments to create a WorkspaceMember.
     * @example
     * // Create one WorkspaceMember
     * const WorkspaceMember = await prisma.workspaceMember.create({
     *   data: {
     *     // ... data to create a WorkspaceMember
     *   }
     * })
     * 
     */
    create<T extends WorkspaceMemberCreateArgs>(args: SelectSubset<T, WorkspaceMemberCreateArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkspaceMembers.
     * @param {WorkspaceMemberCreateManyArgs} args - Arguments to create many WorkspaceMembers.
     * @example
     * // Create many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceMemberCreateManyArgs>(args?: SelectSubset<T, WorkspaceMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkspaceMembers and returns the data saved in the database.
     * @param {WorkspaceMemberCreateManyAndReturnArgs} args - Arguments to create many WorkspaceMembers.
     * @example
     * // Create many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkspaceMembers and only return the `workspaceId`
     * const workspaceMemberWithWorkspaceIdOnly = await prisma.workspaceMember.createManyAndReturn({
     *   select: { workspaceId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkspaceMember.
     * @param {WorkspaceMemberDeleteArgs} args - Arguments to delete one WorkspaceMember.
     * @example
     * // Delete one WorkspaceMember
     * const WorkspaceMember = await prisma.workspaceMember.delete({
     *   where: {
     *     // ... filter to delete one WorkspaceMember
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceMemberDeleteArgs>(args: SelectSubset<T, WorkspaceMemberDeleteArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkspaceMember.
     * @param {WorkspaceMemberUpdateArgs} args - Arguments to update one WorkspaceMember.
     * @example
     * // Update one WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceMemberUpdateArgs>(args: SelectSubset<T, WorkspaceMemberUpdateArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkspaceMembers.
     * @param {WorkspaceMemberDeleteManyArgs} args - Arguments to filter WorkspaceMembers to delete.
     * @example
     * // Delete a few WorkspaceMembers
     * const { count } = await prisma.workspaceMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceMemberDeleteManyArgs>(args?: SelectSubset<T, WorkspaceMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceMemberUpdateManyArgs>(args: SelectSubset<T, WorkspaceMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkspaceMembers and returns the data updated in the database.
     * @param {WorkspaceMemberUpdateManyAndReturnArgs} args - Arguments to update many WorkspaceMembers.
     * @example
     * // Update many WorkspaceMembers
     * const workspaceMember = await prisma.workspaceMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkspaceMembers and only return the `workspaceId`
     * const workspaceMemberWithWorkspaceIdOnly = await prisma.workspaceMember.updateManyAndReturn({
     *   select: { workspaceId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspaceMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspaceMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkspaceMember.
     * @param {WorkspaceMemberUpsertArgs} args - Arguments to update or create a WorkspaceMember.
     * @example
     * // Update or create a WorkspaceMember
     * const workspaceMember = await prisma.workspaceMember.upsert({
     *   create: {
     *     // ... data to create a WorkspaceMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkspaceMember we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceMemberUpsertArgs>(args: SelectSubset<T, WorkspaceMemberUpsertArgs<ExtArgs>>): Prisma__WorkspaceMemberClient<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkspaceMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberCountArgs} args - Arguments to filter WorkspaceMembers to count.
     * @example
     * // Count the number of WorkspaceMembers
     * const count = await prisma.workspaceMember.count({
     *   where: {
     *     // ... the filter for the WorkspaceMembers we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceMemberCountArgs>(
      args?: Subset<T, WorkspaceMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkspaceMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceMemberAggregateArgs>(args: Subset<T, WorkspaceMemberAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceMemberAggregateType<T>>

    /**
     * Group by WorkspaceMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceMemberGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkspaceMember model
   */
  readonly fields: WorkspaceMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkspaceMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workspace<T extends WorkspaceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkspaceDefaultArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkspaceMember model
   */
  interface WorkspaceMemberFieldRefs {
    readonly workspaceId: FieldRef<"WorkspaceMember", 'String'>
    readonly userId: FieldRef<"WorkspaceMember", 'String'>
    readonly role: FieldRef<"WorkspaceMember", 'WorkspaceRole'>
    readonly joinedAt: FieldRef<"WorkspaceMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkspaceMember findUnique
   */
  export type WorkspaceMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where: WorkspaceMemberWhereUniqueInput
  }

  /**
   * WorkspaceMember findUniqueOrThrow
   */
  export type WorkspaceMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where: WorkspaceMemberWhereUniqueInput
  }

  /**
   * WorkspaceMember findFirst
   */
  export type WorkspaceMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where?: WorkspaceMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceMembers.
     */
    cursor?: WorkspaceMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceMembers.
     */
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * WorkspaceMember findFirstOrThrow
   */
  export type WorkspaceMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceMember to fetch.
     */
    where?: WorkspaceMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkspaceMembers.
     */
    cursor?: WorkspaceMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkspaceMembers.
     */
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * WorkspaceMember findMany
   */
  export type WorkspaceMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter, which WorkspaceMembers to fetch.
     */
    where?: WorkspaceMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkspaceMembers to fetch.
     */
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkspaceMembers.
     */
    cursor?: WorkspaceMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkspaceMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkspaceMembers.
     */
    skip?: number
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * WorkspaceMember create
   */
  export type WorkspaceMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkspaceMember.
     */
    data: XOR<WorkspaceMemberCreateInput, WorkspaceMemberUncheckedCreateInput>
  }

  /**
   * WorkspaceMember createMany
   */
  export type WorkspaceMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkspaceMembers.
     */
    data: WorkspaceMemberCreateManyInput | WorkspaceMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkspaceMember createManyAndReturn
   */
  export type WorkspaceMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * The data used to create many WorkspaceMembers.
     */
    data: WorkspaceMemberCreateManyInput | WorkspaceMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceMember update
   */
  export type WorkspaceMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkspaceMember.
     */
    data: XOR<WorkspaceMemberUpdateInput, WorkspaceMemberUncheckedUpdateInput>
    /**
     * Choose, which WorkspaceMember to update.
     */
    where: WorkspaceMemberWhereUniqueInput
  }

  /**
   * WorkspaceMember updateMany
   */
  export type WorkspaceMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkspaceMembers.
     */
    data: XOR<WorkspaceMemberUpdateManyMutationInput, WorkspaceMemberUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceMembers to update
     */
    where?: WorkspaceMemberWhereInput
    /**
     * Limit how many WorkspaceMembers to update.
     */
    limit?: number
  }

  /**
   * WorkspaceMember updateManyAndReturn
   */
  export type WorkspaceMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * The data used to update WorkspaceMembers.
     */
    data: XOR<WorkspaceMemberUpdateManyMutationInput, WorkspaceMemberUncheckedUpdateManyInput>
    /**
     * Filter which WorkspaceMembers to update
     */
    where?: WorkspaceMemberWhereInput
    /**
     * Limit how many WorkspaceMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkspaceMember upsert
   */
  export type WorkspaceMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkspaceMember to update in case it exists.
     */
    where: WorkspaceMemberWhereUniqueInput
    /**
     * In case the WorkspaceMember found by the `where` argument doesn't exist, create a new WorkspaceMember with this data.
     */
    create: XOR<WorkspaceMemberCreateInput, WorkspaceMemberUncheckedCreateInput>
    /**
     * In case the WorkspaceMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceMemberUpdateInput, WorkspaceMemberUncheckedUpdateInput>
  }

  /**
   * WorkspaceMember delete
   */
  export type WorkspaceMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    /**
     * Filter which WorkspaceMember to delete.
     */
    where: WorkspaceMemberWhereUniqueInput
  }

  /**
   * WorkspaceMember deleteMany
   */
  export type WorkspaceMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkspaceMembers to delete
     */
    where?: WorkspaceMemberWhereInput
    /**
     * Limit how many WorkspaceMembers to delete.
     */
    limit?: number
  }

  /**
   * WorkspaceMember without action
   */
  export type WorkspaceMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
  }


  /**
   * Model Workspace
   */

  export type AggregateWorkspace = {
    _count: WorkspaceCountAggregateOutputType | null
    _min: WorkspaceMinAggregateOutputType | null
    _max: WorkspaceMaxAggregateOutputType | null
  }

  export type WorkspaceMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    visibility: $Enums.WorkspaceVisibility | null
    premium: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    type: $Enums.WorkspaceType | null
    createdBy: string | null
    workspaceMembershipRestrictions: $Enums.MembershipRestrictions | null
    publicBoardCreation: $Enums.BoardCreationRestrictions | null
    workspaceBoardCreation: $Enums.BoardCreationRestrictions | null
    privateBoardCreation: $Enums.BoardCreationRestrictions | null
    publicBoardDeletion: $Enums.BoardCreationRestrictions | null
    workspaceBoardDeletion: $Enums.BoardCreationRestrictions | null
    privateBoardDeletion: $Enums.BoardCreationRestrictions | null
    allowGuestSharing: $Enums.BoardSharing | null
    allowSlackIntegration: $Enums.SlackSharing | null
  }

  export type WorkspaceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    visibility: $Enums.WorkspaceVisibility | null
    premium: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    type: $Enums.WorkspaceType | null
    createdBy: string | null
    workspaceMembershipRestrictions: $Enums.MembershipRestrictions | null
    publicBoardCreation: $Enums.BoardCreationRestrictions | null
    workspaceBoardCreation: $Enums.BoardCreationRestrictions | null
    privateBoardCreation: $Enums.BoardCreationRestrictions | null
    publicBoardDeletion: $Enums.BoardCreationRestrictions | null
    workspaceBoardDeletion: $Enums.BoardCreationRestrictions | null
    privateBoardDeletion: $Enums.BoardCreationRestrictions | null
    allowGuestSharing: $Enums.BoardSharing | null
    allowSlackIntegration: $Enums.SlackSharing | null
  }

  export type WorkspaceCountAggregateOutputType = {
    id: number
    name: number
    description: number
    visibility: number
    premium: number
    createdAt: number
    updatedAt: number
    type: number
    createdBy: number
    workspaceMembershipRestrictions: number
    publicBoardCreation: number
    workspaceBoardCreation: number
    privateBoardCreation: number
    publicBoardDeletion: number
    workspaceBoardDeletion: number
    privateBoardDeletion: number
    allowGuestSharing: number
    allowSlackIntegration: number
    _all: number
  }


  export type WorkspaceMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    visibility?: true
    premium?: true
    createdAt?: true
    updatedAt?: true
    type?: true
    createdBy?: true
    workspaceMembershipRestrictions?: true
    publicBoardCreation?: true
    workspaceBoardCreation?: true
    privateBoardCreation?: true
    publicBoardDeletion?: true
    workspaceBoardDeletion?: true
    privateBoardDeletion?: true
    allowGuestSharing?: true
    allowSlackIntegration?: true
  }

  export type WorkspaceMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    visibility?: true
    premium?: true
    createdAt?: true
    updatedAt?: true
    type?: true
    createdBy?: true
    workspaceMembershipRestrictions?: true
    publicBoardCreation?: true
    workspaceBoardCreation?: true
    privateBoardCreation?: true
    publicBoardDeletion?: true
    workspaceBoardDeletion?: true
    privateBoardDeletion?: true
    allowGuestSharing?: true
    allowSlackIntegration?: true
  }

  export type WorkspaceCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    visibility?: true
    premium?: true
    createdAt?: true
    updatedAt?: true
    type?: true
    createdBy?: true
    workspaceMembershipRestrictions?: true
    publicBoardCreation?: true
    workspaceBoardCreation?: true
    privateBoardCreation?: true
    publicBoardDeletion?: true
    workspaceBoardDeletion?: true
    privateBoardDeletion?: true
    allowGuestSharing?: true
    allowSlackIntegration?: true
    _all?: true
  }

  export type WorkspaceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workspace to aggregate.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Workspaces
    **/
    _count?: true | WorkspaceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkspaceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkspaceMaxAggregateInputType
  }

  export type GetWorkspaceAggregateType<T extends WorkspaceAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkspace]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkspace[P]>
      : GetScalarType<T[P], AggregateWorkspace[P]>
  }




  export type WorkspaceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkspaceWhereInput
    orderBy?: WorkspaceOrderByWithAggregationInput | WorkspaceOrderByWithAggregationInput[]
    by: WorkspaceScalarFieldEnum[] | WorkspaceScalarFieldEnum
    having?: WorkspaceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkspaceCountAggregateInputType | true
    _min?: WorkspaceMinAggregateInputType
    _max?: WorkspaceMaxAggregateInputType
  }

  export type WorkspaceGroupByOutputType = {
    id: string
    name: string
    description: string | null
    visibility: $Enums.WorkspaceVisibility
    premium: boolean
    createdAt: Date
    updatedAt: Date
    type: $Enums.WorkspaceType
    createdBy: string
    workspaceMembershipRestrictions: $Enums.MembershipRestrictions
    publicBoardCreation: $Enums.BoardCreationRestrictions
    workspaceBoardCreation: $Enums.BoardCreationRestrictions
    privateBoardCreation: $Enums.BoardCreationRestrictions
    publicBoardDeletion: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion: $Enums.BoardCreationRestrictions
    privateBoardDeletion: $Enums.BoardCreationRestrictions
    allowGuestSharing: $Enums.BoardSharing
    allowSlackIntegration: $Enums.SlackSharing
    _count: WorkspaceCountAggregateOutputType | null
    _min: WorkspaceMinAggregateOutputType | null
    _max: WorkspaceMaxAggregateOutputType | null
  }

  type GetWorkspaceGroupByPayload<T extends WorkspaceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkspaceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkspaceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
            : GetScalarType<T[P], WorkspaceGroupByOutputType[P]>
        }
      >
    >


  export type WorkspaceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    visibility?: boolean
    premium?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    createdBy?: boolean
    workspaceMembershipRestrictions?: boolean
    publicBoardCreation?: boolean
    workspaceBoardCreation?: boolean
    privateBoardCreation?: boolean
    publicBoardDeletion?: boolean
    workspaceBoardDeletion?: boolean
    privateBoardDeletion?: boolean
    allowGuestSharing?: boolean
    allowSlackIntegration?: boolean
    boards?: boolean | Workspace$boardsArgs<ExtArgs>
    workspaceMembers?: boolean | Workspace$workspaceMembersArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    visibility?: boolean
    premium?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    createdBy?: boolean
    workspaceMembershipRestrictions?: boolean
    publicBoardCreation?: boolean
    workspaceBoardCreation?: boolean
    privateBoardCreation?: boolean
    publicBoardDeletion?: boolean
    workspaceBoardDeletion?: boolean
    privateBoardDeletion?: boolean
    allowGuestSharing?: boolean
    allowSlackIntegration?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    visibility?: boolean
    premium?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    createdBy?: boolean
    workspaceMembershipRestrictions?: boolean
    publicBoardCreation?: boolean
    workspaceBoardCreation?: boolean
    privateBoardCreation?: boolean
    publicBoardDeletion?: boolean
    workspaceBoardDeletion?: boolean
    privateBoardDeletion?: boolean
    allowGuestSharing?: boolean
    allowSlackIntegration?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workspace"]>

  export type WorkspaceSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    visibility?: boolean
    premium?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    type?: boolean
    createdBy?: boolean
    workspaceMembershipRestrictions?: boolean
    publicBoardCreation?: boolean
    workspaceBoardCreation?: boolean
    privateBoardCreation?: boolean
    publicBoardDeletion?: boolean
    workspaceBoardDeletion?: boolean
    privateBoardDeletion?: boolean
    allowGuestSharing?: boolean
    allowSlackIntegration?: boolean
  }

  export type WorkspaceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "visibility" | "premium" | "createdAt" | "updatedAt" | "type" | "createdBy" | "workspaceMembershipRestrictions" | "publicBoardCreation" | "workspaceBoardCreation" | "privateBoardCreation" | "publicBoardDeletion" | "workspaceBoardDeletion" | "privateBoardDeletion" | "allowGuestSharing" | "allowSlackIntegration", ExtArgs["result"]["workspace"]>
  export type WorkspaceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    boards?: boolean | Workspace$boardsArgs<ExtArgs>
    workspaceMembers?: boolean | Workspace$workspaceMembersArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | WorkspaceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkspaceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WorkspaceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WorkspacePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Workspace"
    objects: {
      boards: Prisma.$BoardPayload<ExtArgs>[]
      workspaceMembers: Prisma.$WorkspaceMemberPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      visibility: $Enums.WorkspaceVisibility
      premium: boolean
      createdAt: Date
      updatedAt: Date
      type: $Enums.WorkspaceType
      createdBy: string
      workspaceMembershipRestrictions: $Enums.MembershipRestrictions
      publicBoardCreation: $Enums.BoardCreationRestrictions
      workspaceBoardCreation: $Enums.BoardCreationRestrictions
      privateBoardCreation: $Enums.BoardCreationRestrictions
      publicBoardDeletion: $Enums.BoardCreationRestrictions
      workspaceBoardDeletion: $Enums.BoardCreationRestrictions
      privateBoardDeletion: $Enums.BoardCreationRestrictions
      allowGuestSharing: $Enums.BoardSharing
      allowSlackIntegration: $Enums.SlackSharing
    }, ExtArgs["result"]["workspace"]>
    composites: {}
  }

  type WorkspaceGetPayload<S extends boolean | null | undefined | WorkspaceDefaultArgs> = $Result.GetResult<Prisma.$WorkspacePayload, S>

  type WorkspaceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkspaceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkspaceCountAggregateInputType | true
    }

  export interface WorkspaceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Workspace'], meta: { name: 'Workspace' } }
    /**
     * Find zero or one Workspace that matches the filter.
     * @param {WorkspaceFindUniqueArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkspaceFindUniqueArgs>(args: SelectSubset<T, WorkspaceFindUniqueArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Workspace that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkspaceFindUniqueOrThrowArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkspaceFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkspaceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workspace that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindFirstArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkspaceFindFirstArgs>(args?: SelectSubset<T, WorkspaceFindFirstArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Workspace that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindFirstOrThrowArgs} args - Arguments to find a Workspace
     * @example
     * // Get one Workspace
     * const workspace = await prisma.workspace.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkspaceFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkspaceFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Workspaces that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workspaces
     * const workspaces = await prisma.workspace.findMany()
     * 
     * // Get first 10 Workspaces
     * const workspaces = await prisma.workspace.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workspaceWithIdOnly = await prisma.workspace.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkspaceFindManyArgs>(args?: SelectSubset<T, WorkspaceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Workspace.
     * @param {WorkspaceCreateArgs} args - Arguments to create a Workspace.
     * @example
     * // Create one Workspace
     * const Workspace = await prisma.workspace.create({
     *   data: {
     *     // ... data to create a Workspace
     *   }
     * })
     * 
     */
    create<T extends WorkspaceCreateArgs>(args: SelectSubset<T, WorkspaceCreateArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Workspaces.
     * @param {WorkspaceCreateManyArgs} args - Arguments to create many Workspaces.
     * @example
     * // Create many Workspaces
     * const workspace = await prisma.workspace.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkspaceCreateManyArgs>(args?: SelectSubset<T, WorkspaceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workspaces and returns the data saved in the database.
     * @param {WorkspaceCreateManyAndReturnArgs} args - Arguments to create many Workspaces.
     * @example
     * // Create many Workspaces
     * const workspace = await prisma.workspace.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workspaces and only return the `id`
     * const workspaceWithIdOnly = await prisma.workspace.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkspaceCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkspaceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Workspace.
     * @param {WorkspaceDeleteArgs} args - Arguments to delete one Workspace.
     * @example
     * // Delete one Workspace
     * const Workspace = await prisma.workspace.delete({
     *   where: {
     *     // ... filter to delete one Workspace
     *   }
     * })
     * 
     */
    delete<T extends WorkspaceDeleteArgs>(args: SelectSubset<T, WorkspaceDeleteArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Workspace.
     * @param {WorkspaceUpdateArgs} args - Arguments to update one Workspace.
     * @example
     * // Update one Workspace
     * const workspace = await prisma.workspace.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkspaceUpdateArgs>(args: SelectSubset<T, WorkspaceUpdateArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Workspaces.
     * @param {WorkspaceDeleteManyArgs} args - Arguments to filter Workspaces to delete.
     * @example
     * // Delete a few Workspaces
     * const { count } = await prisma.workspace.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkspaceDeleteManyArgs>(args?: SelectSubset<T, WorkspaceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workspaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workspaces
     * const workspace = await prisma.workspace.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkspaceUpdateManyArgs>(args: SelectSubset<T, WorkspaceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workspaces and returns the data updated in the database.
     * @param {WorkspaceUpdateManyAndReturnArgs} args - Arguments to update many Workspaces.
     * @example
     * // Update many Workspaces
     * const workspace = await prisma.workspace.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workspaces and only return the `id`
     * const workspaceWithIdOnly = await prisma.workspace.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkspaceUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkspaceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Workspace.
     * @param {WorkspaceUpsertArgs} args - Arguments to update or create a Workspace.
     * @example
     * // Update or create a Workspace
     * const workspace = await prisma.workspace.upsert({
     *   create: {
     *     // ... data to create a Workspace
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workspace we want to update
     *   }
     * })
     */
    upsert<T extends WorkspaceUpsertArgs>(args: SelectSubset<T, WorkspaceUpsertArgs<ExtArgs>>): Prisma__WorkspaceClient<$Result.GetResult<Prisma.$WorkspacePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Workspaces.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceCountArgs} args - Arguments to filter Workspaces to count.
     * @example
     * // Count the number of Workspaces
     * const count = await prisma.workspace.count({
     *   where: {
     *     // ... the filter for the Workspaces we want to count
     *   }
     * })
    **/
    count<T extends WorkspaceCountArgs>(
      args?: Subset<T, WorkspaceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkspaceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workspace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkspaceAggregateArgs>(args: Subset<T, WorkspaceAggregateArgs>): Prisma.PrismaPromise<GetWorkspaceAggregateType<T>>

    /**
     * Group by Workspace.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkspaceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkspaceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkspaceGroupByArgs['orderBy'] }
        : { orderBy?: WorkspaceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkspaceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkspaceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Workspace model
   */
  readonly fields: WorkspaceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Workspace.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkspaceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    boards<T extends Workspace$boardsArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$boardsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workspaceMembers<T extends Workspace$workspaceMembersArgs<ExtArgs> = {}>(args?: Subset<T, Workspace$workspaceMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkspaceMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Workspace model
   */
  interface WorkspaceFieldRefs {
    readonly id: FieldRef<"Workspace", 'String'>
    readonly name: FieldRef<"Workspace", 'String'>
    readonly description: FieldRef<"Workspace", 'String'>
    readonly visibility: FieldRef<"Workspace", 'WorkspaceVisibility'>
    readonly premium: FieldRef<"Workspace", 'Boolean'>
    readonly createdAt: FieldRef<"Workspace", 'DateTime'>
    readonly updatedAt: FieldRef<"Workspace", 'DateTime'>
    readonly type: FieldRef<"Workspace", 'WorkspaceType'>
    readonly createdBy: FieldRef<"Workspace", 'String'>
    readonly workspaceMembershipRestrictions: FieldRef<"Workspace", 'MembershipRestrictions'>
    readonly publicBoardCreation: FieldRef<"Workspace", 'BoardCreationRestrictions'>
    readonly workspaceBoardCreation: FieldRef<"Workspace", 'BoardCreationRestrictions'>
    readonly privateBoardCreation: FieldRef<"Workspace", 'BoardCreationRestrictions'>
    readonly publicBoardDeletion: FieldRef<"Workspace", 'BoardCreationRestrictions'>
    readonly workspaceBoardDeletion: FieldRef<"Workspace", 'BoardCreationRestrictions'>
    readonly privateBoardDeletion: FieldRef<"Workspace", 'BoardCreationRestrictions'>
    readonly allowGuestSharing: FieldRef<"Workspace", 'BoardSharing'>
    readonly allowSlackIntegration: FieldRef<"Workspace", 'SlackSharing'>
  }
    

  // Custom InputTypes
  /**
   * Workspace findUnique
   */
  export type WorkspaceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace findUniqueOrThrow
   */
  export type WorkspaceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace findFirst
   */
  export type WorkspaceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workspaces.
     */
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace findFirstOrThrow
   */
  export type WorkspaceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspace to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Workspaces.
     */
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace findMany
   */
  export type WorkspaceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter, which Workspaces to fetch.
     */
    where?: WorkspaceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Workspaces to fetch.
     */
    orderBy?: WorkspaceOrderByWithRelationInput | WorkspaceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Workspaces.
     */
    cursor?: WorkspaceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Workspaces from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Workspaces.
     */
    skip?: number
    distinct?: WorkspaceScalarFieldEnum | WorkspaceScalarFieldEnum[]
  }

  /**
   * Workspace create
   */
  export type WorkspaceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The data needed to create a Workspace.
     */
    data: XOR<WorkspaceCreateInput, WorkspaceUncheckedCreateInput>
  }

  /**
   * Workspace createMany
   */
  export type WorkspaceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Workspaces.
     */
    data: WorkspaceCreateManyInput | WorkspaceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Workspace createManyAndReturn
   */
  export type WorkspaceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * The data used to create many Workspaces.
     */
    data: WorkspaceCreateManyInput | WorkspaceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workspace update
   */
  export type WorkspaceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The data needed to update a Workspace.
     */
    data: XOR<WorkspaceUpdateInput, WorkspaceUncheckedUpdateInput>
    /**
     * Choose, which Workspace to update.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace updateMany
   */
  export type WorkspaceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Workspaces.
     */
    data: XOR<WorkspaceUpdateManyMutationInput, WorkspaceUncheckedUpdateManyInput>
    /**
     * Filter which Workspaces to update
     */
    where?: WorkspaceWhereInput
    /**
     * Limit how many Workspaces to update.
     */
    limit?: number
  }

  /**
   * Workspace updateManyAndReturn
   */
  export type WorkspaceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * The data used to update Workspaces.
     */
    data: XOR<WorkspaceUpdateManyMutationInput, WorkspaceUncheckedUpdateManyInput>
    /**
     * Filter which Workspaces to update
     */
    where?: WorkspaceWhereInput
    /**
     * Limit how many Workspaces to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Workspace upsert
   */
  export type WorkspaceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * The filter to search for the Workspace to update in case it exists.
     */
    where: WorkspaceWhereUniqueInput
    /**
     * In case the Workspace found by the `where` argument doesn't exist, create a new Workspace with this data.
     */
    create: XOR<WorkspaceCreateInput, WorkspaceUncheckedCreateInput>
    /**
     * In case the Workspace was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkspaceUpdateInput, WorkspaceUncheckedUpdateInput>
  }

  /**
   * Workspace delete
   */
  export type WorkspaceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
    /**
     * Filter which Workspace to delete.
     */
    where: WorkspaceWhereUniqueInput
  }

  /**
   * Workspace deleteMany
   */
  export type WorkspaceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Workspaces to delete
     */
    where?: WorkspaceWhereInput
    /**
     * Limit how many Workspaces to delete.
     */
    limit?: number
  }

  /**
   * Workspace.boards
   */
  export type Workspace$boardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Board
     */
    select?: BoardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Board
     */
    omit?: BoardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardInclude<ExtArgs> | null
    where?: BoardWhereInput
    orderBy?: BoardOrderByWithRelationInput | BoardOrderByWithRelationInput[]
    cursor?: BoardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BoardScalarFieldEnum | BoardScalarFieldEnum[]
  }

  /**
   * Workspace.workspaceMembers
   */
  export type Workspace$workspaceMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkspaceMember
     */
    select?: WorkspaceMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkspaceMember
     */
    omit?: WorkspaceMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceMemberInclude<ExtArgs> | null
    where?: WorkspaceMemberWhereInput
    orderBy?: WorkspaceMemberOrderByWithRelationInput | WorkspaceMemberOrderByWithRelationInput[]
    cursor?: WorkspaceMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkspaceMemberScalarFieldEnum | WorkspaceMemberScalarFieldEnum[]
  }

  /**
   * Workspace without action
   */
  export type WorkspaceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workspace
     */
    select?: WorkspaceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Workspace
     */
    omit?: WorkspaceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkspaceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ActivityLogScalarFieldEnum: {
    id: 'id',
    boardId: 'boardId',
    cardId: 'cardId',
    userId: 'userId',
    action: 'action',
    payload: 'payload',
    createdAt: 'createdAt'
  };

  export type ActivityLogScalarFieldEnum = (typeof ActivityLogScalarFieldEnum)[keyof typeof ActivityLogScalarFieldEnum]


  export const AttachmentScalarFieldEnum: {
    id: 'id',
    cardId: 'cardId',
    userId: 'userId',
    url: 'url',
    filename: 'filename',
    bytes: 'bytes',
    meta: 'meta',
    createdAt: 'createdAt'
  };

  export type AttachmentScalarFieldEnum = (typeof AttachmentScalarFieldEnum)[keyof typeof AttachmentScalarFieldEnum]


  export const BoardMemberScalarFieldEnum: {
    boardId: 'boardId',
    userId: 'userId',
    role: 'role',
    joinedAt: 'joinedAt'
  };

  export type BoardMemberScalarFieldEnum = (typeof BoardMemberScalarFieldEnum)[keyof typeof BoardMemberScalarFieldEnum]


  export const BoardScalarFieldEnum: {
    id: 'id',
    workspaceId: 'workspaceId',
    name: 'name',
    description: 'description',
    createdBy: 'createdBy',
    allowCovers: 'allowCovers',
    showComplete: 'showComplete',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastActivityAt: 'lastActivityAt',
    background: 'background',
    visibility: 'visibility',
    memberManage: 'memberManage',
    commenting: 'commenting'
  };

  export type BoardScalarFieldEnum = (typeof BoardScalarFieldEnum)[keyof typeof BoardScalarFieldEnum]


  export const CardAssigneeScalarFieldEnum: {
    cardId: 'cardId',
    userId: 'userId'
  };

  export type CardAssigneeScalarFieldEnum = (typeof CardAssigneeScalarFieldEnum)[keyof typeof CardAssigneeScalarFieldEnum]


  export const CardLabelScalarFieldEnum: {
    cardId: 'cardId',
    labelId: 'labelId'
  };

  export type CardLabelScalarFieldEnum = (typeof CardLabelScalarFieldEnum)[keyof typeof CardLabelScalarFieldEnum]


  export const CardWatcherScalarFieldEnum: {
    cardId: 'cardId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type CardWatcherScalarFieldEnum = (typeof CardWatcherScalarFieldEnum)[keyof typeof CardWatcherScalarFieldEnum]


  export const CardScalarFieldEnum: {
    id: 'id',
    listId: 'listId',
    title: 'title',
    description: 'description',
    dueDate: 'dueDate',
    startDate: 'startDate',
    position: 'position',
    isArchived: 'isArchived',
    createdBy: 'createdBy',
    coverImageUrl: 'coverImageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CardScalarFieldEnum = (typeof CardScalarFieldEnum)[keyof typeof CardScalarFieldEnum]


  export const ChecklistItemAssigneeScalarFieldEnum: {
    itemId: 'itemId',
    userId: 'userId'
  };

  export type ChecklistItemAssigneeScalarFieldEnum = (typeof ChecklistItemAssigneeScalarFieldEnum)[keyof typeof ChecklistItemAssigneeScalarFieldEnum]


  export const ChecklistItemScalarFieldEnum: {
    id: 'id',
    checklistId: 'checklistId',
    text: 'text',
    isCompleted: 'isCompleted',
    dueDate: 'dueDate',
    position: 'position'
  };

  export type ChecklistItemScalarFieldEnum = (typeof ChecklistItemScalarFieldEnum)[keyof typeof ChecklistItemScalarFieldEnum]


  export const ChecklistScalarFieldEnum: {
    id: 'id',
    cardId: 'cardId',
    title: 'title',
    position: 'position'
  };

  export type ChecklistScalarFieldEnum = (typeof ChecklistScalarFieldEnum)[keyof typeof ChecklistScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    cardId: 'cardId',
    userId: 'userId',
    text: 'text',
    createdAt: 'createdAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const LabelScalarFieldEnum: {
    id: 'id',
    boardId: 'boardId',
    name: 'name',
    color: 'color'
  };

  export type LabelScalarFieldEnum = (typeof LabelScalarFieldEnum)[keyof typeof LabelScalarFieldEnum]


  export const ListWatcherScalarFieldEnum: {
    listId: 'listId',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type ListWatcherScalarFieldEnum = (typeof ListWatcherScalarFieldEnum)[keyof typeof ListWatcherScalarFieldEnum]


  export const ListScalarFieldEnum: {
    id: 'id',
    boardId: 'boardId',
    name: 'name',
    position: 'position',
    isArchived: 'isArchived',
    subscribed: 'subscribed'
  };

  export type ListScalarFieldEnum = (typeof ListScalarFieldEnum)[keyof typeof ListScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    clerkId: 'clerkId',
    email: 'email',
    username: 'username',
    fullName: 'fullName',
    avatarUrl: 'avatarUrl',
    theme: 'theme',
    recentlyViewedBoards: 'recentlyViewedBoards',
    emailNotification: 'emailNotification',
    pushNotification: 'pushNotification',
    createdAt: 'createdAt',
    bio: 'bio'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WorkspaceMemberScalarFieldEnum: {
    workspaceId: 'workspaceId',
    userId: 'userId',
    role: 'role',
    joinedAt: 'joinedAt'
  };

  export type WorkspaceMemberScalarFieldEnum = (typeof WorkspaceMemberScalarFieldEnum)[keyof typeof WorkspaceMemberScalarFieldEnum]


  export const WorkspaceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    visibility: 'visibility',
    premium: 'premium',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    type: 'type',
    createdBy: 'createdBy',
    workspaceMembershipRestrictions: 'workspaceMembershipRestrictions',
    publicBoardCreation: 'publicBoardCreation',
    workspaceBoardCreation: 'workspaceBoardCreation',
    privateBoardCreation: 'privateBoardCreation',
    publicBoardDeletion: 'publicBoardDeletion',
    workspaceBoardDeletion: 'workspaceBoardDeletion',
    privateBoardDeletion: 'privateBoardDeletion',
    allowGuestSharing: 'allowGuestSharing',
    allowSlackIntegration: 'allowSlackIntegration'
  };

  export type WorkspaceScalarFieldEnum = (typeof WorkspaceScalarFieldEnum)[keyof typeof WorkspaceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'ActivityAction'
   */
  export type EnumActivityActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActivityAction'>
    


  /**
   * Reference to a field of type 'ActivityAction[]'
   */
  export type ListEnumActivityActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActivityAction[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'BoardRole'
   */
  export type EnumBoardRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardRole'>
    


  /**
   * Reference to a field of type 'BoardRole[]'
   */
  export type ListEnumBoardRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BoardBackground'
   */
  export type EnumBoardBackgroundFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardBackground'>
    


  /**
   * Reference to a field of type 'BoardBackground[]'
   */
  export type ListEnumBoardBackgroundFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardBackground[]'>
    


  /**
   * Reference to a field of type 'BoardVisibility'
   */
  export type EnumBoardVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardVisibility'>
    


  /**
   * Reference to a field of type 'BoardVisibility[]'
   */
  export type ListEnumBoardVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardVisibility[]'>
    


  /**
   * Reference to a field of type 'MemberManageRestrictions'
   */
  export type EnumMemberManageRestrictionsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemberManageRestrictions'>
    


  /**
   * Reference to a field of type 'MemberManageRestrictions[]'
   */
  export type ListEnumMemberManageRestrictionsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemberManageRestrictions[]'>
    


  /**
   * Reference to a field of type 'CommentingRestrictions'
   */
  export type EnumCommentingRestrictionsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommentingRestrictions'>
    


  /**
   * Reference to a field of type 'CommentingRestrictions[]'
   */
  export type ListEnumCommentingRestrictionsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommentingRestrictions[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Color'
   */
  export type EnumColorFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Color'>
    


  /**
   * Reference to a field of type 'Color[]'
   */
  export type ListEnumColorFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Color[]'>
    


  /**
   * Reference to a field of type 'Theme'
   */
  export type EnumThemeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Theme'>
    


  /**
   * Reference to a field of type 'Theme[]'
   */
  export type ListEnumThemeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Theme[]'>
    


  /**
   * Reference to a field of type 'WorkspaceRole'
   */
  export type EnumWorkspaceRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkspaceRole'>
    


  /**
   * Reference to a field of type 'WorkspaceRole[]'
   */
  export type ListEnumWorkspaceRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkspaceRole[]'>
    


  /**
   * Reference to a field of type 'WorkspaceVisibility'
   */
  export type EnumWorkspaceVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkspaceVisibility'>
    


  /**
   * Reference to a field of type 'WorkspaceVisibility[]'
   */
  export type ListEnumWorkspaceVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkspaceVisibility[]'>
    


  /**
   * Reference to a field of type 'WorkspaceType'
   */
  export type EnumWorkspaceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkspaceType'>
    


  /**
   * Reference to a field of type 'WorkspaceType[]'
   */
  export type ListEnumWorkspaceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkspaceType[]'>
    


  /**
   * Reference to a field of type 'MembershipRestrictions'
   */
  export type EnumMembershipRestrictionsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MembershipRestrictions'>
    


  /**
   * Reference to a field of type 'MembershipRestrictions[]'
   */
  export type ListEnumMembershipRestrictionsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MembershipRestrictions[]'>
    


  /**
   * Reference to a field of type 'BoardCreationRestrictions'
   */
  export type EnumBoardCreationRestrictionsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardCreationRestrictions'>
    


  /**
   * Reference to a field of type 'BoardCreationRestrictions[]'
   */
  export type ListEnumBoardCreationRestrictionsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardCreationRestrictions[]'>
    


  /**
   * Reference to a field of type 'BoardSharing'
   */
  export type EnumBoardSharingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardSharing'>
    


  /**
   * Reference to a field of type 'BoardSharing[]'
   */
  export type ListEnumBoardSharingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BoardSharing[]'>
    


  /**
   * Reference to a field of type 'SlackSharing'
   */
  export type EnumSlackSharingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SlackSharing'>
    


  /**
   * Reference to a field of type 'SlackSharing[]'
   */
  export type ListEnumSlackSharingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SlackSharing[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ActivityLogWhereInput = {
    AND?: ActivityLogWhereInput | ActivityLogWhereInput[]
    OR?: ActivityLogWhereInput[]
    NOT?: ActivityLogWhereInput | ActivityLogWhereInput[]
    id?: UuidFilter<"ActivityLog"> | string
    boardId?: UuidFilter<"ActivityLog"> | string
    cardId?: UuidNullableFilter<"ActivityLog"> | string | null
    userId?: UuidNullableFilter<"ActivityLog"> | string | null
    action?: EnumActivityActionFilter<"ActivityLog"> | $Enums.ActivityAction
    payload?: JsonNullableFilter<"ActivityLog">
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
    board?: XOR<BoardScalarRelationFilter, BoardWhereInput>
    card?: XOR<CardNullableScalarRelationFilter, CardWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ActivityLogOrderByWithRelationInput = {
    id?: SortOrder
    boardId?: SortOrder
    cardId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    payload?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    board?: BoardOrderByWithRelationInput
    card?: CardOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ActivityLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityLogWhereInput | ActivityLogWhereInput[]
    OR?: ActivityLogWhereInput[]
    NOT?: ActivityLogWhereInput | ActivityLogWhereInput[]
    boardId?: UuidFilter<"ActivityLog"> | string
    cardId?: UuidNullableFilter<"ActivityLog"> | string | null
    userId?: UuidNullableFilter<"ActivityLog"> | string | null
    action?: EnumActivityActionFilter<"ActivityLog"> | $Enums.ActivityAction
    payload?: JsonNullableFilter<"ActivityLog">
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
    board?: XOR<BoardScalarRelationFilter, BoardWhereInput>
    card?: XOR<CardNullableScalarRelationFilter, CardWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ActivityLogOrderByWithAggregationInput = {
    id?: SortOrder
    boardId?: SortOrder
    cardId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    payload?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ActivityLogCountOrderByAggregateInput
    _max?: ActivityLogMaxOrderByAggregateInput
    _min?: ActivityLogMinOrderByAggregateInput
  }

  export type ActivityLogScalarWhereWithAggregatesInput = {
    AND?: ActivityLogScalarWhereWithAggregatesInput | ActivityLogScalarWhereWithAggregatesInput[]
    OR?: ActivityLogScalarWhereWithAggregatesInput[]
    NOT?: ActivityLogScalarWhereWithAggregatesInput | ActivityLogScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ActivityLog"> | string
    boardId?: UuidWithAggregatesFilter<"ActivityLog"> | string
    cardId?: UuidNullableWithAggregatesFilter<"ActivityLog"> | string | null
    userId?: UuidNullableWithAggregatesFilter<"ActivityLog"> | string | null
    action?: EnumActivityActionWithAggregatesFilter<"ActivityLog"> | $Enums.ActivityAction
    payload?: JsonNullableWithAggregatesFilter<"ActivityLog">
    createdAt?: DateTimeWithAggregatesFilter<"ActivityLog"> | Date | string
  }

  export type AttachmentWhereInput = {
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    id?: UuidFilter<"Attachment"> | string
    cardId?: UuidFilter<"Attachment"> | string
    userId?: UuidFilter<"Attachment"> | string
    url?: StringFilter<"Attachment"> | string
    filename?: StringFilter<"Attachment"> | string
    bytes?: BigIntNullableFilter<"Attachment"> | bigint | number | null
    meta?: JsonNullableFilter<"Attachment">
    createdAt?: DateTimeFilter<"Attachment"> | Date | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AttachmentOrderByWithRelationInput = {
    id?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    url?: SortOrder
    filename?: SortOrder
    bytes?: SortOrderInput | SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    card?: CardOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type AttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    cardId?: UuidFilter<"Attachment"> | string
    userId?: UuidFilter<"Attachment"> | string
    url?: StringFilter<"Attachment"> | string
    filename?: StringFilter<"Attachment"> | string
    bytes?: BigIntNullableFilter<"Attachment"> | bigint | number | null
    meta?: JsonNullableFilter<"Attachment">
    createdAt?: DateTimeFilter<"Attachment"> | Date | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    url?: SortOrder
    filename?: SortOrder
    bytes?: SortOrderInput | SortOrder
    meta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AttachmentCountOrderByAggregateInput
    _avg?: AttachmentAvgOrderByAggregateInput
    _max?: AttachmentMaxOrderByAggregateInput
    _min?: AttachmentMinOrderByAggregateInput
    _sum?: AttachmentSumOrderByAggregateInput
  }

  export type AttachmentScalarWhereWithAggregatesInput = {
    AND?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    OR?: AttachmentScalarWhereWithAggregatesInput[]
    NOT?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Attachment"> | string
    cardId?: UuidWithAggregatesFilter<"Attachment"> | string
    userId?: UuidWithAggregatesFilter<"Attachment"> | string
    url?: StringWithAggregatesFilter<"Attachment"> | string
    filename?: StringWithAggregatesFilter<"Attachment"> | string
    bytes?: BigIntNullableWithAggregatesFilter<"Attachment"> | bigint | number | null
    meta?: JsonNullableWithAggregatesFilter<"Attachment">
    createdAt?: DateTimeWithAggregatesFilter<"Attachment"> | Date | string
  }

  export type BoardMemberWhereInput = {
    AND?: BoardMemberWhereInput | BoardMemberWhereInput[]
    OR?: BoardMemberWhereInput[]
    NOT?: BoardMemberWhereInput | BoardMemberWhereInput[]
    boardId?: UuidFilter<"BoardMember"> | string
    userId?: UuidFilter<"BoardMember"> | string
    role?: EnumBoardRoleFilter<"BoardMember"> | $Enums.BoardRole
    joinedAt?: DateTimeFilter<"BoardMember"> | Date | string
    board?: XOR<BoardScalarRelationFilter, BoardWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BoardMemberOrderByWithRelationInput = {
    boardId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    board?: BoardOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type BoardMemberWhereUniqueInput = Prisma.AtLeast<{
    boardId_userId?: BoardMemberBoardIdUserIdCompoundUniqueInput
    AND?: BoardMemberWhereInput | BoardMemberWhereInput[]
    OR?: BoardMemberWhereInput[]
    NOT?: BoardMemberWhereInput | BoardMemberWhereInput[]
    boardId?: UuidFilter<"BoardMember"> | string
    userId?: UuidFilter<"BoardMember"> | string
    role?: EnumBoardRoleFilter<"BoardMember"> | $Enums.BoardRole
    joinedAt?: DateTimeFilter<"BoardMember"> | Date | string
    board?: XOR<BoardScalarRelationFilter, BoardWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "boardId_userId">

  export type BoardMemberOrderByWithAggregationInput = {
    boardId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    _count?: BoardMemberCountOrderByAggregateInput
    _max?: BoardMemberMaxOrderByAggregateInput
    _min?: BoardMemberMinOrderByAggregateInput
  }

  export type BoardMemberScalarWhereWithAggregatesInput = {
    AND?: BoardMemberScalarWhereWithAggregatesInput | BoardMemberScalarWhereWithAggregatesInput[]
    OR?: BoardMemberScalarWhereWithAggregatesInput[]
    NOT?: BoardMemberScalarWhereWithAggregatesInput | BoardMemberScalarWhereWithAggregatesInput[]
    boardId?: UuidWithAggregatesFilter<"BoardMember"> | string
    userId?: UuidWithAggregatesFilter<"BoardMember"> | string
    role?: EnumBoardRoleWithAggregatesFilter<"BoardMember"> | $Enums.BoardRole
    joinedAt?: DateTimeWithAggregatesFilter<"BoardMember"> | Date | string
  }

  export type BoardWhereInput = {
    AND?: BoardWhereInput | BoardWhereInput[]
    OR?: BoardWhereInput[]
    NOT?: BoardWhereInput | BoardWhereInput[]
    id?: UuidFilter<"Board"> | string
    workspaceId?: UuidFilter<"Board"> | string
    name?: StringFilter<"Board"> | string
    description?: StringNullableFilter<"Board"> | string | null
    createdBy?: UuidFilter<"Board"> | string
    allowCovers?: BoolFilter<"Board"> | boolean
    showComplete?: BoolFilter<"Board"> | boolean
    createdAt?: DateTimeFilter<"Board"> | Date | string
    updatedAt?: DateTimeFilter<"Board"> | Date | string
    lastActivityAt?: DateTimeNullableFilter<"Board"> | Date | string | null
    background?: EnumBoardBackgroundFilter<"Board"> | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFilter<"Board"> | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFilter<"Board"> | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFilter<"Board"> | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogListRelationFilter
    boardMembers?: BoardMemberListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    labels?: LabelListRelationFilter
    lists?: ListListRelationFilter
  }

  export type BoardOrderByWithRelationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    allowCovers?: SortOrder
    showComplete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastActivityAt?: SortOrderInput | SortOrder
    background?: SortOrder
    visibility?: SortOrder
    memberManage?: SortOrder
    commenting?: SortOrder
    activityLogs?: ActivityLogOrderByRelationAggregateInput
    boardMembers?: BoardMemberOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
    workspace?: WorkspaceOrderByWithRelationInput
    labels?: LabelOrderByRelationAggregateInput
    lists?: ListOrderByRelationAggregateInput
  }

  export type BoardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BoardWhereInput | BoardWhereInput[]
    OR?: BoardWhereInput[]
    NOT?: BoardWhereInput | BoardWhereInput[]
    workspaceId?: UuidFilter<"Board"> | string
    name?: StringFilter<"Board"> | string
    description?: StringNullableFilter<"Board"> | string | null
    createdBy?: UuidFilter<"Board"> | string
    allowCovers?: BoolFilter<"Board"> | boolean
    showComplete?: BoolFilter<"Board"> | boolean
    createdAt?: DateTimeFilter<"Board"> | Date | string
    updatedAt?: DateTimeFilter<"Board"> | Date | string
    lastActivityAt?: DateTimeNullableFilter<"Board"> | Date | string | null
    background?: EnumBoardBackgroundFilter<"Board"> | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFilter<"Board"> | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFilter<"Board"> | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFilter<"Board"> | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogListRelationFilter
    boardMembers?: BoardMemberListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
    labels?: LabelListRelationFilter
    lists?: ListListRelationFilter
  }, "id">

  export type BoardOrderByWithAggregationInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    allowCovers?: SortOrder
    showComplete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastActivityAt?: SortOrderInput | SortOrder
    background?: SortOrder
    visibility?: SortOrder
    memberManage?: SortOrder
    commenting?: SortOrder
    _count?: BoardCountOrderByAggregateInput
    _max?: BoardMaxOrderByAggregateInput
    _min?: BoardMinOrderByAggregateInput
  }

  export type BoardScalarWhereWithAggregatesInput = {
    AND?: BoardScalarWhereWithAggregatesInput | BoardScalarWhereWithAggregatesInput[]
    OR?: BoardScalarWhereWithAggregatesInput[]
    NOT?: BoardScalarWhereWithAggregatesInput | BoardScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Board"> | string
    workspaceId?: UuidWithAggregatesFilter<"Board"> | string
    name?: StringWithAggregatesFilter<"Board"> | string
    description?: StringNullableWithAggregatesFilter<"Board"> | string | null
    createdBy?: UuidWithAggregatesFilter<"Board"> | string
    allowCovers?: BoolWithAggregatesFilter<"Board"> | boolean
    showComplete?: BoolWithAggregatesFilter<"Board"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Board"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Board"> | Date | string
    lastActivityAt?: DateTimeNullableWithAggregatesFilter<"Board"> | Date | string | null
    background?: EnumBoardBackgroundWithAggregatesFilter<"Board"> | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityWithAggregatesFilter<"Board"> | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsWithAggregatesFilter<"Board"> | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsWithAggregatesFilter<"Board"> | $Enums.CommentingRestrictions
  }

  export type CardAssigneeWhereInput = {
    AND?: CardAssigneeWhereInput | CardAssigneeWhereInput[]
    OR?: CardAssigneeWhereInput[]
    NOT?: CardAssigneeWhereInput | CardAssigneeWhereInput[]
    cardId?: UuidFilter<"CardAssignee"> | string
    userId?: UuidFilter<"CardAssignee"> | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CardAssigneeOrderByWithRelationInput = {
    cardId?: SortOrder
    userId?: SortOrder
    card?: CardOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CardAssigneeWhereUniqueInput = Prisma.AtLeast<{
    cardId_userId?: CardAssigneeCardIdUserIdCompoundUniqueInput
    AND?: CardAssigneeWhereInput | CardAssigneeWhereInput[]
    OR?: CardAssigneeWhereInput[]
    NOT?: CardAssigneeWhereInput | CardAssigneeWhereInput[]
    cardId?: UuidFilter<"CardAssignee"> | string
    userId?: UuidFilter<"CardAssignee"> | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "cardId_userId">

  export type CardAssigneeOrderByWithAggregationInput = {
    cardId?: SortOrder
    userId?: SortOrder
    _count?: CardAssigneeCountOrderByAggregateInput
    _max?: CardAssigneeMaxOrderByAggregateInput
    _min?: CardAssigneeMinOrderByAggregateInput
  }

  export type CardAssigneeScalarWhereWithAggregatesInput = {
    AND?: CardAssigneeScalarWhereWithAggregatesInput | CardAssigneeScalarWhereWithAggregatesInput[]
    OR?: CardAssigneeScalarWhereWithAggregatesInput[]
    NOT?: CardAssigneeScalarWhereWithAggregatesInput | CardAssigneeScalarWhereWithAggregatesInput[]
    cardId?: UuidWithAggregatesFilter<"CardAssignee"> | string
    userId?: UuidWithAggregatesFilter<"CardAssignee"> | string
  }

  export type CardLabelWhereInput = {
    AND?: CardLabelWhereInput | CardLabelWhereInput[]
    OR?: CardLabelWhereInput[]
    NOT?: CardLabelWhereInput | CardLabelWhereInput[]
    cardId?: UuidFilter<"CardLabel"> | string
    labelId?: UuidFilter<"CardLabel"> | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    label?: XOR<LabelScalarRelationFilter, LabelWhereInput>
  }

  export type CardLabelOrderByWithRelationInput = {
    cardId?: SortOrder
    labelId?: SortOrder
    card?: CardOrderByWithRelationInput
    label?: LabelOrderByWithRelationInput
  }

  export type CardLabelWhereUniqueInput = Prisma.AtLeast<{
    cardId_labelId?: CardLabelCardIdLabelIdCompoundUniqueInput
    AND?: CardLabelWhereInput | CardLabelWhereInput[]
    OR?: CardLabelWhereInput[]
    NOT?: CardLabelWhereInput | CardLabelWhereInput[]
    cardId?: UuidFilter<"CardLabel"> | string
    labelId?: UuidFilter<"CardLabel"> | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    label?: XOR<LabelScalarRelationFilter, LabelWhereInput>
  }, "cardId_labelId">

  export type CardLabelOrderByWithAggregationInput = {
    cardId?: SortOrder
    labelId?: SortOrder
    _count?: CardLabelCountOrderByAggregateInput
    _max?: CardLabelMaxOrderByAggregateInput
    _min?: CardLabelMinOrderByAggregateInput
  }

  export type CardLabelScalarWhereWithAggregatesInput = {
    AND?: CardLabelScalarWhereWithAggregatesInput | CardLabelScalarWhereWithAggregatesInput[]
    OR?: CardLabelScalarWhereWithAggregatesInput[]
    NOT?: CardLabelScalarWhereWithAggregatesInput | CardLabelScalarWhereWithAggregatesInput[]
    cardId?: UuidWithAggregatesFilter<"CardLabel"> | string
    labelId?: UuidWithAggregatesFilter<"CardLabel"> | string
  }

  export type CardWatcherWhereInput = {
    AND?: CardWatcherWhereInput | CardWatcherWhereInput[]
    OR?: CardWatcherWhereInput[]
    NOT?: CardWatcherWhereInput | CardWatcherWhereInput[]
    cardId?: UuidFilter<"CardWatcher"> | string
    userId?: UuidFilter<"CardWatcher"> | string
    createdAt?: DateTimeFilter<"CardWatcher"> | Date | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CardWatcherOrderByWithRelationInput = {
    cardId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    card?: CardOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CardWatcherWhereUniqueInput = Prisma.AtLeast<{
    cardId_userId?: CardWatcherCardIdUserIdCompoundUniqueInput
    AND?: CardWatcherWhereInput | CardWatcherWhereInput[]
    OR?: CardWatcherWhereInput[]
    NOT?: CardWatcherWhereInput | CardWatcherWhereInput[]
    cardId?: UuidFilter<"CardWatcher"> | string
    userId?: UuidFilter<"CardWatcher"> | string
    createdAt?: DateTimeFilter<"CardWatcher"> | Date | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "cardId_userId">

  export type CardWatcherOrderByWithAggregationInput = {
    cardId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: CardWatcherCountOrderByAggregateInput
    _max?: CardWatcherMaxOrderByAggregateInput
    _min?: CardWatcherMinOrderByAggregateInput
  }

  export type CardWatcherScalarWhereWithAggregatesInput = {
    AND?: CardWatcherScalarWhereWithAggregatesInput | CardWatcherScalarWhereWithAggregatesInput[]
    OR?: CardWatcherScalarWhereWithAggregatesInput[]
    NOT?: CardWatcherScalarWhereWithAggregatesInput | CardWatcherScalarWhereWithAggregatesInput[]
    cardId?: UuidWithAggregatesFilter<"CardWatcher"> | string
    userId?: UuidWithAggregatesFilter<"CardWatcher"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CardWatcher"> | Date | string
  }

  export type CardWhereInput = {
    AND?: CardWhereInput | CardWhereInput[]
    OR?: CardWhereInput[]
    NOT?: CardWhereInput | CardWhereInput[]
    id?: UuidFilter<"Card"> | string
    listId?: UuidFilter<"Card"> | string
    title?: StringFilter<"Card"> | string
    description?: StringNullableFilter<"Card"> | string | null
    dueDate?: DateTimeNullableFilter<"Card"> | Date | string | null
    startDate?: DateTimeNullableFilter<"Card"> | Date | string | null
    position?: DecimalFilter<"Card"> | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFilter<"Card"> | boolean
    createdBy?: UuidFilter<"Card"> | string
    coverImageUrl?: StringNullableFilter<"Card"> | string | null
    createdAt?: DateTimeFilter<"Card"> | Date | string
    updatedAt?: DateTimeFilter<"Card"> | Date | string
    activityLogs?: ActivityLogListRelationFilter
    attachments?: AttachmentListRelationFilter
    assignees?: CardAssigneeListRelationFilter
    cardLabels?: CardLabelListRelationFilter
    watchers?: CardWatcherListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    list?: XOR<ListScalarRelationFilter, ListWhereInput>
    checklists?: ChecklistListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type CardOrderByWithRelationInput = {
    id?: SortOrder
    listId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    position?: SortOrder
    isArchived?: SortOrder
    createdBy?: SortOrder
    coverImageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activityLogs?: ActivityLogOrderByRelationAggregateInput
    attachments?: AttachmentOrderByRelationAggregateInput
    assignees?: CardAssigneeOrderByRelationAggregateInput
    cardLabels?: CardLabelOrderByRelationAggregateInput
    watchers?: CardWatcherOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
    list?: ListOrderByWithRelationInput
    checklists?: ChecklistOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type CardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    listId_position?: CardListIdPositionCompoundUniqueInput
    AND?: CardWhereInput | CardWhereInput[]
    OR?: CardWhereInput[]
    NOT?: CardWhereInput | CardWhereInput[]
    listId?: UuidFilter<"Card"> | string
    title?: StringFilter<"Card"> | string
    description?: StringNullableFilter<"Card"> | string | null
    dueDate?: DateTimeNullableFilter<"Card"> | Date | string | null
    startDate?: DateTimeNullableFilter<"Card"> | Date | string | null
    position?: DecimalFilter<"Card"> | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFilter<"Card"> | boolean
    createdBy?: UuidFilter<"Card"> | string
    coverImageUrl?: StringNullableFilter<"Card"> | string | null
    createdAt?: DateTimeFilter<"Card"> | Date | string
    updatedAt?: DateTimeFilter<"Card"> | Date | string
    activityLogs?: ActivityLogListRelationFilter
    attachments?: AttachmentListRelationFilter
    assignees?: CardAssigneeListRelationFilter
    cardLabels?: CardLabelListRelationFilter
    watchers?: CardWatcherListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    list?: XOR<ListScalarRelationFilter, ListWhereInput>
    checklists?: ChecklistListRelationFilter
    comments?: CommentListRelationFilter
  }, "id" | "listId_position">

  export type CardOrderByWithAggregationInput = {
    id?: SortOrder
    listId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    position?: SortOrder
    isArchived?: SortOrder
    createdBy?: SortOrder
    coverImageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CardCountOrderByAggregateInput
    _avg?: CardAvgOrderByAggregateInput
    _max?: CardMaxOrderByAggregateInput
    _min?: CardMinOrderByAggregateInput
    _sum?: CardSumOrderByAggregateInput
  }

  export type CardScalarWhereWithAggregatesInput = {
    AND?: CardScalarWhereWithAggregatesInput | CardScalarWhereWithAggregatesInput[]
    OR?: CardScalarWhereWithAggregatesInput[]
    NOT?: CardScalarWhereWithAggregatesInput | CardScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Card"> | string
    listId?: UuidWithAggregatesFilter<"Card"> | string
    title?: StringWithAggregatesFilter<"Card"> | string
    description?: StringNullableWithAggregatesFilter<"Card"> | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"Card"> | Date | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"Card"> | Date | string | null
    position?: DecimalWithAggregatesFilter<"Card"> | Decimal | DecimalJsLike | number | string
    isArchived?: BoolWithAggregatesFilter<"Card"> | boolean
    createdBy?: UuidWithAggregatesFilter<"Card"> | string
    coverImageUrl?: StringNullableWithAggregatesFilter<"Card"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Card"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Card"> | Date | string
  }

  export type ChecklistItemAssigneeWhereInput = {
    AND?: ChecklistItemAssigneeWhereInput | ChecklistItemAssigneeWhereInput[]
    OR?: ChecklistItemAssigneeWhereInput[]
    NOT?: ChecklistItemAssigneeWhereInput | ChecklistItemAssigneeWhereInput[]
    itemId?: UuidFilter<"ChecklistItemAssignee"> | string
    userId?: UuidFilter<"ChecklistItemAssignee"> | string
    item?: XOR<ChecklistItemScalarRelationFilter, ChecklistItemWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ChecklistItemAssigneeOrderByWithRelationInput = {
    itemId?: SortOrder
    userId?: SortOrder
    item?: ChecklistItemOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ChecklistItemAssigneeWhereUniqueInput = Prisma.AtLeast<{
    itemId_userId?: ChecklistItemAssigneeItemIdUserIdCompoundUniqueInput
    AND?: ChecklistItemAssigneeWhereInput | ChecklistItemAssigneeWhereInput[]
    OR?: ChecklistItemAssigneeWhereInput[]
    NOT?: ChecklistItemAssigneeWhereInput | ChecklistItemAssigneeWhereInput[]
    itemId?: UuidFilter<"ChecklistItemAssignee"> | string
    userId?: UuidFilter<"ChecklistItemAssignee"> | string
    item?: XOR<ChecklistItemScalarRelationFilter, ChecklistItemWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "itemId_userId">

  export type ChecklistItemAssigneeOrderByWithAggregationInput = {
    itemId?: SortOrder
    userId?: SortOrder
    _count?: ChecklistItemAssigneeCountOrderByAggregateInput
    _max?: ChecklistItemAssigneeMaxOrderByAggregateInput
    _min?: ChecklistItemAssigneeMinOrderByAggregateInput
  }

  export type ChecklistItemAssigneeScalarWhereWithAggregatesInput = {
    AND?: ChecklistItemAssigneeScalarWhereWithAggregatesInput | ChecklistItemAssigneeScalarWhereWithAggregatesInput[]
    OR?: ChecklistItemAssigneeScalarWhereWithAggregatesInput[]
    NOT?: ChecklistItemAssigneeScalarWhereWithAggregatesInput | ChecklistItemAssigneeScalarWhereWithAggregatesInput[]
    itemId?: UuidWithAggregatesFilter<"ChecklistItemAssignee"> | string
    userId?: UuidWithAggregatesFilter<"ChecklistItemAssignee"> | string
  }

  export type ChecklistItemWhereInput = {
    AND?: ChecklistItemWhereInput | ChecklistItemWhereInput[]
    OR?: ChecklistItemWhereInput[]
    NOT?: ChecklistItemWhereInput | ChecklistItemWhereInput[]
    id?: UuidFilter<"ChecklistItem"> | string
    checklistId?: UuidFilter<"ChecklistItem"> | string
    text?: StringFilter<"ChecklistItem"> | string
    isCompleted?: BoolFilter<"ChecklistItem"> | boolean
    dueDate?: DateTimeNullableFilter<"ChecklistItem"> | Date | string | null
    position?: DecimalFilter<"ChecklistItem"> | Decimal | DecimalJsLike | number | string
    assignees?: ChecklistItemAssigneeListRelationFilter
    checklist?: XOR<ChecklistScalarRelationFilter, ChecklistWhereInput>
  }

  export type ChecklistItemOrderByWithRelationInput = {
    id?: SortOrder
    checklistId?: SortOrder
    text?: SortOrder
    isCompleted?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    position?: SortOrder
    assignees?: ChecklistItemAssigneeOrderByRelationAggregateInput
    checklist?: ChecklistOrderByWithRelationInput
  }

  export type ChecklistItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChecklistItemWhereInput | ChecklistItemWhereInput[]
    OR?: ChecklistItemWhereInput[]
    NOT?: ChecklistItemWhereInput | ChecklistItemWhereInput[]
    checklistId?: UuidFilter<"ChecklistItem"> | string
    text?: StringFilter<"ChecklistItem"> | string
    isCompleted?: BoolFilter<"ChecklistItem"> | boolean
    dueDate?: DateTimeNullableFilter<"ChecklistItem"> | Date | string | null
    position?: DecimalFilter<"ChecklistItem"> | Decimal | DecimalJsLike | number | string
    assignees?: ChecklistItemAssigneeListRelationFilter
    checklist?: XOR<ChecklistScalarRelationFilter, ChecklistWhereInput>
  }, "id">

  export type ChecklistItemOrderByWithAggregationInput = {
    id?: SortOrder
    checklistId?: SortOrder
    text?: SortOrder
    isCompleted?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    position?: SortOrder
    _count?: ChecklistItemCountOrderByAggregateInput
    _avg?: ChecklistItemAvgOrderByAggregateInput
    _max?: ChecklistItemMaxOrderByAggregateInput
    _min?: ChecklistItemMinOrderByAggregateInput
    _sum?: ChecklistItemSumOrderByAggregateInput
  }

  export type ChecklistItemScalarWhereWithAggregatesInput = {
    AND?: ChecklistItemScalarWhereWithAggregatesInput | ChecklistItemScalarWhereWithAggregatesInput[]
    OR?: ChecklistItemScalarWhereWithAggregatesInput[]
    NOT?: ChecklistItemScalarWhereWithAggregatesInput | ChecklistItemScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ChecklistItem"> | string
    checklistId?: UuidWithAggregatesFilter<"ChecklistItem"> | string
    text?: StringWithAggregatesFilter<"ChecklistItem"> | string
    isCompleted?: BoolWithAggregatesFilter<"ChecklistItem"> | boolean
    dueDate?: DateTimeNullableWithAggregatesFilter<"ChecklistItem"> | Date | string | null
    position?: DecimalWithAggregatesFilter<"ChecklistItem"> | Decimal | DecimalJsLike | number | string
  }

  export type ChecklistWhereInput = {
    AND?: ChecklistWhereInput | ChecklistWhereInput[]
    OR?: ChecklistWhereInput[]
    NOT?: ChecklistWhereInput | ChecklistWhereInput[]
    id?: UuidFilter<"Checklist"> | string
    cardId?: UuidFilter<"Checklist"> | string
    title?: StringFilter<"Checklist"> | string
    position?: DecimalFilter<"Checklist"> | Decimal | DecimalJsLike | number | string
    items?: ChecklistItemListRelationFilter
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
  }

  export type ChecklistOrderByWithRelationInput = {
    id?: SortOrder
    cardId?: SortOrder
    title?: SortOrder
    position?: SortOrder
    items?: ChecklistItemOrderByRelationAggregateInput
    card?: CardOrderByWithRelationInput
  }

  export type ChecklistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChecklistWhereInput | ChecklistWhereInput[]
    OR?: ChecklistWhereInput[]
    NOT?: ChecklistWhereInput | ChecklistWhereInput[]
    cardId?: UuidFilter<"Checklist"> | string
    title?: StringFilter<"Checklist"> | string
    position?: DecimalFilter<"Checklist"> | Decimal | DecimalJsLike | number | string
    items?: ChecklistItemListRelationFilter
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
  }, "id">

  export type ChecklistOrderByWithAggregationInput = {
    id?: SortOrder
    cardId?: SortOrder
    title?: SortOrder
    position?: SortOrder
    _count?: ChecklistCountOrderByAggregateInput
    _avg?: ChecklistAvgOrderByAggregateInput
    _max?: ChecklistMaxOrderByAggregateInput
    _min?: ChecklistMinOrderByAggregateInput
    _sum?: ChecklistSumOrderByAggregateInput
  }

  export type ChecklistScalarWhereWithAggregatesInput = {
    AND?: ChecklistScalarWhereWithAggregatesInput | ChecklistScalarWhereWithAggregatesInput[]
    OR?: ChecklistScalarWhereWithAggregatesInput[]
    NOT?: ChecklistScalarWhereWithAggregatesInput | ChecklistScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Checklist"> | string
    cardId?: UuidWithAggregatesFilter<"Checklist"> | string
    title?: StringWithAggregatesFilter<"Checklist"> | string
    position?: DecimalWithAggregatesFilter<"Checklist"> | Decimal | DecimalJsLike | number | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: UuidFilter<"Comment"> | string
    cardId?: UuidFilter<"Comment"> | string
    userId?: UuidFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    card?: CardOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    cardId?: UuidFilter<"Comment"> | string
    userId?: UuidFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    card?: XOR<CardScalarRelationFilter, CardWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Comment"> | string
    cardId?: UuidWithAggregatesFilter<"Comment"> | string
    userId?: UuidWithAggregatesFilter<"Comment"> | string
    text?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type LabelWhereInput = {
    AND?: LabelWhereInput | LabelWhereInput[]
    OR?: LabelWhereInput[]
    NOT?: LabelWhereInput | LabelWhereInput[]
    id?: UuidFilter<"Label"> | string
    boardId?: UuidFilter<"Label"> | string
    name?: StringNullableFilter<"Label"> | string | null
    color?: EnumColorFilter<"Label"> | $Enums.Color
    cardLabels?: CardLabelListRelationFilter
    board?: XOR<BoardScalarRelationFilter, BoardWhereInput>
  }

  export type LabelOrderByWithRelationInput = {
    id?: SortOrder
    boardId?: SortOrder
    name?: SortOrderInput | SortOrder
    color?: SortOrder
    cardLabels?: CardLabelOrderByRelationAggregateInput
    board?: BoardOrderByWithRelationInput
  }

  export type LabelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    boardId_name?: LabelBoardIdNameCompoundUniqueInput
    AND?: LabelWhereInput | LabelWhereInput[]
    OR?: LabelWhereInput[]
    NOT?: LabelWhereInput | LabelWhereInput[]
    boardId?: UuidFilter<"Label"> | string
    name?: StringNullableFilter<"Label"> | string | null
    color?: EnumColorFilter<"Label"> | $Enums.Color
    cardLabels?: CardLabelListRelationFilter
    board?: XOR<BoardScalarRelationFilter, BoardWhereInput>
  }, "id" | "boardId_name">

  export type LabelOrderByWithAggregationInput = {
    id?: SortOrder
    boardId?: SortOrder
    name?: SortOrderInput | SortOrder
    color?: SortOrder
    _count?: LabelCountOrderByAggregateInput
    _max?: LabelMaxOrderByAggregateInput
    _min?: LabelMinOrderByAggregateInput
  }

  export type LabelScalarWhereWithAggregatesInput = {
    AND?: LabelScalarWhereWithAggregatesInput | LabelScalarWhereWithAggregatesInput[]
    OR?: LabelScalarWhereWithAggregatesInput[]
    NOT?: LabelScalarWhereWithAggregatesInput | LabelScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Label"> | string
    boardId?: UuidWithAggregatesFilter<"Label"> | string
    name?: StringNullableWithAggregatesFilter<"Label"> | string | null
    color?: EnumColorWithAggregatesFilter<"Label"> | $Enums.Color
  }

  export type ListWatcherWhereInput = {
    AND?: ListWatcherWhereInput | ListWatcherWhereInput[]
    OR?: ListWatcherWhereInput[]
    NOT?: ListWatcherWhereInput | ListWatcherWhereInput[]
    listId?: UuidFilter<"ListWatcher"> | string
    userId?: UuidFilter<"ListWatcher"> | string
    createdAt?: DateTimeFilter<"ListWatcher"> | Date | string
    list?: XOR<ListScalarRelationFilter, ListWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ListWatcherOrderByWithRelationInput = {
    listId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    list?: ListOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ListWatcherWhereUniqueInput = Prisma.AtLeast<{
    listId_userId?: ListWatcherListIdUserIdCompoundUniqueInput
    AND?: ListWatcherWhereInput | ListWatcherWhereInput[]
    OR?: ListWatcherWhereInput[]
    NOT?: ListWatcherWhereInput | ListWatcherWhereInput[]
    listId?: UuidFilter<"ListWatcher"> | string
    userId?: UuidFilter<"ListWatcher"> | string
    createdAt?: DateTimeFilter<"ListWatcher"> | Date | string
    list?: XOR<ListScalarRelationFilter, ListWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "listId_userId">

  export type ListWatcherOrderByWithAggregationInput = {
    listId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    _count?: ListWatcherCountOrderByAggregateInput
    _max?: ListWatcherMaxOrderByAggregateInput
    _min?: ListWatcherMinOrderByAggregateInput
  }

  export type ListWatcherScalarWhereWithAggregatesInput = {
    AND?: ListWatcherScalarWhereWithAggregatesInput | ListWatcherScalarWhereWithAggregatesInput[]
    OR?: ListWatcherScalarWhereWithAggregatesInput[]
    NOT?: ListWatcherScalarWhereWithAggregatesInput | ListWatcherScalarWhereWithAggregatesInput[]
    listId?: UuidWithAggregatesFilter<"ListWatcher"> | string
    userId?: UuidWithAggregatesFilter<"ListWatcher"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ListWatcher"> | Date | string
  }

  export type ListWhereInput = {
    AND?: ListWhereInput | ListWhereInput[]
    OR?: ListWhereInput[]
    NOT?: ListWhereInput | ListWhereInput[]
    id?: UuidFilter<"List"> | string
    boardId?: UuidFilter<"List"> | string
    name?: StringFilter<"List"> | string
    position?: DecimalFilter<"List"> | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFilter<"List"> | boolean
    subscribed?: BoolFilter<"List"> | boolean
    cards?: CardListRelationFilter
    watchers?: ListWatcherListRelationFilter
    board?: XOR<BoardScalarRelationFilter, BoardWhereInput>
  }

  export type ListOrderByWithRelationInput = {
    id?: SortOrder
    boardId?: SortOrder
    name?: SortOrder
    position?: SortOrder
    isArchived?: SortOrder
    subscribed?: SortOrder
    cards?: CardOrderByRelationAggregateInput
    watchers?: ListWatcherOrderByRelationAggregateInput
    board?: BoardOrderByWithRelationInput
  }

  export type ListWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    boardId_position?: ListBoardIdPositionCompoundUniqueInput
    AND?: ListWhereInput | ListWhereInput[]
    OR?: ListWhereInput[]
    NOT?: ListWhereInput | ListWhereInput[]
    boardId?: UuidFilter<"List"> | string
    name?: StringFilter<"List"> | string
    position?: DecimalFilter<"List"> | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFilter<"List"> | boolean
    subscribed?: BoolFilter<"List"> | boolean
    cards?: CardListRelationFilter
    watchers?: ListWatcherListRelationFilter
    board?: XOR<BoardScalarRelationFilter, BoardWhereInput>
  }, "id" | "boardId_position">

  export type ListOrderByWithAggregationInput = {
    id?: SortOrder
    boardId?: SortOrder
    name?: SortOrder
    position?: SortOrder
    isArchived?: SortOrder
    subscribed?: SortOrder
    _count?: ListCountOrderByAggregateInput
    _avg?: ListAvgOrderByAggregateInput
    _max?: ListMaxOrderByAggregateInput
    _min?: ListMinOrderByAggregateInput
    _sum?: ListSumOrderByAggregateInput
  }

  export type ListScalarWhereWithAggregatesInput = {
    AND?: ListScalarWhereWithAggregatesInput | ListScalarWhereWithAggregatesInput[]
    OR?: ListScalarWhereWithAggregatesInput[]
    NOT?: ListScalarWhereWithAggregatesInput | ListScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"List"> | string
    boardId?: UuidWithAggregatesFilter<"List"> | string
    name?: StringWithAggregatesFilter<"List"> | string
    position?: DecimalWithAggregatesFilter<"List"> | Decimal | DecimalJsLike | number | string
    isArchived?: BoolWithAggregatesFilter<"List"> | boolean
    subscribed?: BoolWithAggregatesFilter<"List"> | boolean
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: UuidFilter<"User"> | string
    clerkId?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    fullName?: StringFilter<"User"> | string
    avatarUrl?: StringFilter<"User"> | string
    theme?: EnumThemeFilter<"User"> | $Enums.Theme
    recentlyViewedBoards?: StringNullableListFilter<"User">
    emailNotification?: BoolFilter<"User"> | boolean
    pushNotification?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    bio?: StringNullableFilter<"User"> | string | null
    activityLogs?: ActivityLogListRelationFilter
    attachments?: AttachmentListRelationFilter
    boardMembers?: BoardMemberListRelationFilter
    boards?: BoardListRelationFilter
    cardAssignees?: CardAssigneeListRelationFilter
    cardWatchers?: CardWatcherListRelationFilter
    cards?: CardListRelationFilter
    checklistItemAssignees?: ChecklistItemAssigneeListRelationFilter
    comments?: CommentListRelationFilter
    listWatchers?: ListWatcherListRelationFilter
    workspaceMembers?: WorkspaceMemberListRelationFilter
    workspaces?: WorkspaceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    fullName?: SortOrder
    avatarUrl?: SortOrder
    theme?: SortOrder
    recentlyViewedBoards?: SortOrder
    emailNotification?: SortOrder
    pushNotification?: SortOrder
    createdAt?: SortOrder
    bio?: SortOrderInput | SortOrder
    activityLogs?: ActivityLogOrderByRelationAggregateInput
    attachments?: AttachmentOrderByRelationAggregateInput
    boardMembers?: BoardMemberOrderByRelationAggregateInput
    boards?: BoardOrderByRelationAggregateInput
    cardAssignees?: CardAssigneeOrderByRelationAggregateInput
    cardWatchers?: CardWatcherOrderByRelationAggregateInput
    cards?: CardOrderByRelationAggregateInput
    checklistItemAssignees?: ChecklistItemAssigneeOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    listWatchers?: ListWatcherOrderByRelationAggregateInput
    workspaceMembers?: WorkspaceMemberOrderByRelationAggregateInput
    workspaces?: WorkspaceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clerkId?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringFilter<"User"> | string
    avatarUrl?: StringFilter<"User"> | string
    theme?: EnumThemeFilter<"User"> | $Enums.Theme
    recentlyViewedBoards?: StringNullableListFilter<"User">
    emailNotification?: BoolFilter<"User"> | boolean
    pushNotification?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    bio?: StringNullableFilter<"User"> | string | null
    activityLogs?: ActivityLogListRelationFilter
    attachments?: AttachmentListRelationFilter
    boardMembers?: BoardMemberListRelationFilter
    boards?: BoardListRelationFilter
    cardAssignees?: CardAssigneeListRelationFilter
    cardWatchers?: CardWatcherListRelationFilter
    cards?: CardListRelationFilter
    checklistItemAssignees?: ChecklistItemAssigneeListRelationFilter
    comments?: CommentListRelationFilter
    listWatchers?: ListWatcherListRelationFilter
    workspaceMembers?: WorkspaceMemberListRelationFilter
    workspaces?: WorkspaceListRelationFilter
  }, "id" | "clerkId" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    email?: SortOrder
    username?: SortOrderInput | SortOrder
    fullName?: SortOrder
    avatarUrl?: SortOrder
    theme?: SortOrder
    recentlyViewedBoards?: SortOrder
    emailNotification?: SortOrder
    pushNotification?: SortOrder
    createdAt?: SortOrder
    bio?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"User"> | string
    clerkId?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    fullName?: StringWithAggregatesFilter<"User"> | string
    avatarUrl?: StringWithAggregatesFilter<"User"> | string
    theme?: EnumThemeWithAggregatesFilter<"User"> | $Enums.Theme
    recentlyViewedBoards?: StringNullableListFilter<"User">
    emailNotification?: BoolWithAggregatesFilter<"User"> | boolean
    pushNotification?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type WorkspaceMemberWhereInput = {
    AND?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[]
    OR?: WorkspaceMemberWhereInput[]
    NOT?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[]
    workspaceId?: UuidFilter<"WorkspaceMember"> | string
    userId?: UuidFilter<"WorkspaceMember"> | string
    role?: EnumWorkspaceRoleFilter<"WorkspaceMember"> | $Enums.WorkspaceRole
    joinedAt?: DateTimeFilter<"WorkspaceMember"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
  }

  export type WorkspaceMemberOrderByWithRelationInput = {
    workspaceId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    workspace?: WorkspaceOrderByWithRelationInput
  }

  export type WorkspaceMemberWhereUniqueInput = Prisma.AtLeast<{
    workspaceId_userId?: WorkspaceMemberWorkspaceIdUserIdCompoundUniqueInput
    AND?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[]
    OR?: WorkspaceMemberWhereInput[]
    NOT?: WorkspaceMemberWhereInput | WorkspaceMemberWhereInput[]
    workspaceId?: UuidFilter<"WorkspaceMember"> | string
    userId?: UuidFilter<"WorkspaceMember"> | string
    role?: EnumWorkspaceRoleFilter<"WorkspaceMember"> | $Enums.WorkspaceRole
    joinedAt?: DateTimeFilter<"WorkspaceMember"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    workspace?: XOR<WorkspaceScalarRelationFilter, WorkspaceWhereInput>
  }, "workspaceId_userId">

  export type WorkspaceMemberOrderByWithAggregationInput = {
    workspaceId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    _count?: WorkspaceMemberCountOrderByAggregateInput
    _max?: WorkspaceMemberMaxOrderByAggregateInput
    _min?: WorkspaceMemberMinOrderByAggregateInput
  }

  export type WorkspaceMemberScalarWhereWithAggregatesInput = {
    AND?: WorkspaceMemberScalarWhereWithAggregatesInput | WorkspaceMemberScalarWhereWithAggregatesInput[]
    OR?: WorkspaceMemberScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceMemberScalarWhereWithAggregatesInput | WorkspaceMemberScalarWhereWithAggregatesInput[]
    workspaceId?: UuidWithAggregatesFilter<"WorkspaceMember"> | string
    userId?: UuidWithAggregatesFilter<"WorkspaceMember"> | string
    role?: EnumWorkspaceRoleWithAggregatesFilter<"WorkspaceMember"> | $Enums.WorkspaceRole
    joinedAt?: DateTimeWithAggregatesFilter<"WorkspaceMember"> | Date | string
  }

  export type WorkspaceWhereInput = {
    AND?: WorkspaceWhereInput | WorkspaceWhereInput[]
    OR?: WorkspaceWhereInput[]
    NOT?: WorkspaceWhereInput | WorkspaceWhereInput[]
    id?: UuidFilter<"Workspace"> | string
    name?: StringFilter<"Workspace"> | string
    description?: StringNullableFilter<"Workspace"> | string | null
    visibility?: EnumWorkspaceVisibilityFilter<"Workspace"> | $Enums.WorkspaceVisibility
    premium?: BoolFilter<"Workspace"> | boolean
    createdAt?: DateTimeFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string
    type?: EnumWorkspaceTypeFilter<"Workspace"> | $Enums.WorkspaceType
    createdBy?: UuidFilter<"Workspace"> | string
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFilter<"Workspace"> | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFilter<"Workspace"> | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFilter<"Workspace"> | $Enums.SlackSharing
    boards?: BoardListRelationFilter
    workspaceMembers?: WorkspaceMemberListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WorkspaceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    visibility?: SortOrder
    premium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    createdBy?: SortOrder
    workspaceMembershipRestrictions?: SortOrder
    publicBoardCreation?: SortOrder
    workspaceBoardCreation?: SortOrder
    privateBoardCreation?: SortOrder
    publicBoardDeletion?: SortOrder
    workspaceBoardDeletion?: SortOrder
    privateBoardDeletion?: SortOrder
    allowGuestSharing?: SortOrder
    allowSlackIntegration?: SortOrder
    boards?: BoardOrderByRelationAggregateInput
    workspaceMembers?: WorkspaceMemberOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
  }

  export type WorkspaceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkspaceWhereInput | WorkspaceWhereInput[]
    OR?: WorkspaceWhereInput[]
    NOT?: WorkspaceWhereInput | WorkspaceWhereInput[]
    name?: StringFilter<"Workspace"> | string
    description?: StringNullableFilter<"Workspace"> | string | null
    visibility?: EnumWorkspaceVisibilityFilter<"Workspace"> | $Enums.WorkspaceVisibility
    premium?: BoolFilter<"Workspace"> | boolean
    createdAt?: DateTimeFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string
    type?: EnumWorkspaceTypeFilter<"Workspace"> | $Enums.WorkspaceType
    createdBy?: UuidFilter<"Workspace"> | string
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFilter<"Workspace"> | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFilter<"Workspace"> | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFilter<"Workspace"> | $Enums.SlackSharing
    boards?: BoardListRelationFilter
    workspaceMembers?: WorkspaceMemberListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type WorkspaceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    visibility?: SortOrder
    premium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    createdBy?: SortOrder
    workspaceMembershipRestrictions?: SortOrder
    publicBoardCreation?: SortOrder
    workspaceBoardCreation?: SortOrder
    privateBoardCreation?: SortOrder
    publicBoardDeletion?: SortOrder
    workspaceBoardDeletion?: SortOrder
    privateBoardDeletion?: SortOrder
    allowGuestSharing?: SortOrder
    allowSlackIntegration?: SortOrder
    _count?: WorkspaceCountOrderByAggregateInput
    _max?: WorkspaceMaxOrderByAggregateInput
    _min?: WorkspaceMinOrderByAggregateInput
  }

  export type WorkspaceScalarWhereWithAggregatesInput = {
    AND?: WorkspaceScalarWhereWithAggregatesInput | WorkspaceScalarWhereWithAggregatesInput[]
    OR?: WorkspaceScalarWhereWithAggregatesInput[]
    NOT?: WorkspaceScalarWhereWithAggregatesInput | WorkspaceScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Workspace"> | string
    name?: StringWithAggregatesFilter<"Workspace"> | string
    description?: StringNullableWithAggregatesFilter<"Workspace"> | string | null
    visibility?: EnumWorkspaceVisibilityWithAggregatesFilter<"Workspace"> | $Enums.WorkspaceVisibility
    premium?: BoolWithAggregatesFilter<"Workspace"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Workspace"> | Date | string
    type?: EnumWorkspaceTypeWithAggregatesFilter<"Workspace"> | $Enums.WorkspaceType
    createdBy?: UuidWithAggregatesFilter<"Workspace"> | string
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsWithAggregatesFilter<"Workspace"> | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsWithAggregatesFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsWithAggregatesFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsWithAggregatesFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsWithAggregatesFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsWithAggregatesFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsWithAggregatesFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingWithAggregatesFilter<"Workspace"> | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingWithAggregatesFilter<"Workspace"> | $Enums.SlackSharing
  }

  export type ActivityLogCreateInput = {
    id?: string
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    board: BoardCreateNestedOneWithoutActivityLogsInput
    card?: CardCreateNestedOneWithoutActivityLogsInput
    user?: UserCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateInput = {
    id?: string
    boardId: string
    cardId?: string | null
    userId?: string | null
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ActivityLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    board?: BoardUpdateOneRequiredWithoutActivityLogsNestedInput
    card?: CardUpdateOneWithoutActivityLogsNestedInput
    user?: UserUpdateOneWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogCreateManyInput = {
    id?: string
    boardId: string
    cardId?: string | null
    userId?: string | null
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ActivityLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentCreateInput = {
    id?: string
    url: string
    filename: string
    bytes?: bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutAttachmentsInput
    user: UserCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateInput = {
    id?: string
    cardId: string
    userId: string
    url: string
    filename: string
    bytes?: bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttachmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    bytes?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutAttachmentsNestedInput
    user?: UserUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    bytes?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentCreateManyInput = {
    id?: string
    cardId: string
    userId: string
    url: string
    filename: string
    bytes?: bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttachmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    bytes?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    bytes?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardMemberCreateInput = {
    role?: $Enums.BoardRole
    joinedAt?: Date | string
    board: BoardCreateNestedOneWithoutBoardMembersInput
    user: UserCreateNestedOneWithoutBoardMembersInput
  }

  export type BoardMemberUncheckedCreateInput = {
    boardId: string
    userId: string
    role?: $Enums.BoardRole
    joinedAt?: Date | string
  }

  export type BoardMemberUpdateInput = {
    role?: EnumBoardRoleFieldUpdateOperationsInput | $Enums.BoardRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    board?: BoardUpdateOneRequiredWithoutBoardMembersNestedInput
    user?: UserUpdateOneRequiredWithoutBoardMembersNestedInput
  }

  export type BoardMemberUncheckedUpdateInput = {
    boardId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumBoardRoleFieldUpdateOperationsInput | $Enums.BoardRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardMemberCreateManyInput = {
    boardId: string
    userId: string
    role?: $Enums.BoardRole
    joinedAt?: Date | string
  }

  export type BoardMemberUpdateManyMutationInput = {
    role?: EnumBoardRoleFieldUpdateOperationsInput | $Enums.BoardRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardMemberUncheckedUpdateManyInput = {
    boardId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumBoardRoleFieldUpdateOperationsInput | $Enums.BoardRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardCreateInput = {
    id?: string
    name: string
    description?: string | null
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogCreateNestedManyWithoutBoardInput
    boardMembers?: BoardMemberCreateNestedManyWithoutBoardInput
    creator: UserCreateNestedOneWithoutBoardsInput
    workspace: WorkspaceCreateNestedOneWithoutBoardsInput
    labels?: LabelCreateNestedManyWithoutBoardInput
    lists?: ListCreateNestedManyWithoutBoardInput
  }

  export type BoardUncheckedCreateInput = {
    id?: string
    workspaceId: string
    name: string
    description?: string | null
    createdBy: string
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutBoardInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutBoardInput
    labels?: LabelUncheckedCreateNestedManyWithoutBoardInput
    lists?: ListUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUpdateManyWithoutBoardNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutBoardNestedInput
    creator?: UserUpdateOneRequiredWithoutBoardsNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBoardsNestedInput
    labels?: LabelUpdateManyWithoutBoardNestedInput
    lists?: ListUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutBoardNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutBoardNestedInput
    labels?: LabelUncheckedUpdateManyWithoutBoardNestedInput
    lists?: ListUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type BoardCreateManyInput = {
    id?: string
    workspaceId: string
    name: string
    description?: string | null
    createdBy: string
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
  }

  export type BoardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
  }

  export type BoardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
  }

  export type CardAssigneeCreateInput = {
    card: CardCreateNestedOneWithoutAssigneesInput
    user: UserCreateNestedOneWithoutCardAssigneesInput
  }

  export type CardAssigneeUncheckedCreateInput = {
    cardId: string
    userId: string
  }

  export type CardAssigneeUpdateInput = {
    card?: CardUpdateOneRequiredWithoutAssigneesNestedInput
    user?: UserUpdateOneRequiredWithoutCardAssigneesNestedInput
  }

  export type CardAssigneeUncheckedUpdateInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CardAssigneeCreateManyInput = {
    cardId: string
    userId: string
  }

  export type CardAssigneeUpdateManyMutationInput = {

  }

  export type CardAssigneeUncheckedUpdateManyInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CardLabelCreateInput = {
    card: CardCreateNestedOneWithoutCardLabelsInput
    label: LabelCreateNestedOneWithoutCardLabelsInput
  }

  export type CardLabelUncheckedCreateInput = {
    cardId: string
    labelId: string
  }

  export type CardLabelUpdateInput = {
    card?: CardUpdateOneRequiredWithoutCardLabelsNestedInput
    label?: LabelUpdateOneRequiredWithoutCardLabelsNestedInput
  }

  export type CardLabelUncheckedUpdateInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
  }

  export type CardLabelCreateManyInput = {
    cardId: string
    labelId: string
  }

  export type CardLabelUpdateManyMutationInput = {

  }

  export type CardLabelUncheckedUpdateManyInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
  }

  export type CardWatcherCreateInput = {
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutWatchersInput
    user: UserCreateNestedOneWithoutCardWatchersInput
  }

  export type CardWatcherUncheckedCreateInput = {
    cardId: string
    userId: string
    createdAt?: Date | string
  }

  export type CardWatcherUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutWatchersNestedInput
    user?: UserUpdateOneRequiredWithoutCardWatchersNestedInput
  }

  export type CardWatcherUncheckedUpdateInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardWatcherCreateManyInput = {
    cardId: string
    userId: string
    createdAt?: Date | string
  }

  export type CardWatcherUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardWatcherUncheckedUpdateManyInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardCreateInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogCreateNestedManyWithoutCardInput
    attachments?: AttachmentCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelCreateNestedManyWithoutCardInput
    watchers?: CardWatcherCreateNestedManyWithoutCardInput
    creator: UserCreateNestedOneWithoutCardsInput
    list: ListCreateNestedOneWithoutCardsInput
    checklists?: ChecklistCreateNestedManyWithoutCardInput
    comments?: CommentCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutCardInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeUncheckedCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutCardInput
    watchers?: CardWatcherUncheckedCreateNestedManyWithoutCardInput
    checklists?: ChecklistUncheckedCreateNestedManyWithoutCardInput
    comments?: CommentUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUpdateManyWithoutCardNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    list?: ListUpdateOneRequiredWithoutCardsNestedInput
    checklists?: ChecklistUpdateManyWithoutCardNestedInput
    comments?: CommentUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUncheckedUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUncheckedUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUncheckedUpdateManyWithoutCardNestedInput
    checklists?: ChecklistUncheckedUpdateManyWithoutCardNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardCreateManyInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChecklistItemAssigneeCreateInput = {
    item: ChecklistItemCreateNestedOneWithoutAssigneesInput
    user: UserCreateNestedOneWithoutChecklistItemAssigneesInput
  }

  export type ChecklistItemAssigneeUncheckedCreateInput = {
    itemId: string
    userId: string
  }

  export type ChecklistItemAssigneeUpdateInput = {
    item?: ChecklistItemUpdateOneRequiredWithoutAssigneesNestedInput
    user?: UserUpdateOneRequiredWithoutChecklistItemAssigneesNestedInput
  }

  export type ChecklistItemAssigneeUncheckedUpdateInput = {
    itemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ChecklistItemAssigneeCreateManyInput = {
    itemId: string
    userId: string
  }

  export type ChecklistItemAssigneeUpdateManyMutationInput = {

  }

  export type ChecklistItemAssigneeUncheckedUpdateManyInput = {
    itemId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ChecklistItemCreateInput = {
    id?: string
    text: string
    isCompleted?: boolean
    dueDate?: Date | string | null
    position?: Decimal | DecimalJsLike | number | string
    assignees?: ChecklistItemAssigneeCreateNestedManyWithoutItemInput
    checklist: ChecklistCreateNestedOneWithoutItemsInput
  }

  export type ChecklistItemUncheckedCreateInput = {
    id?: string
    checklistId: string
    text: string
    isCompleted?: boolean
    dueDate?: Date | string | null
    position?: Decimal | DecimalJsLike | number | string
    assignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutItemInput
  }

  export type ChecklistItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    assignees?: ChecklistItemAssigneeUpdateManyWithoutItemNestedInput
    checklist?: ChecklistUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ChecklistItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    checklistId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    assignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ChecklistItemCreateManyInput = {
    id?: string
    checklistId: string
    text: string
    isCompleted?: boolean
    dueDate?: Date | string | null
    position?: Decimal | DecimalJsLike | number | string
  }

  export type ChecklistItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ChecklistItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    checklistId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ChecklistCreateInput = {
    id?: string
    title: string
    position?: Decimal | DecimalJsLike | number | string
    items?: ChecklistItemCreateNestedManyWithoutChecklistInput
    card: CardCreateNestedOneWithoutChecklistsInput
  }

  export type ChecklistUncheckedCreateInput = {
    id?: string
    cardId: string
    title: string
    position?: Decimal | DecimalJsLike | number | string
    items?: ChecklistItemUncheckedCreateNestedManyWithoutChecklistInput
  }

  export type ChecklistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    items?: ChecklistItemUpdateManyWithoutChecklistNestedInput
    card?: CardUpdateOneRequiredWithoutChecklistsNestedInput
  }

  export type ChecklistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    items?: ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInput
  }

  export type ChecklistCreateManyInput = {
    id?: string
    cardId: string
    title: string
    position?: Decimal | DecimalJsLike | number | string
  }

  export type ChecklistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ChecklistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type CommentCreateInput = {
    id?: string
    text: string
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutCommentsInput
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    cardId: string
    userId: string
    text: string
    createdAt?: Date | string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutCommentsNestedInput
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    id?: string
    cardId: string
    userId: string
    text: string
    createdAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabelCreateInput = {
    id?: string
    name?: string | null
    color: $Enums.Color
    cardLabels?: CardLabelCreateNestedManyWithoutLabelInput
    board: BoardCreateNestedOneWithoutLabelsInput
  }

  export type LabelUncheckedCreateInput = {
    id?: string
    boardId: string
    name?: string | null
    color: $Enums.Color
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutLabelInput
  }

  export type LabelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: EnumColorFieldUpdateOperationsInput | $Enums.Color
    cardLabels?: CardLabelUpdateManyWithoutLabelNestedInput
    board?: BoardUpdateOneRequiredWithoutLabelsNestedInput
  }

  export type LabelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: EnumColorFieldUpdateOperationsInput | $Enums.Color
    cardLabels?: CardLabelUncheckedUpdateManyWithoutLabelNestedInput
  }

  export type LabelCreateManyInput = {
    id?: string
    boardId: string
    name?: string | null
    color: $Enums.Color
  }

  export type LabelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: EnumColorFieldUpdateOperationsInput | $Enums.Color
  }

  export type LabelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: EnumColorFieldUpdateOperationsInput | $Enums.Color
  }

  export type ListWatcherCreateInput = {
    createdAt?: Date | string
    list: ListCreateNestedOneWithoutWatchersInput
    user: UserCreateNestedOneWithoutListWatchersInput
  }

  export type ListWatcherUncheckedCreateInput = {
    listId: string
    userId: string
    createdAt?: Date | string
  }

  export type ListWatcherUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    list?: ListUpdateOneRequiredWithoutWatchersNestedInput
    user?: UserUpdateOneRequiredWithoutListWatchersNestedInput
  }

  export type ListWatcherUncheckedUpdateInput = {
    listId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListWatcherCreateManyInput = {
    listId: string
    userId: string
    createdAt?: Date | string
  }

  export type ListWatcherUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListWatcherUncheckedUpdateManyInput = {
    listId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListCreateInput = {
    id?: string
    name: string
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    subscribed?: boolean
    cards?: CardCreateNestedManyWithoutListInput
    watchers?: ListWatcherCreateNestedManyWithoutListInput
    board: BoardCreateNestedOneWithoutListsInput
  }

  export type ListUncheckedCreateInput = {
    id?: string
    boardId: string
    name: string
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    subscribed?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutListInput
    watchers?: ListWatcherUncheckedCreateNestedManyWithoutListInput
  }

  export type ListUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutListNestedInput
    watchers?: ListWatcherUpdateManyWithoutListNestedInput
    board?: BoardUpdateOneRequiredWithoutListsNestedInput
  }

  export type ListUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutListNestedInput
    watchers?: ListWatcherUncheckedUpdateManyWithoutListNestedInput
  }

  export type ListCreateManyInput = {
    id?: string
    boardId: string
    name: string
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    subscribed?: boolean
  }

  export type ListUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ListUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkspaceMemberCreateInput = {
    role?: $Enums.WorkspaceRole
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutWorkspaceMembersInput
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceMembersInput
  }

  export type WorkspaceMemberUncheckedCreateInput = {
    workspaceId: string
    userId: string
    role?: $Enums.WorkspaceRole
    joinedAt?: Date | string
  }

  export type WorkspaceMemberUpdateInput = {
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateInput = {
    workspaceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberCreateManyInput = {
    workspaceId: string
    userId: string
    role?: $Enums.WorkspaceRole
    joinedAt?: Date | string
  }

  export type WorkspaceMemberUpdateManyMutationInput = {
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberUncheckedUpdateManyInput = {
    workspaceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceCreateInput = {
    id?: string
    name: string
    description?: string | null
    visibility?: $Enums.WorkspaceVisibility
    premium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.WorkspaceType
    workspaceMembershipRestrictions?: $Enums.MembershipRestrictions
    publicBoardCreation?: $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: $Enums.BoardCreationRestrictions
    privateBoardCreation?: $Enums.BoardCreationRestrictions
    publicBoardDeletion?: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: $Enums.BoardCreationRestrictions
    privateBoardDeletion?: $Enums.BoardCreationRestrictions
    allowGuestSharing?: $Enums.BoardSharing
    allowSlackIntegration?: $Enums.SlackSharing
    boards?: BoardCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
    creator: UserCreateNestedOneWithoutWorkspacesInput
  }

  export type WorkspaceUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    visibility?: $Enums.WorkspaceVisibility
    premium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.WorkspaceType
    createdBy: string
    workspaceMembershipRestrictions?: $Enums.MembershipRestrictions
    publicBoardCreation?: $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: $Enums.BoardCreationRestrictions
    privateBoardCreation?: $Enums.BoardCreationRestrictions
    publicBoardDeletion?: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: $Enums.BoardCreationRestrictions
    privateBoardDeletion?: $Enums.BoardCreationRestrictions
    allowGuestSharing?: $Enums.BoardSharing
    allowSlackIntegration?: $Enums.SlackSharing
    boards?: BoardUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
    boards?: BoardUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
    creator?: UserUpdateOneRequiredWithoutWorkspacesNestedInput
  }

  export type WorkspaceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    createdBy?: StringFieldUpdateOperationsInput | string
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
    boards?: BoardUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    visibility?: $Enums.WorkspaceVisibility
    premium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.WorkspaceType
    createdBy: string
    workspaceMembershipRestrictions?: $Enums.MembershipRestrictions
    publicBoardCreation?: $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: $Enums.BoardCreationRestrictions
    privateBoardCreation?: $Enums.BoardCreationRestrictions
    publicBoardDeletion?: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: $Enums.BoardCreationRestrictions
    privateBoardDeletion?: $Enums.BoardCreationRestrictions
    allowGuestSharing?: $Enums.BoardSharing
    allowSlackIntegration?: $Enums.SlackSharing
  }

  export type WorkspaceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
  }

  export type WorkspaceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    createdBy?: StringFieldUpdateOperationsInput | string
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type EnumActivityActionFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityAction | EnumActivityActionFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityAction[] | ListEnumActivityActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityAction[] | ListEnumActivityActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityActionFilter<$PrismaModel> | $Enums.ActivityAction
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoardScalarRelationFilter = {
    is?: BoardWhereInput
    isNot?: BoardWhereInput
  }

  export type CardNullableScalarRelationFilter = {
    is?: CardWhereInput | null
    isNot?: CardWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ActivityLogCountOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    payload?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityLogMaxOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
  }

  export type ActivityLogMinOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumActivityActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityAction | EnumActivityActionFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityAction[] | ListEnumActivityActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityAction[] | ListEnumActivityActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityActionWithAggregatesFilter<$PrismaModel> | $Enums.ActivityAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActivityActionFilter<$PrismaModel>
    _max?: NestedEnumActivityActionFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type CardScalarRelationFilter = {
    is?: CardWhereInput
    isNot?: CardWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    url?: SortOrder
    filename?: SortOrder
    bytes?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
  }

  export type AttachmentAvgOrderByAggregateInput = {
    bytes?: SortOrder
  }

  export type AttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    url?: SortOrder
    filename?: SortOrder
    bytes?: SortOrder
    createdAt?: SortOrder
  }

  export type AttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    url?: SortOrder
    filename?: SortOrder
    bytes?: SortOrder
    createdAt?: SortOrder
  }

  export type AttachmentSumOrderByAggregateInput = {
    bytes?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type EnumBoardRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardRole | EnumBoardRoleFieldRefInput<$PrismaModel>
    in?: $Enums.BoardRole[] | ListEnumBoardRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardRole[] | ListEnumBoardRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardRoleFilter<$PrismaModel> | $Enums.BoardRole
  }

  export type BoardMemberBoardIdUserIdCompoundUniqueInput = {
    boardId: string
    userId: string
  }

  export type BoardMemberCountOrderByAggregateInput = {
    boardId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type BoardMemberMaxOrderByAggregateInput = {
    boardId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type BoardMemberMinOrderByAggregateInput = {
    boardId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type EnumBoardRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardRole | EnumBoardRoleFieldRefInput<$PrismaModel>
    in?: $Enums.BoardRole[] | ListEnumBoardRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardRole[] | ListEnumBoardRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardRoleWithAggregatesFilter<$PrismaModel> | $Enums.BoardRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardRoleFilter<$PrismaModel>
    _max?: NestedEnumBoardRoleFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumBoardBackgroundFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardBackground | EnumBoardBackgroundFieldRefInput<$PrismaModel>
    in?: $Enums.BoardBackground[] | ListEnumBoardBackgroundFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardBackground[] | ListEnumBoardBackgroundFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardBackgroundFilter<$PrismaModel> | $Enums.BoardBackground
  }

  export type EnumBoardVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardVisibility | EnumBoardVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.BoardVisibility[] | ListEnumBoardVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardVisibility[] | ListEnumBoardVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardVisibilityFilter<$PrismaModel> | $Enums.BoardVisibility
  }

  export type EnumMemberManageRestrictionsFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberManageRestrictions | EnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.MemberManageRestrictions[] | ListEnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberManageRestrictions[] | ListEnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberManageRestrictionsFilter<$PrismaModel> | $Enums.MemberManageRestrictions
  }

  export type EnumCommentingRestrictionsFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentingRestrictions | EnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.CommentingRestrictions[] | ListEnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommentingRestrictions[] | ListEnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumCommentingRestrictionsFilter<$PrismaModel> | $Enums.CommentingRestrictions
  }

  export type ActivityLogListRelationFilter = {
    every?: ActivityLogWhereInput
    some?: ActivityLogWhereInput
    none?: ActivityLogWhereInput
  }

  export type BoardMemberListRelationFilter = {
    every?: BoardMemberWhereInput
    some?: BoardMemberWhereInput
    none?: BoardMemberWhereInput
  }

  export type WorkspaceScalarRelationFilter = {
    is?: WorkspaceWhereInput
    isNot?: WorkspaceWhereInput
  }

  export type LabelListRelationFilter = {
    every?: LabelWhereInput
    some?: LabelWhereInput
    none?: LabelWhereInput
  }

  export type ListListRelationFilter = {
    every?: ListWhereInput
    some?: ListWhereInput
    none?: ListWhereInput
  }

  export type ActivityLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoardMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LabelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ListOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoardCountOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    allowCovers?: SortOrder
    showComplete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastActivityAt?: SortOrder
    background?: SortOrder
    visibility?: SortOrder
    memberManage?: SortOrder
    commenting?: SortOrder
  }

  export type BoardMaxOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    allowCovers?: SortOrder
    showComplete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastActivityAt?: SortOrder
    background?: SortOrder
    visibility?: SortOrder
    memberManage?: SortOrder
    commenting?: SortOrder
  }

  export type BoardMinOrderByAggregateInput = {
    id?: SortOrder
    workspaceId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdBy?: SortOrder
    allowCovers?: SortOrder
    showComplete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastActivityAt?: SortOrder
    background?: SortOrder
    visibility?: SortOrder
    memberManage?: SortOrder
    commenting?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumBoardBackgroundWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardBackground | EnumBoardBackgroundFieldRefInput<$PrismaModel>
    in?: $Enums.BoardBackground[] | ListEnumBoardBackgroundFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardBackground[] | ListEnumBoardBackgroundFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardBackgroundWithAggregatesFilter<$PrismaModel> | $Enums.BoardBackground
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardBackgroundFilter<$PrismaModel>
    _max?: NestedEnumBoardBackgroundFilter<$PrismaModel>
  }

  export type EnumBoardVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardVisibility | EnumBoardVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.BoardVisibility[] | ListEnumBoardVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardVisibility[] | ListEnumBoardVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.BoardVisibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardVisibilityFilter<$PrismaModel>
    _max?: NestedEnumBoardVisibilityFilter<$PrismaModel>
  }

  export type EnumMemberManageRestrictionsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberManageRestrictions | EnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.MemberManageRestrictions[] | ListEnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberManageRestrictions[] | ListEnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberManageRestrictionsWithAggregatesFilter<$PrismaModel> | $Enums.MemberManageRestrictions
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMemberManageRestrictionsFilter<$PrismaModel>
    _max?: NestedEnumMemberManageRestrictionsFilter<$PrismaModel>
  }

  export type EnumCommentingRestrictionsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentingRestrictions | EnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.CommentingRestrictions[] | ListEnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommentingRestrictions[] | ListEnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumCommentingRestrictionsWithAggregatesFilter<$PrismaModel> | $Enums.CommentingRestrictions
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommentingRestrictionsFilter<$PrismaModel>
    _max?: NestedEnumCommentingRestrictionsFilter<$PrismaModel>
  }

  export type CardAssigneeCardIdUserIdCompoundUniqueInput = {
    cardId: string
    userId: string
  }

  export type CardAssigneeCountOrderByAggregateInput = {
    cardId?: SortOrder
    userId?: SortOrder
  }

  export type CardAssigneeMaxOrderByAggregateInput = {
    cardId?: SortOrder
    userId?: SortOrder
  }

  export type CardAssigneeMinOrderByAggregateInput = {
    cardId?: SortOrder
    userId?: SortOrder
  }

  export type LabelScalarRelationFilter = {
    is?: LabelWhereInput
    isNot?: LabelWhereInput
  }

  export type CardLabelCardIdLabelIdCompoundUniqueInput = {
    cardId: string
    labelId: string
  }

  export type CardLabelCountOrderByAggregateInput = {
    cardId?: SortOrder
    labelId?: SortOrder
  }

  export type CardLabelMaxOrderByAggregateInput = {
    cardId?: SortOrder
    labelId?: SortOrder
  }

  export type CardLabelMinOrderByAggregateInput = {
    cardId?: SortOrder
    labelId?: SortOrder
  }

  export type CardWatcherCardIdUserIdCompoundUniqueInput = {
    cardId: string
    userId: string
  }

  export type CardWatcherCountOrderByAggregateInput = {
    cardId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type CardWatcherMaxOrderByAggregateInput = {
    cardId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type CardWatcherMinOrderByAggregateInput = {
    cardId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type AttachmentListRelationFilter = {
    every?: AttachmentWhereInput
    some?: AttachmentWhereInput
    none?: AttachmentWhereInput
  }

  export type CardAssigneeListRelationFilter = {
    every?: CardAssigneeWhereInput
    some?: CardAssigneeWhereInput
    none?: CardAssigneeWhereInput
  }

  export type CardLabelListRelationFilter = {
    every?: CardLabelWhereInput
    some?: CardLabelWhereInput
    none?: CardLabelWhereInput
  }

  export type CardWatcherListRelationFilter = {
    every?: CardWatcherWhereInput
    some?: CardWatcherWhereInput
    none?: CardWatcherWhereInput
  }

  export type ListScalarRelationFilter = {
    is?: ListWhereInput
    isNot?: ListWhereInput
  }

  export type ChecklistListRelationFilter = {
    every?: ChecklistWhereInput
    some?: ChecklistWhereInput
    none?: ChecklistWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type AttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardAssigneeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardLabelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardWatcherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChecklistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CardListIdPositionCompoundUniqueInput = {
    listId: string
    position: Decimal | DecimalJsLike | number | string
  }

  export type CardCountOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    startDate?: SortOrder
    position?: SortOrder
    isArchived?: SortOrder
    createdBy?: SortOrder
    coverImageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CardAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type CardMaxOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    startDate?: SortOrder
    position?: SortOrder
    isArchived?: SortOrder
    createdBy?: SortOrder
    coverImageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CardMinOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    startDate?: SortOrder
    position?: SortOrder
    isArchived?: SortOrder
    createdBy?: SortOrder
    coverImageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CardSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type ChecklistItemScalarRelationFilter = {
    is?: ChecklistItemWhereInput
    isNot?: ChecklistItemWhereInput
  }

  export type ChecklistItemAssigneeItemIdUserIdCompoundUniqueInput = {
    itemId: string
    userId: string
  }

  export type ChecklistItemAssigneeCountOrderByAggregateInput = {
    itemId?: SortOrder
    userId?: SortOrder
  }

  export type ChecklistItemAssigneeMaxOrderByAggregateInput = {
    itemId?: SortOrder
    userId?: SortOrder
  }

  export type ChecklistItemAssigneeMinOrderByAggregateInput = {
    itemId?: SortOrder
    userId?: SortOrder
  }

  export type ChecklistItemAssigneeListRelationFilter = {
    every?: ChecklistItemAssigneeWhereInput
    some?: ChecklistItemAssigneeWhereInput
    none?: ChecklistItemAssigneeWhereInput
  }

  export type ChecklistScalarRelationFilter = {
    is?: ChecklistWhereInput
    isNot?: ChecklistWhereInput
  }

  export type ChecklistItemAssigneeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChecklistItemCountOrderByAggregateInput = {
    id?: SortOrder
    checklistId?: SortOrder
    text?: SortOrder
    isCompleted?: SortOrder
    dueDate?: SortOrder
    position?: SortOrder
  }

  export type ChecklistItemAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type ChecklistItemMaxOrderByAggregateInput = {
    id?: SortOrder
    checklistId?: SortOrder
    text?: SortOrder
    isCompleted?: SortOrder
    dueDate?: SortOrder
    position?: SortOrder
  }

  export type ChecklistItemMinOrderByAggregateInput = {
    id?: SortOrder
    checklistId?: SortOrder
    text?: SortOrder
    isCompleted?: SortOrder
    dueDate?: SortOrder
    position?: SortOrder
  }

  export type ChecklistItemSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type ChecklistItemListRelationFilter = {
    every?: ChecklistItemWhereInput
    some?: ChecklistItemWhereInput
    none?: ChecklistItemWhereInput
  }

  export type ChecklistItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChecklistCountOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    title?: SortOrder
    position?: SortOrder
  }

  export type ChecklistAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type ChecklistMaxOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    title?: SortOrder
    position?: SortOrder
  }

  export type ChecklistMinOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    title?: SortOrder
    position?: SortOrder
  }

  export type ChecklistSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    cardId?: SortOrder
    userId?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumColorFilter<$PrismaModel = never> = {
    equals?: $Enums.Color | EnumColorFieldRefInput<$PrismaModel>
    in?: $Enums.Color[] | ListEnumColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.Color[] | ListEnumColorFieldRefInput<$PrismaModel>
    not?: NestedEnumColorFilter<$PrismaModel> | $Enums.Color
  }

  export type LabelBoardIdNameCompoundUniqueInput = {
    boardId: string
    name: string
  }

  export type LabelCountOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type LabelMaxOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type LabelMinOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    name?: SortOrder
    color?: SortOrder
  }

  export type EnumColorWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Color | EnumColorFieldRefInput<$PrismaModel>
    in?: $Enums.Color[] | ListEnumColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.Color[] | ListEnumColorFieldRefInput<$PrismaModel>
    not?: NestedEnumColorWithAggregatesFilter<$PrismaModel> | $Enums.Color
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumColorFilter<$PrismaModel>
    _max?: NestedEnumColorFilter<$PrismaModel>
  }

  export type ListWatcherListIdUserIdCompoundUniqueInput = {
    listId: string
    userId: string
  }

  export type ListWatcherCountOrderByAggregateInput = {
    listId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ListWatcherMaxOrderByAggregateInput = {
    listId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type ListWatcherMinOrderByAggregateInput = {
    listId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type CardListRelationFilter = {
    every?: CardWhereInput
    some?: CardWhereInput
    none?: CardWhereInput
  }

  export type ListWatcherListRelationFilter = {
    every?: ListWatcherWhereInput
    some?: ListWatcherWhereInput
    none?: ListWatcherWhereInput
  }

  export type CardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ListWatcherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ListBoardIdPositionCompoundUniqueInput = {
    boardId: string
    position: Decimal | DecimalJsLike | number | string
  }

  export type ListCountOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    name?: SortOrder
    position?: SortOrder
    isArchived?: SortOrder
    subscribed?: SortOrder
  }

  export type ListAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type ListMaxOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    name?: SortOrder
    position?: SortOrder
    isArchived?: SortOrder
    subscribed?: SortOrder
  }

  export type ListMinOrderByAggregateInput = {
    id?: SortOrder
    boardId?: SortOrder
    name?: SortOrder
    position?: SortOrder
    isArchived?: SortOrder
    subscribed?: SortOrder
  }

  export type ListSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type EnumThemeFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeFilter<$PrismaModel> | $Enums.Theme
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoardListRelationFilter = {
    every?: BoardWhereInput
    some?: BoardWhereInput
    none?: BoardWhereInput
  }

  export type WorkspaceMemberListRelationFilter = {
    every?: WorkspaceMemberWhereInput
    some?: WorkspaceMemberWhereInput
    none?: WorkspaceMemberWhereInput
  }

  export type WorkspaceListRelationFilter = {
    every?: WorkspaceWhereInput
    some?: WorkspaceWhereInput
    none?: WorkspaceWhereInput
  }

  export type BoardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkspaceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    email?: SortOrder
    username?: SortOrder
    fullName?: SortOrder
    avatarUrl?: SortOrder
    theme?: SortOrder
    recentlyViewedBoards?: SortOrder
    emailNotification?: SortOrder
    pushNotification?: SortOrder
    createdAt?: SortOrder
    bio?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    email?: SortOrder
    username?: SortOrder
    fullName?: SortOrder
    avatarUrl?: SortOrder
    theme?: SortOrder
    emailNotification?: SortOrder
    pushNotification?: SortOrder
    createdAt?: SortOrder
    bio?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    email?: SortOrder
    username?: SortOrder
    fullName?: SortOrder
    avatarUrl?: SortOrder
    theme?: SortOrder
    emailNotification?: SortOrder
    pushNotification?: SortOrder
    createdAt?: SortOrder
    bio?: SortOrder
  }

  export type EnumThemeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeWithAggregatesFilter<$PrismaModel> | $Enums.Theme
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemeFilter<$PrismaModel>
    _max?: NestedEnumThemeFilter<$PrismaModel>
  }

  export type EnumWorkspaceRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceRole | EnumWorkspaceRoleFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceRoleFilter<$PrismaModel> | $Enums.WorkspaceRole
  }

  export type WorkspaceMemberWorkspaceIdUserIdCompoundUniqueInput = {
    workspaceId: string
    userId: string
  }

  export type WorkspaceMemberCountOrderByAggregateInput = {
    workspaceId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type WorkspaceMemberMaxOrderByAggregateInput = {
    workspaceId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type WorkspaceMemberMinOrderByAggregateInput = {
    workspaceId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type EnumWorkspaceRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceRole | EnumWorkspaceRoleFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceRoleWithAggregatesFilter<$PrismaModel> | $Enums.WorkspaceRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkspaceRoleFilter<$PrismaModel>
    _max?: NestedEnumWorkspaceRoleFilter<$PrismaModel>
  }

  export type EnumWorkspaceVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceVisibility | EnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceVisibility[] | ListEnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceVisibility[] | ListEnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceVisibilityFilter<$PrismaModel> | $Enums.WorkspaceVisibility
  }

  export type EnumWorkspaceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceType | EnumWorkspaceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceType[] | ListEnumWorkspaceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceType[] | ListEnumWorkspaceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceTypeFilter<$PrismaModel> | $Enums.WorkspaceType
  }

  export type EnumMembershipRestrictionsFilter<$PrismaModel = never> = {
    equals?: $Enums.MembershipRestrictions | EnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.MembershipRestrictions[] | ListEnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.MembershipRestrictions[] | ListEnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumMembershipRestrictionsFilter<$PrismaModel> | $Enums.MembershipRestrictions
  }

  export type EnumBoardCreationRestrictionsFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardCreationRestrictions | EnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.BoardCreationRestrictions[] | ListEnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardCreationRestrictions[] | ListEnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardCreationRestrictionsFilter<$PrismaModel> | $Enums.BoardCreationRestrictions
  }

  export type EnumBoardSharingFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardSharing | EnumBoardSharingFieldRefInput<$PrismaModel>
    in?: $Enums.BoardSharing[] | ListEnumBoardSharingFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardSharing[] | ListEnumBoardSharingFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardSharingFilter<$PrismaModel> | $Enums.BoardSharing
  }

  export type EnumSlackSharingFilter<$PrismaModel = never> = {
    equals?: $Enums.SlackSharing | EnumSlackSharingFieldRefInput<$PrismaModel>
    in?: $Enums.SlackSharing[] | ListEnumSlackSharingFieldRefInput<$PrismaModel>
    notIn?: $Enums.SlackSharing[] | ListEnumSlackSharingFieldRefInput<$PrismaModel>
    not?: NestedEnumSlackSharingFilter<$PrismaModel> | $Enums.SlackSharing
  }

  export type WorkspaceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    visibility?: SortOrder
    premium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    createdBy?: SortOrder
    workspaceMembershipRestrictions?: SortOrder
    publicBoardCreation?: SortOrder
    workspaceBoardCreation?: SortOrder
    privateBoardCreation?: SortOrder
    publicBoardDeletion?: SortOrder
    workspaceBoardDeletion?: SortOrder
    privateBoardDeletion?: SortOrder
    allowGuestSharing?: SortOrder
    allowSlackIntegration?: SortOrder
  }

  export type WorkspaceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    visibility?: SortOrder
    premium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    createdBy?: SortOrder
    workspaceMembershipRestrictions?: SortOrder
    publicBoardCreation?: SortOrder
    workspaceBoardCreation?: SortOrder
    privateBoardCreation?: SortOrder
    publicBoardDeletion?: SortOrder
    workspaceBoardDeletion?: SortOrder
    privateBoardDeletion?: SortOrder
    allowGuestSharing?: SortOrder
    allowSlackIntegration?: SortOrder
  }

  export type WorkspaceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    visibility?: SortOrder
    premium?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    type?: SortOrder
    createdBy?: SortOrder
    workspaceMembershipRestrictions?: SortOrder
    publicBoardCreation?: SortOrder
    workspaceBoardCreation?: SortOrder
    privateBoardCreation?: SortOrder
    publicBoardDeletion?: SortOrder
    workspaceBoardDeletion?: SortOrder
    privateBoardDeletion?: SortOrder
    allowGuestSharing?: SortOrder
    allowSlackIntegration?: SortOrder
  }

  export type EnumWorkspaceVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceVisibility | EnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceVisibility[] | ListEnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceVisibility[] | ListEnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.WorkspaceVisibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkspaceVisibilityFilter<$PrismaModel>
    _max?: NestedEnumWorkspaceVisibilityFilter<$PrismaModel>
  }

  export type EnumWorkspaceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceType | EnumWorkspaceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceType[] | ListEnumWorkspaceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceType[] | ListEnumWorkspaceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceTypeWithAggregatesFilter<$PrismaModel> | $Enums.WorkspaceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkspaceTypeFilter<$PrismaModel>
    _max?: NestedEnumWorkspaceTypeFilter<$PrismaModel>
  }

  export type EnumMembershipRestrictionsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MembershipRestrictions | EnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.MembershipRestrictions[] | ListEnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.MembershipRestrictions[] | ListEnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumMembershipRestrictionsWithAggregatesFilter<$PrismaModel> | $Enums.MembershipRestrictions
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMembershipRestrictionsFilter<$PrismaModel>
    _max?: NestedEnumMembershipRestrictionsFilter<$PrismaModel>
  }

  export type EnumBoardCreationRestrictionsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardCreationRestrictions | EnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.BoardCreationRestrictions[] | ListEnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardCreationRestrictions[] | ListEnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardCreationRestrictionsWithAggregatesFilter<$PrismaModel> | $Enums.BoardCreationRestrictions
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardCreationRestrictionsFilter<$PrismaModel>
    _max?: NestedEnumBoardCreationRestrictionsFilter<$PrismaModel>
  }

  export type EnumBoardSharingWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardSharing | EnumBoardSharingFieldRefInput<$PrismaModel>
    in?: $Enums.BoardSharing[] | ListEnumBoardSharingFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardSharing[] | ListEnumBoardSharingFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardSharingWithAggregatesFilter<$PrismaModel> | $Enums.BoardSharing
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardSharingFilter<$PrismaModel>
    _max?: NestedEnumBoardSharingFilter<$PrismaModel>
  }

  export type EnumSlackSharingWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SlackSharing | EnumSlackSharingFieldRefInput<$PrismaModel>
    in?: $Enums.SlackSharing[] | ListEnumSlackSharingFieldRefInput<$PrismaModel>
    notIn?: $Enums.SlackSharing[] | ListEnumSlackSharingFieldRefInput<$PrismaModel>
    not?: NestedEnumSlackSharingWithAggregatesFilter<$PrismaModel> | $Enums.SlackSharing
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSlackSharingFilter<$PrismaModel>
    _max?: NestedEnumSlackSharingFilter<$PrismaModel>
  }

  export type BoardCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<BoardCreateWithoutActivityLogsInput, BoardUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: BoardCreateOrConnectWithoutActivityLogsInput
    connect?: BoardWhereUniqueInput
  }

  export type CardCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<CardCreateWithoutActivityLogsInput, CardUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: CardCreateOrConnectWithoutActivityLogsInput
    connect?: CardWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutActivityLogsInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumActivityActionFieldUpdateOperationsInput = {
    set?: $Enums.ActivityAction
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoardUpdateOneRequiredWithoutActivityLogsNestedInput = {
    create?: XOR<BoardCreateWithoutActivityLogsInput, BoardUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: BoardCreateOrConnectWithoutActivityLogsInput
    upsert?: BoardUpsertWithoutActivityLogsInput
    connect?: BoardWhereUniqueInput
    update?: XOR<XOR<BoardUpdateToOneWithWhereWithoutActivityLogsInput, BoardUpdateWithoutActivityLogsInput>, BoardUncheckedUpdateWithoutActivityLogsInput>
  }

  export type CardUpdateOneWithoutActivityLogsNestedInput = {
    create?: XOR<CardCreateWithoutActivityLogsInput, CardUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: CardCreateOrConnectWithoutActivityLogsInput
    upsert?: CardUpsertWithoutActivityLogsInput
    disconnect?: CardWhereInput | boolean
    delete?: CardWhereInput | boolean
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutActivityLogsInput, CardUpdateWithoutActivityLogsInput>, CardUncheckedUpdateWithoutActivityLogsInput>
  }

  export type UserUpdateOneWithoutActivityLogsNestedInput = {
    create?: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityLogsInput
    upsert?: UserUpsertWithoutActivityLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityLogsInput, UserUpdateWithoutActivityLogsInput>, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CardCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<CardCreateWithoutAttachmentsInput, CardUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: CardCreateOrConnectWithoutAttachmentsInput
    connect?: CardWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttachmentsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type CardUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<CardCreateWithoutAttachmentsInput, CardUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: CardCreateOrConnectWithoutAttachmentsInput
    upsert?: CardUpsertWithoutAttachmentsInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutAttachmentsInput, CardUpdateWithoutAttachmentsInput>, CardUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttachmentsInput
    upsert?: UserUpsertWithoutAttachmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttachmentsInput, UserUpdateWithoutAttachmentsInput>, UserUncheckedUpdateWithoutAttachmentsInput>
  }

  export type BoardCreateNestedOneWithoutBoardMembersInput = {
    create?: XOR<BoardCreateWithoutBoardMembersInput, BoardUncheckedCreateWithoutBoardMembersInput>
    connectOrCreate?: BoardCreateOrConnectWithoutBoardMembersInput
    connect?: BoardWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBoardMembersInput = {
    create?: XOR<UserCreateWithoutBoardMembersInput, UserUncheckedCreateWithoutBoardMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardMembersInput
    connect?: UserWhereUniqueInput
  }

  export type EnumBoardRoleFieldUpdateOperationsInput = {
    set?: $Enums.BoardRole
  }

  export type BoardUpdateOneRequiredWithoutBoardMembersNestedInput = {
    create?: XOR<BoardCreateWithoutBoardMembersInput, BoardUncheckedCreateWithoutBoardMembersInput>
    connectOrCreate?: BoardCreateOrConnectWithoutBoardMembersInput
    upsert?: BoardUpsertWithoutBoardMembersInput
    connect?: BoardWhereUniqueInput
    update?: XOR<XOR<BoardUpdateToOneWithWhereWithoutBoardMembersInput, BoardUpdateWithoutBoardMembersInput>, BoardUncheckedUpdateWithoutBoardMembersInput>
  }

  export type UserUpdateOneRequiredWithoutBoardMembersNestedInput = {
    create?: XOR<UserCreateWithoutBoardMembersInput, UserUncheckedCreateWithoutBoardMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardMembersInput
    upsert?: UserUpsertWithoutBoardMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBoardMembersInput, UserUpdateWithoutBoardMembersInput>, UserUncheckedUpdateWithoutBoardMembersInput>
  }

  export type ActivityLogCreateNestedManyWithoutBoardInput = {
    create?: XOR<ActivityLogCreateWithoutBoardInput, ActivityLogUncheckedCreateWithoutBoardInput> | ActivityLogCreateWithoutBoardInput[] | ActivityLogUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutBoardInput | ActivityLogCreateOrConnectWithoutBoardInput[]
    createMany?: ActivityLogCreateManyBoardInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type BoardMemberCreateNestedManyWithoutBoardInput = {
    create?: XOR<BoardMemberCreateWithoutBoardInput, BoardMemberUncheckedCreateWithoutBoardInput> | BoardMemberCreateWithoutBoardInput[] | BoardMemberUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardMemberCreateOrConnectWithoutBoardInput | BoardMemberCreateOrConnectWithoutBoardInput[]
    createMany?: BoardMemberCreateManyBoardInputEnvelope
    connect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutBoardsInput = {
    create?: XOR<UserCreateWithoutBoardsInput, UserUncheckedCreateWithoutBoardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardsInput
    connect?: UserWhereUniqueInput
  }

  export type WorkspaceCreateNestedOneWithoutBoardsInput = {
    create?: XOR<WorkspaceCreateWithoutBoardsInput, WorkspaceUncheckedCreateWithoutBoardsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutBoardsInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type LabelCreateNestedManyWithoutBoardInput = {
    create?: XOR<LabelCreateWithoutBoardInput, LabelUncheckedCreateWithoutBoardInput> | LabelCreateWithoutBoardInput[] | LabelUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: LabelCreateOrConnectWithoutBoardInput | LabelCreateOrConnectWithoutBoardInput[]
    createMany?: LabelCreateManyBoardInputEnvelope
    connect?: LabelWhereUniqueInput | LabelWhereUniqueInput[]
  }

  export type ListCreateNestedManyWithoutBoardInput = {
    create?: XOR<ListCreateWithoutBoardInput, ListUncheckedCreateWithoutBoardInput> | ListCreateWithoutBoardInput[] | ListUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ListCreateOrConnectWithoutBoardInput | ListCreateOrConnectWithoutBoardInput[]
    createMany?: ListCreateManyBoardInputEnvelope
    connect?: ListWhereUniqueInput | ListWhereUniqueInput[]
  }

  export type ActivityLogUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<ActivityLogCreateWithoutBoardInput, ActivityLogUncheckedCreateWithoutBoardInput> | ActivityLogCreateWithoutBoardInput[] | ActivityLogUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutBoardInput | ActivityLogCreateOrConnectWithoutBoardInput[]
    createMany?: ActivityLogCreateManyBoardInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type BoardMemberUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<BoardMemberCreateWithoutBoardInput, BoardMemberUncheckedCreateWithoutBoardInput> | BoardMemberCreateWithoutBoardInput[] | BoardMemberUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardMemberCreateOrConnectWithoutBoardInput | BoardMemberCreateOrConnectWithoutBoardInput[]
    createMany?: BoardMemberCreateManyBoardInputEnvelope
    connect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
  }

  export type LabelUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<LabelCreateWithoutBoardInput, LabelUncheckedCreateWithoutBoardInput> | LabelCreateWithoutBoardInput[] | LabelUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: LabelCreateOrConnectWithoutBoardInput | LabelCreateOrConnectWithoutBoardInput[]
    createMany?: LabelCreateManyBoardInputEnvelope
    connect?: LabelWhereUniqueInput | LabelWhereUniqueInput[]
  }

  export type ListUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<ListCreateWithoutBoardInput, ListUncheckedCreateWithoutBoardInput> | ListCreateWithoutBoardInput[] | ListUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ListCreateOrConnectWithoutBoardInput | ListCreateOrConnectWithoutBoardInput[]
    createMany?: ListCreateManyBoardInputEnvelope
    connect?: ListWhereUniqueInput | ListWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumBoardBackgroundFieldUpdateOperationsInput = {
    set?: $Enums.BoardBackground
  }

  export type EnumBoardVisibilityFieldUpdateOperationsInput = {
    set?: $Enums.BoardVisibility
  }

  export type EnumMemberManageRestrictionsFieldUpdateOperationsInput = {
    set?: $Enums.MemberManageRestrictions
  }

  export type EnumCommentingRestrictionsFieldUpdateOperationsInput = {
    set?: $Enums.CommentingRestrictions
  }

  export type ActivityLogUpdateManyWithoutBoardNestedInput = {
    create?: XOR<ActivityLogCreateWithoutBoardInput, ActivityLogUncheckedCreateWithoutBoardInput> | ActivityLogCreateWithoutBoardInput[] | ActivityLogUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutBoardInput | ActivityLogCreateOrConnectWithoutBoardInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutBoardInput | ActivityLogUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: ActivityLogCreateManyBoardInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutBoardInput | ActivityLogUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutBoardInput | ActivityLogUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type BoardMemberUpdateManyWithoutBoardNestedInput = {
    create?: XOR<BoardMemberCreateWithoutBoardInput, BoardMemberUncheckedCreateWithoutBoardInput> | BoardMemberCreateWithoutBoardInput[] | BoardMemberUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardMemberCreateOrConnectWithoutBoardInput | BoardMemberCreateOrConnectWithoutBoardInput[]
    upsert?: BoardMemberUpsertWithWhereUniqueWithoutBoardInput | BoardMemberUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: BoardMemberCreateManyBoardInputEnvelope
    set?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    disconnect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    delete?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    connect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    update?: BoardMemberUpdateWithWhereUniqueWithoutBoardInput | BoardMemberUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: BoardMemberUpdateManyWithWhereWithoutBoardInput | BoardMemberUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: BoardMemberScalarWhereInput | BoardMemberScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutBoardsNestedInput = {
    create?: XOR<UserCreateWithoutBoardsInput, UserUncheckedCreateWithoutBoardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoardsInput
    upsert?: UserUpsertWithoutBoardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBoardsInput, UserUpdateWithoutBoardsInput>, UserUncheckedUpdateWithoutBoardsInput>
  }

  export type WorkspaceUpdateOneRequiredWithoutBoardsNestedInput = {
    create?: XOR<WorkspaceCreateWithoutBoardsInput, WorkspaceUncheckedCreateWithoutBoardsInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutBoardsInput
    upsert?: WorkspaceUpsertWithoutBoardsInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutBoardsInput, WorkspaceUpdateWithoutBoardsInput>, WorkspaceUncheckedUpdateWithoutBoardsInput>
  }

  export type LabelUpdateManyWithoutBoardNestedInput = {
    create?: XOR<LabelCreateWithoutBoardInput, LabelUncheckedCreateWithoutBoardInput> | LabelCreateWithoutBoardInput[] | LabelUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: LabelCreateOrConnectWithoutBoardInput | LabelCreateOrConnectWithoutBoardInput[]
    upsert?: LabelUpsertWithWhereUniqueWithoutBoardInput | LabelUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: LabelCreateManyBoardInputEnvelope
    set?: LabelWhereUniqueInput | LabelWhereUniqueInput[]
    disconnect?: LabelWhereUniqueInput | LabelWhereUniqueInput[]
    delete?: LabelWhereUniqueInput | LabelWhereUniqueInput[]
    connect?: LabelWhereUniqueInput | LabelWhereUniqueInput[]
    update?: LabelUpdateWithWhereUniqueWithoutBoardInput | LabelUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: LabelUpdateManyWithWhereWithoutBoardInput | LabelUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: LabelScalarWhereInput | LabelScalarWhereInput[]
  }

  export type ListUpdateManyWithoutBoardNestedInput = {
    create?: XOR<ListCreateWithoutBoardInput, ListUncheckedCreateWithoutBoardInput> | ListCreateWithoutBoardInput[] | ListUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ListCreateOrConnectWithoutBoardInput | ListCreateOrConnectWithoutBoardInput[]
    upsert?: ListUpsertWithWhereUniqueWithoutBoardInput | ListUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: ListCreateManyBoardInputEnvelope
    set?: ListWhereUniqueInput | ListWhereUniqueInput[]
    disconnect?: ListWhereUniqueInput | ListWhereUniqueInput[]
    delete?: ListWhereUniqueInput | ListWhereUniqueInput[]
    connect?: ListWhereUniqueInput | ListWhereUniqueInput[]
    update?: ListUpdateWithWhereUniqueWithoutBoardInput | ListUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: ListUpdateManyWithWhereWithoutBoardInput | ListUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: ListScalarWhereInput | ListScalarWhereInput[]
  }

  export type ActivityLogUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<ActivityLogCreateWithoutBoardInput, ActivityLogUncheckedCreateWithoutBoardInput> | ActivityLogCreateWithoutBoardInput[] | ActivityLogUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutBoardInput | ActivityLogCreateOrConnectWithoutBoardInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutBoardInput | ActivityLogUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: ActivityLogCreateManyBoardInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutBoardInput | ActivityLogUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutBoardInput | ActivityLogUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type BoardMemberUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<BoardMemberCreateWithoutBoardInput, BoardMemberUncheckedCreateWithoutBoardInput> | BoardMemberCreateWithoutBoardInput[] | BoardMemberUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: BoardMemberCreateOrConnectWithoutBoardInput | BoardMemberCreateOrConnectWithoutBoardInput[]
    upsert?: BoardMemberUpsertWithWhereUniqueWithoutBoardInput | BoardMemberUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: BoardMemberCreateManyBoardInputEnvelope
    set?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    disconnect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    delete?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    connect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    update?: BoardMemberUpdateWithWhereUniqueWithoutBoardInput | BoardMemberUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: BoardMemberUpdateManyWithWhereWithoutBoardInput | BoardMemberUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: BoardMemberScalarWhereInput | BoardMemberScalarWhereInput[]
  }

  export type LabelUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<LabelCreateWithoutBoardInput, LabelUncheckedCreateWithoutBoardInput> | LabelCreateWithoutBoardInput[] | LabelUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: LabelCreateOrConnectWithoutBoardInput | LabelCreateOrConnectWithoutBoardInput[]
    upsert?: LabelUpsertWithWhereUniqueWithoutBoardInput | LabelUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: LabelCreateManyBoardInputEnvelope
    set?: LabelWhereUniqueInput | LabelWhereUniqueInput[]
    disconnect?: LabelWhereUniqueInput | LabelWhereUniqueInput[]
    delete?: LabelWhereUniqueInput | LabelWhereUniqueInput[]
    connect?: LabelWhereUniqueInput | LabelWhereUniqueInput[]
    update?: LabelUpdateWithWhereUniqueWithoutBoardInput | LabelUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: LabelUpdateManyWithWhereWithoutBoardInput | LabelUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: LabelScalarWhereInput | LabelScalarWhereInput[]
  }

  export type ListUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<ListCreateWithoutBoardInput, ListUncheckedCreateWithoutBoardInput> | ListCreateWithoutBoardInput[] | ListUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ListCreateOrConnectWithoutBoardInput | ListCreateOrConnectWithoutBoardInput[]
    upsert?: ListUpsertWithWhereUniqueWithoutBoardInput | ListUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: ListCreateManyBoardInputEnvelope
    set?: ListWhereUniqueInput | ListWhereUniqueInput[]
    disconnect?: ListWhereUniqueInput | ListWhereUniqueInput[]
    delete?: ListWhereUniqueInput | ListWhereUniqueInput[]
    connect?: ListWhereUniqueInput | ListWhereUniqueInput[]
    update?: ListUpdateWithWhereUniqueWithoutBoardInput | ListUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: ListUpdateManyWithWhereWithoutBoardInput | ListUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: ListScalarWhereInput | ListScalarWhereInput[]
  }

  export type CardCreateNestedOneWithoutAssigneesInput = {
    create?: XOR<CardCreateWithoutAssigneesInput, CardUncheckedCreateWithoutAssigneesInput>
    connectOrCreate?: CardCreateOrConnectWithoutAssigneesInput
    connect?: CardWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCardAssigneesInput = {
    create?: XOR<UserCreateWithoutCardAssigneesInput, UserUncheckedCreateWithoutCardAssigneesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCardAssigneesInput
    connect?: UserWhereUniqueInput
  }

  export type CardUpdateOneRequiredWithoutAssigneesNestedInput = {
    create?: XOR<CardCreateWithoutAssigneesInput, CardUncheckedCreateWithoutAssigneesInput>
    connectOrCreate?: CardCreateOrConnectWithoutAssigneesInput
    upsert?: CardUpsertWithoutAssigneesInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutAssigneesInput, CardUpdateWithoutAssigneesInput>, CardUncheckedUpdateWithoutAssigneesInput>
  }

  export type UserUpdateOneRequiredWithoutCardAssigneesNestedInput = {
    create?: XOR<UserCreateWithoutCardAssigneesInput, UserUncheckedCreateWithoutCardAssigneesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCardAssigneesInput
    upsert?: UserUpsertWithoutCardAssigneesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCardAssigneesInput, UserUpdateWithoutCardAssigneesInput>, UserUncheckedUpdateWithoutCardAssigneesInput>
  }

  export type CardCreateNestedOneWithoutCardLabelsInput = {
    create?: XOR<CardCreateWithoutCardLabelsInput, CardUncheckedCreateWithoutCardLabelsInput>
    connectOrCreate?: CardCreateOrConnectWithoutCardLabelsInput
    connect?: CardWhereUniqueInput
  }

  export type LabelCreateNestedOneWithoutCardLabelsInput = {
    create?: XOR<LabelCreateWithoutCardLabelsInput, LabelUncheckedCreateWithoutCardLabelsInput>
    connectOrCreate?: LabelCreateOrConnectWithoutCardLabelsInput
    connect?: LabelWhereUniqueInput
  }

  export type CardUpdateOneRequiredWithoutCardLabelsNestedInput = {
    create?: XOR<CardCreateWithoutCardLabelsInput, CardUncheckedCreateWithoutCardLabelsInput>
    connectOrCreate?: CardCreateOrConnectWithoutCardLabelsInput
    upsert?: CardUpsertWithoutCardLabelsInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutCardLabelsInput, CardUpdateWithoutCardLabelsInput>, CardUncheckedUpdateWithoutCardLabelsInput>
  }

  export type LabelUpdateOneRequiredWithoutCardLabelsNestedInput = {
    create?: XOR<LabelCreateWithoutCardLabelsInput, LabelUncheckedCreateWithoutCardLabelsInput>
    connectOrCreate?: LabelCreateOrConnectWithoutCardLabelsInput
    upsert?: LabelUpsertWithoutCardLabelsInput
    connect?: LabelWhereUniqueInput
    update?: XOR<XOR<LabelUpdateToOneWithWhereWithoutCardLabelsInput, LabelUpdateWithoutCardLabelsInput>, LabelUncheckedUpdateWithoutCardLabelsInput>
  }

  export type CardCreateNestedOneWithoutWatchersInput = {
    create?: XOR<CardCreateWithoutWatchersInput, CardUncheckedCreateWithoutWatchersInput>
    connectOrCreate?: CardCreateOrConnectWithoutWatchersInput
    connect?: CardWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCardWatchersInput = {
    create?: XOR<UserCreateWithoutCardWatchersInput, UserUncheckedCreateWithoutCardWatchersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCardWatchersInput
    connect?: UserWhereUniqueInput
  }

  export type CardUpdateOneRequiredWithoutWatchersNestedInput = {
    create?: XOR<CardCreateWithoutWatchersInput, CardUncheckedCreateWithoutWatchersInput>
    connectOrCreate?: CardCreateOrConnectWithoutWatchersInput
    upsert?: CardUpsertWithoutWatchersInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutWatchersInput, CardUpdateWithoutWatchersInput>, CardUncheckedUpdateWithoutWatchersInput>
  }

  export type UserUpdateOneRequiredWithoutCardWatchersNestedInput = {
    create?: XOR<UserCreateWithoutCardWatchersInput, UserUncheckedCreateWithoutCardWatchersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCardWatchersInput
    upsert?: UserUpsertWithoutCardWatchersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCardWatchersInput, UserUpdateWithoutCardWatchersInput>, UserUncheckedUpdateWithoutCardWatchersInput>
  }

  export type ActivityLogCreateNestedManyWithoutCardInput = {
    create?: XOR<ActivityLogCreateWithoutCardInput, ActivityLogUncheckedCreateWithoutCardInput> | ActivityLogCreateWithoutCardInput[] | ActivityLogUncheckedCreateWithoutCardInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutCardInput | ActivityLogCreateOrConnectWithoutCardInput[]
    createMany?: ActivityLogCreateManyCardInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type AttachmentCreateNestedManyWithoutCardInput = {
    create?: XOR<AttachmentCreateWithoutCardInput, AttachmentUncheckedCreateWithoutCardInput> | AttachmentCreateWithoutCardInput[] | AttachmentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutCardInput | AttachmentCreateOrConnectWithoutCardInput[]
    createMany?: AttachmentCreateManyCardInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type CardAssigneeCreateNestedManyWithoutCardInput = {
    create?: XOR<CardAssigneeCreateWithoutCardInput, CardAssigneeUncheckedCreateWithoutCardInput> | CardAssigneeCreateWithoutCardInput[] | CardAssigneeUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardAssigneeCreateOrConnectWithoutCardInput | CardAssigneeCreateOrConnectWithoutCardInput[]
    createMany?: CardAssigneeCreateManyCardInputEnvelope
    connect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
  }

  export type CardLabelCreateNestedManyWithoutCardInput = {
    create?: XOR<CardLabelCreateWithoutCardInput, CardLabelUncheckedCreateWithoutCardInput> | CardLabelCreateWithoutCardInput[] | CardLabelUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardLabelCreateOrConnectWithoutCardInput | CardLabelCreateOrConnectWithoutCardInput[]
    createMany?: CardLabelCreateManyCardInputEnvelope
    connect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
  }

  export type CardWatcherCreateNestedManyWithoutCardInput = {
    create?: XOR<CardWatcherCreateWithoutCardInput, CardWatcherUncheckedCreateWithoutCardInput> | CardWatcherCreateWithoutCardInput[] | CardWatcherUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardWatcherCreateOrConnectWithoutCardInput | CardWatcherCreateOrConnectWithoutCardInput[]
    createMany?: CardWatcherCreateManyCardInputEnvelope
    connect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCardsInput = {
    create?: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCardsInput
    connect?: UserWhereUniqueInput
  }

  export type ListCreateNestedOneWithoutCardsInput = {
    create?: XOR<ListCreateWithoutCardsInput, ListUncheckedCreateWithoutCardsInput>
    connectOrCreate?: ListCreateOrConnectWithoutCardsInput
    connect?: ListWhereUniqueInput
  }

  export type ChecklistCreateNestedManyWithoutCardInput = {
    create?: XOR<ChecklistCreateWithoutCardInput, ChecklistUncheckedCreateWithoutCardInput> | ChecklistCreateWithoutCardInput[] | ChecklistUncheckedCreateWithoutCardInput[]
    connectOrCreate?: ChecklistCreateOrConnectWithoutCardInput | ChecklistCreateOrConnectWithoutCardInput[]
    createMany?: ChecklistCreateManyCardInputEnvelope
    connect?: ChecklistWhereUniqueInput | ChecklistWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutCardInput = {
    create?: XOR<CommentCreateWithoutCardInput, CommentUncheckedCreateWithoutCardInput> | CommentCreateWithoutCardInput[] | CommentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCardInput | CommentCreateOrConnectWithoutCardInput[]
    createMany?: CommentCreateManyCardInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ActivityLogUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<ActivityLogCreateWithoutCardInput, ActivityLogUncheckedCreateWithoutCardInput> | ActivityLogCreateWithoutCardInput[] | ActivityLogUncheckedCreateWithoutCardInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutCardInput | ActivityLogCreateOrConnectWithoutCardInput[]
    createMany?: ActivityLogCreateManyCardInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type AttachmentUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<AttachmentCreateWithoutCardInput, AttachmentUncheckedCreateWithoutCardInput> | AttachmentCreateWithoutCardInput[] | AttachmentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutCardInput | AttachmentCreateOrConnectWithoutCardInput[]
    createMany?: AttachmentCreateManyCardInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type CardAssigneeUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<CardAssigneeCreateWithoutCardInput, CardAssigneeUncheckedCreateWithoutCardInput> | CardAssigneeCreateWithoutCardInput[] | CardAssigneeUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardAssigneeCreateOrConnectWithoutCardInput | CardAssigneeCreateOrConnectWithoutCardInput[]
    createMany?: CardAssigneeCreateManyCardInputEnvelope
    connect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
  }

  export type CardLabelUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<CardLabelCreateWithoutCardInput, CardLabelUncheckedCreateWithoutCardInput> | CardLabelCreateWithoutCardInput[] | CardLabelUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardLabelCreateOrConnectWithoutCardInput | CardLabelCreateOrConnectWithoutCardInput[]
    createMany?: CardLabelCreateManyCardInputEnvelope
    connect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
  }

  export type CardWatcherUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<CardWatcherCreateWithoutCardInput, CardWatcherUncheckedCreateWithoutCardInput> | CardWatcherCreateWithoutCardInput[] | CardWatcherUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardWatcherCreateOrConnectWithoutCardInput | CardWatcherCreateOrConnectWithoutCardInput[]
    createMany?: CardWatcherCreateManyCardInputEnvelope
    connect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
  }

  export type ChecklistUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<ChecklistCreateWithoutCardInput, ChecklistUncheckedCreateWithoutCardInput> | ChecklistCreateWithoutCardInput[] | ChecklistUncheckedCreateWithoutCardInput[]
    connectOrCreate?: ChecklistCreateOrConnectWithoutCardInput | ChecklistCreateOrConnectWithoutCardInput[]
    createMany?: ChecklistCreateManyCardInputEnvelope
    connect?: ChecklistWhereUniqueInput | ChecklistWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutCardInput = {
    create?: XOR<CommentCreateWithoutCardInput, CommentUncheckedCreateWithoutCardInput> | CommentCreateWithoutCardInput[] | CommentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCardInput | CommentCreateOrConnectWithoutCardInput[]
    createMany?: CommentCreateManyCardInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ActivityLogUpdateManyWithoutCardNestedInput = {
    create?: XOR<ActivityLogCreateWithoutCardInput, ActivityLogUncheckedCreateWithoutCardInput> | ActivityLogCreateWithoutCardInput[] | ActivityLogUncheckedCreateWithoutCardInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutCardInput | ActivityLogCreateOrConnectWithoutCardInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutCardInput | ActivityLogUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: ActivityLogCreateManyCardInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutCardInput | ActivityLogUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutCardInput | ActivityLogUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type AttachmentUpdateManyWithoutCardNestedInput = {
    create?: XOR<AttachmentCreateWithoutCardInput, AttachmentUncheckedCreateWithoutCardInput> | AttachmentCreateWithoutCardInput[] | AttachmentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutCardInput | AttachmentCreateOrConnectWithoutCardInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutCardInput | AttachmentUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: AttachmentCreateManyCardInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutCardInput | AttachmentUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutCardInput | AttachmentUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type CardAssigneeUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardAssigneeCreateWithoutCardInput, CardAssigneeUncheckedCreateWithoutCardInput> | CardAssigneeCreateWithoutCardInput[] | CardAssigneeUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardAssigneeCreateOrConnectWithoutCardInput | CardAssigneeCreateOrConnectWithoutCardInput[]
    upsert?: CardAssigneeUpsertWithWhereUniqueWithoutCardInput | CardAssigneeUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardAssigneeCreateManyCardInputEnvelope
    set?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    disconnect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    delete?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    connect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    update?: CardAssigneeUpdateWithWhereUniqueWithoutCardInput | CardAssigneeUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardAssigneeUpdateManyWithWhereWithoutCardInput | CardAssigneeUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardAssigneeScalarWhereInput | CardAssigneeScalarWhereInput[]
  }

  export type CardLabelUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardLabelCreateWithoutCardInput, CardLabelUncheckedCreateWithoutCardInput> | CardLabelCreateWithoutCardInput[] | CardLabelUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardLabelCreateOrConnectWithoutCardInput | CardLabelCreateOrConnectWithoutCardInput[]
    upsert?: CardLabelUpsertWithWhereUniqueWithoutCardInput | CardLabelUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardLabelCreateManyCardInputEnvelope
    set?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    disconnect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    delete?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    connect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    update?: CardLabelUpdateWithWhereUniqueWithoutCardInput | CardLabelUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardLabelUpdateManyWithWhereWithoutCardInput | CardLabelUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardLabelScalarWhereInput | CardLabelScalarWhereInput[]
  }

  export type CardWatcherUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardWatcherCreateWithoutCardInput, CardWatcherUncheckedCreateWithoutCardInput> | CardWatcherCreateWithoutCardInput[] | CardWatcherUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardWatcherCreateOrConnectWithoutCardInput | CardWatcherCreateOrConnectWithoutCardInput[]
    upsert?: CardWatcherUpsertWithWhereUniqueWithoutCardInput | CardWatcherUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardWatcherCreateManyCardInputEnvelope
    set?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    disconnect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    delete?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    connect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    update?: CardWatcherUpdateWithWhereUniqueWithoutCardInput | CardWatcherUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardWatcherUpdateManyWithWhereWithoutCardInput | CardWatcherUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardWatcherScalarWhereInput | CardWatcherScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCardsInput
    upsert?: UserUpsertWithoutCardsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCardsInput, UserUpdateWithoutCardsInput>, UserUncheckedUpdateWithoutCardsInput>
  }

  export type ListUpdateOneRequiredWithoutCardsNestedInput = {
    create?: XOR<ListCreateWithoutCardsInput, ListUncheckedCreateWithoutCardsInput>
    connectOrCreate?: ListCreateOrConnectWithoutCardsInput
    upsert?: ListUpsertWithoutCardsInput
    connect?: ListWhereUniqueInput
    update?: XOR<XOR<ListUpdateToOneWithWhereWithoutCardsInput, ListUpdateWithoutCardsInput>, ListUncheckedUpdateWithoutCardsInput>
  }

  export type ChecklistUpdateManyWithoutCardNestedInput = {
    create?: XOR<ChecklistCreateWithoutCardInput, ChecklistUncheckedCreateWithoutCardInput> | ChecklistCreateWithoutCardInput[] | ChecklistUncheckedCreateWithoutCardInput[]
    connectOrCreate?: ChecklistCreateOrConnectWithoutCardInput | ChecklistCreateOrConnectWithoutCardInput[]
    upsert?: ChecklistUpsertWithWhereUniqueWithoutCardInput | ChecklistUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: ChecklistCreateManyCardInputEnvelope
    set?: ChecklistWhereUniqueInput | ChecklistWhereUniqueInput[]
    disconnect?: ChecklistWhereUniqueInput | ChecklistWhereUniqueInput[]
    delete?: ChecklistWhereUniqueInput | ChecklistWhereUniqueInput[]
    connect?: ChecklistWhereUniqueInput | ChecklistWhereUniqueInput[]
    update?: ChecklistUpdateWithWhereUniqueWithoutCardInput | ChecklistUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: ChecklistUpdateManyWithWhereWithoutCardInput | ChecklistUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: ChecklistScalarWhereInput | ChecklistScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutCardNestedInput = {
    create?: XOR<CommentCreateWithoutCardInput, CommentUncheckedCreateWithoutCardInput> | CommentCreateWithoutCardInput[] | CommentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCardInput | CommentCreateOrConnectWithoutCardInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCardInput | CommentUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CommentCreateManyCardInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCardInput | CommentUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCardInput | CommentUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ActivityLogUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<ActivityLogCreateWithoutCardInput, ActivityLogUncheckedCreateWithoutCardInput> | ActivityLogCreateWithoutCardInput[] | ActivityLogUncheckedCreateWithoutCardInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutCardInput | ActivityLogCreateOrConnectWithoutCardInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutCardInput | ActivityLogUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: ActivityLogCreateManyCardInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutCardInput | ActivityLogUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutCardInput | ActivityLogUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type AttachmentUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<AttachmentCreateWithoutCardInput, AttachmentUncheckedCreateWithoutCardInput> | AttachmentCreateWithoutCardInput[] | AttachmentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutCardInput | AttachmentCreateOrConnectWithoutCardInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutCardInput | AttachmentUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: AttachmentCreateManyCardInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutCardInput | AttachmentUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutCardInput | AttachmentUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type CardAssigneeUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardAssigneeCreateWithoutCardInput, CardAssigneeUncheckedCreateWithoutCardInput> | CardAssigneeCreateWithoutCardInput[] | CardAssigneeUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardAssigneeCreateOrConnectWithoutCardInput | CardAssigneeCreateOrConnectWithoutCardInput[]
    upsert?: CardAssigneeUpsertWithWhereUniqueWithoutCardInput | CardAssigneeUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardAssigneeCreateManyCardInputEnvelope
    set?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    disconnect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    delete?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    connect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    update?: CardAssigneeUpdateWithWhereUniqueWithoutCardInput | CardAssigneeUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardAssigneeUpdateManyWithWhereWithoutCardInput | CardAssigneeUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardAssigneeScalarWhereInput | CardAssigneeScalarWhereInput[]
  }

  export type CardLabelUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardLabelCreateWithoutCardInput, CardLabelUncheckedCreateWithoutCardInput> | CardLabelCreateWithoutCardInput[] | CardLabelUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardLabelCreateOrConnectWithoutCardInput | CardLabelCreateOrConnectWithoutCardInput[]
    upsert?: CardLabelUpsertWithWhereUniqueWithoutCardInput | CardLabelUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardLabelCreateManyCardInputEnvelope
    set?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    disconnect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    delete?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    connect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    update?: CardLabelUpdateWithWhereUniqueWithoutCardInput | CardLabelUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardLabelUpdateManyWithWhereWithoutCardInput | CardLabelUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardLabelScalarWhereInput | CardLabelScalarWhereInput[]
  }

  export type CardWatcherUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<CardWatcherCreateWithoutCardInput, CardWatcherUncheckedCreateWithoutCardInput> | CardWatcherCreateWithoutCardInput[] | CardWatcherUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CardWatcherCreateOrConnectWithoutCardInput | CardWatcherCreateOrConnectWithoutCardInput[]
    upsert?: CardWatcherUpsertWithWhereUniqueWithoutCardInput | CardWatcherUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CardWatcherCreateManyCardInputEnvelope
    set?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    disconnect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    delete?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    connect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    update?: CardWatcherUpdateWithWhereUniqueWithoutCardInput | CardWatcherUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CardWatcherUpdateManyWithWhereWithoutCardInput | CardWatcherUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CardWatcherScalarWhereInput | CardWatcherScalarWhereInput[]
  }

  export type ChecklistUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<ChecklistCreateWithoutCardInput, ChecklistUncheckedCreateWithoutCardInput> | ChecklistCreateWithoutCardInput[] | ChecklistUncheckedCreateWithoutCardInput[]
    connectOrCreate?: ChecklistCreateOrConnectWithoutCardInput | ChecklistCreateOrConnectWithoutCardInput[]
    upsert?: ChecklistUpsertWithWhereUniqueWithoutCardInput | ChecklistUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: ChecklistCreateManyCardInputEnvelope
    set?: ChecklistWhereUniqueInput | ChecklistWhereUniqueInput[]
    disconnect?: ChecklistWhereUniqueInput | ChecklistWhereUniqueInput[]
    delete?: ChecklistWhereUniqueInput | ChecklistWhereUniqueInput[]
    connect?: ChecklistWhereUniqueInput | ChecklistWhereUniqueInput[]
    update?: ChecklistUpdateWithWhereUniqueWithoutCardInput | ChecklistUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: ChecklistUpdateManyWithWhereWithoutCardInput | ChecklistUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: ChecklistScalarWhereInput | ChecklistScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutCardNestedInput = {
    create?: XOR<CommentCreateWithoutCardInput, CommentUncheckedCreateWithoutCardInput> | CommentCreateWithoutCardInput[] | CommentUncheckedCreateWithoutCardInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCardInput | CommentCreateOrConnectWithoutCardInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCardInput | CommentUpsertWithWhereUniqueWithoutCardInput[]
    createMany?: CommentCreateManyCardInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCardInput | CommentUpdateWithWhereUniqueWithoutCardInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCardInput | CommentUpdateManyWithWhereWithoutCardInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ChecklistItemCreateNestedOneWithoutAssigneesInput = {
    create?: XOR<ChecklistItemCreateWithoutAssigneesInput, ChecklistItemUncheckedCreateWithoutAssigneesInput>
    connectOrCreate?: ChecklistItemCreateOrConnectWithoutAssigneesInput
    connect?: ChecklistItemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChecklistItemAssigneesInput = {
    create?: XOR<UserCreateWithoutChecklistItemAssigneesInput, UserUncheckedCreateWithoutChecklistItemAssigneesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChecklistItemAssigneesInput
    connect?: UserWhereUniqueInput
  }

  export type ChecklistItemUpdateOneRequiredWithoutAssigneesNestedInput = {
    create?: XOR<ChecklistItemCreateWithoutAssigneesInput, ChecklistItemUncheckedCreateWithoutAssigneesInput>
    connectOrCreate?: ChecklistItemCreateOrConnectWithoutAssigneesInput
    upsert?: ChecklistItemUpsertWithoutAssigneesInput
    connect?: ChecklistItemWhereUniqueInput
    update?: XOR<XOR<ChecklistItemUpdateToOneWithWhereWithoutAssigneesInput, ChecklistItemUpdateWithoutAssigneesInput>, ChecklistItemUncheckedUpdateWithoutAssigneesInput>
  }

  export type UserUpdateOneRequiredWithoutChecklistItemAssigneesNestedInput = {
    create?: XOR<UserCreateWithoutChecklistItemAssigneesInput, UserUncheckedCreateWithoutChecklistItemAssigneesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChecklistItemAssigneesInput
    upsert?: UserUpsertWithoutChecklistItemAssigneesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChecklistItemAssigneesInput, UserUpdateWithoutChecklistItemAssigneesInput>, UserUncheckedUpdateWithoutChecklistItemAssigneesInput>
  }

  export type ChecklistItemAssigneeCreateNestedManyWithoutItemInput = {
    create?: XOR<ChecklistItemAssigneeCreateWithoutItemInput, ChecklistItemAssigneeUncheckedCreateWithoutItemInput> | ChecklistItemAssigneeCreateWithoutItemInput[] | ChecklistItemAssigneeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ChecklistItemAssigneeCreateOrConnectWithoutItemInput | ChecklistItemAssigneeCreateOrConnectWithoutItemInput[]
    createMany?: ChecklistItemAssigneeCreateManyItemInputEnvelope
    connect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
  }

  export type ChecklistCreateNestedOneWithoutItemsInput = {
    create?: XOR<ChecklistCreateWithoutItemsInput, ChecklistUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ChecklistCreateOrConnectWithoutItemsInput
    connect?: ChecklistWhereUniqueInput
  }

  export type ChecklistItemAssigneeUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<ChecklistItemAssigneeCreateWithoutItemInput, ChecklistItemAssigneeUncheckedCreateWithoutItemInput> | ChecklistItemAssigneeCreateWithoutItemInput[] | ChecklistItemAssigneeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ChecklistItemAssigneeCreateOrConnectWithoutItemInput | ChecklistItemAssigneeCreateOrConnectWithoutItemInput[]
    createMany?: ChecklistItemAssigneeCreateManyItemInputEnvelope
    connect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
  }

  export type ChecklistItemAssigneeUpdateManyWithoutItemNestedInput = {
    create?: XOR<ChecklistItemAssigneeCreateWithoutItemInput, ChecklistItemAssigneeUncheckedCreateWithoutItemInput> | ChecklistItemAssigneeCreateWithoutItemInput[] | ChecklistItemAssigneeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ChecklistItemAssigneeCreateOrConnectWithoutItemInput | ChecklistItemAssigneeCreateOrConnectWithoutItemInput[]
    upsert?: ChecklistItemAssigneeUpsertWithWhereUniqueWithoutItemInput | ChecklistItemAssigneeUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ChecklistItemAssigneeCreateManyItemInputEnvelope
    set?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    disconnect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    delete?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    connect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    update?: ChecklistItemAssigneeUpdateWithWhereUniqueWithoutItemInput | ChecklistItemAssigneeUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ChecklistItemAssigneeUpdateManyWithWhereWithoutItemInput | ChecklistItemAssigneeUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ChecklistItemAssigneeScalarWhereInput | ChecklistItemAssigneeScalarWhereInput[]
  }

  export type ChecklistUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ChecklistCreateWithoutItemsInput, ChecklistUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ChecklistCreateOrConnectWithoutItemsInput
    upsert?: ChecklistUpsertWithoutItemsInput
    connect?: ChecklistWhereUniqueInput
    update?: XOR<XOR<ChecklistUpdateToOneWithWhereWithoutItemsInput, ChecklistUpdateWithoutItemsInput>, ChecklistUncheckedUpdateWithoutItemsInput>
  }

  export type ChecklistItemAssigneeUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<ChecklistItemAssigneeCreateWithoutItemInput, ChecklistItemAssigneeUncheckedCreateWithoutItemInput> | ChecklistItemAssigneeCreateWithoutItemInput[] | ChecklistItemAssigneeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: ChecklistItemAssigneeCreateOrConnectWithoutItemInput | ChecklistItemAssigneeCreateOrConnectWithoutItemInput[]
    upsert?: ChecklistItemAssigneeUpsertWithWhereUniqueWithoutItemInput | ChecklistItemAssigneeUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: ChecklistItemAssigneeCreateManyItemInputEnvelope
    set?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    disconnect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    delete?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    connect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    update?: ChecklistItemAssigneeUpdateWithWhereUniqueWithoutItemInput | ChecklistItemAssigneeUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: ChecklistItemAssigneeUpdateManyWithWhereWithoutItemInput | ChecklistItemAssigneeUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: ChecklistItemAssigneeScalarWhereInput | ChecklistItemAssigneeScalarWhereInput[]
  }

  export type ChecklistItemCreateNestedManyWithoutChecklistInput = {
    create?: XOR<ChecklistItemCreateWithoutChecklistInput, ChecklistItemUncheckedCreateWithoutChecklistInput> | ChecklistItemCreateWithoutChecklistInput[] | ChecklistItemUncheckedCreateWithoutChecklistInput[]
    connectOrCreate?: ChecklistItemCreateOrConnectWithoutChecklistInput | ChecklistItemCreateOrConnectWithoutChecklistInput[]
    createMany?: ChecklistItemCreateManyChecklistInputEnvelope
    connect?: ChecklistItemWhereUniqueInput | ChecklistItemWhereUniqueInput[]
  }

  export type CardCreateNestedOneWithoutChecklistsInput = {
    create?: XOR<CardCreateWithoutChecklistsInput, CardUncheckedCreateWithoutChecklistsInput>
    connectOrCreate?: CardCreateOrConnectWithoutChecklistsInput
    connect?: CardWhereUniqueInput
  }

  export type ChecklistItemUncheckedCreateNestedManyWithoutChecklistInput = {
    create?: XOR<ChecklistItemCreateWithoutChecklistInput, ChecklistItemUncheckedCreateWithoutChecklistInput> | ChecklistItemCreateWithoutChecklistInput[] | ChecklistItemUncheckedCreateWithoutChecklistInput[]
    connectOrCreate?: ChecklistItemCreateOrConnectWithoutChecklistInput | ChecklistItemCreateOrConnectWithoutChecklistInput[]
    createMany?: ChecklistItemCreateManyChecklistInputEnvelope
    connect?: ChecklistItemWhereUniqueInput | ChecklistItemWhereUniqueInput[]
  }

  export type ChecklistItemUpdateManyWithoutChecklistNestedInput = {
    create?: XOR<ChecklistItemCreateWithoutChecklistInput, ChecklistItemUncheckedCreateWithoutChecklistInput> | ChecklistItemCreateWithoutChecklistInput[] | ChecklistItemUncheckedCreateWithoutChecklistInput[]
    connectOrCreate?: ChecklistItemCreateOrConnectWithoutChecklistInput | ChecklistItemCreateOrConnectWithoutChecklistInput[]
    upsert?: ChecklistItemUpsertWithWhereUniqueWithoutChecklistInput | ChecklistItemUpsertWithWhereUniqueWithoutChecklistInput[]
    createMany?: ChecklistItemCreateManyChecklistInputEnvelope
    set?: ChecklistItemWhereUniqueInput | ChecklistItemWhereUniqueInput[]
    disconnect?: ChecklistItemWhereUniqueInput | ChecklistItemWhereUniqueInput[]
    delete?: ChecklistItemWhereUniqueInput | ChecklistItemWhereUniqueInput[]
    connect?: ChecklistItemWhereUniqueInput | ChecklistItemWhereUniqueInput[]
    update?: ChecklistItemUpdateWithWhereUniqueWithoutChecklistInput | ChecklistItemUpdateWithWhereUniqueWithoutChecklistInput[]
    updateMany?: ChecklistItemUpdateManyWithWhereWithoutChecklistInput | ChecklistItemUpdateManyWithWhereWithoutChecklistInput[]
    deleteMany?: ChecklistItemScalarWhereInput | ChecklistItemScalarWhereInput[]
  }

  export type CardUpdateOneRequiredWithoutChecklistsNestedInput = {
    create?: XOR<CardCreateWithoutChecklistsInput, CardUncheckedCreateWithoutChecklistsInput>
    connectOrCreate?: CardCreateOrConnectWithoutChecklistsInput
    upsert?: CardUpsertWithoutChecklistsInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutChecklistsInput, CardUpdateWithoutChecklistsInput>, CardUncheckedUpdateWithoutChecklistsInput>
  }

  export type ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInput = {
    create?: XOR<ChecklistItemCreateWithoutChecklistInput, ChecklistItemUncheckedCreateWithoutChecklistInput> | ChecklistItemCreateWithoutChecklistInput[] | ChecklistItemUncheckedCreateWithoutChecklistInput[]
    connectOrCreate?: ChecklistItemCreateOrConnectWithoutChecklistInput | ChecklistItemCreateOrConnectWithoutChecklistInput[]
    upsert?: ChecklistItemUpsertWithWhereUniqueWithoutChecklistInput | ChecklistItemUpsertWithWhereUniqueWithoutChecklistInput[]
    createMany?: ChecklistItemCreateManyChecklistInputEnvelope
    set?: ChecklistItemWhereUniqueInput | ChecklistItemWhereUniqueInput[]
    disconnect?: ChecklistItemWhereUniqueInput | ChecklistItemWhereUniqueInput[]
    delete?: ChecklistItemWhereUniqueInput | ChecklistItemWhereUniqueInput[]
    connect?: ChecklistItemWhereUniqueInput | ChecklistItemWhereUniqueInput[]
    update?: ChecklistItemUpdateWithWhereUniqueWithoutChecklistInput | ChecklistItemUpdateWithWhereUniqueWithoutChecklistInput[]
    updateMany?: ChecklistItemUpdateManyWithWhereWithoutChecklistInput | ChecklistItemUpdateManyWithWhereWithoutChecklistInput[]
    deleteMany?: ChecklistItemScalarWhereInput | ChecklistItemScalarWhereInput[]
  }

  export type CardCreateNestedOneWithoutCommentsInput = {
    create?: XOR<CardCreateWithoutCommentsInput, CardUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CardCreateOrConnectWithoutCommentsInput
    connect?: CardWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type CardUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<CardCreateWithoutCommentsInput, CardUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CardCreateOrConnectWithoutCommentsInput
    upsert?: CardUpsertWithoutCommentsInput
    connect?: CardWhereUniqueInput
    update?: XOR<XOR<CardUpdateToOneWithWhereWithoutCommentsInput, CardUpdateWithoutCommentsInput>, CardUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type CardLabelCreateNestedManyWithoutLabelInput = {
    create?: XOR<CardLabelCreateWithoutLabelInput, CardLabelUncheckedCreateWithoutLabelInput> | CardLabelCreateWithoutLabelInput[] | CardLabelUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: CardLabelCreateOrConnectWithoutLabelInput | CardLabelCreateOrConnectWithoutLabelInput[]
    createMany?: CardLabelCreateManyLabelInputEnvelope
    connect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
  }

  export type BoardCreateNestedOneWithoutLabelsInput = {
    create?: XOR<BoardCreateWithoutLabelsInput, BoardUncheckedCreateWithoutLabelsInput>
    connectOrCreate?: BoardCreateOrConnectWithoutLabelsInput
    connect?: BoardWhereUniqueInput
  }

  export type CardLabelUncheckedCreateNestedManyWithoutLabelInput = {
    create?: XOR<CardLabelCreateWithoutLabelInput, CardLabelUncheckedCreateWithoutLabelInput> | CardLabelCreateWithoutLabelInput[] | CardLabelUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: CardLabelCreateOrConnectWithoutLabelInput | CardLabelCreateOrConnectWithoutLabelInput[]
    createMany?: CardLabelCreateManyLabelInputEnvelope
    connect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
  }

  export type EnumColorFieldUpdateOperationsInput = {
    set?: $Enums.Color
  }

  export type CardLabelUpdateManyWithoutLabelNestedInput = {
    create?: XOR<CardLabelCreateWithoutLabelInput, CardLabelUncheckedCreateWithoutLabelInput> | CardLabelCreateWithoutLabelInput[] | CardLabelUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: CardLabelCreateOrConnectWithoutLabelInput | CardLabelCreateOrConnectWithoutLabelInput[]
    upsert?: CardLabelUpsertWithWhereUniqueWithoutLabelInput | CardLabelUpsertWithWhereUniqueWithoutLabelInput[]
    createMany?: CardLabelCreateManyLabelInputEnvelope
    set?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    disconnect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    delete?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    connect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    update?: CardLabelUpdateWithWhereUniqueWithoutLabelInput | CardLabelUpdateWithWhereUniqueWithoutLabelInput[]
    updateMany?: CardLabelUpdateManyWithWhereWithoutLabelInput | CardLabelUpdateManyWithWhereWithoutLabelInput[]
    deleteMany?: CardLabelScalarWhereInput | CardLabelScalarWhereInput[]
  }

  export type BoardUpdateOneRequiredWithoutLabelsNestedInput = {
    create?: XOR<BoardCreateWithoutLabelsInput, BoardUncheckedCreateWithoutLabelsInput>
    connectOrCreate?: BoardCreateOrConnectWithoutLabelsInput
    upsert?: BoardUpsertWithoutLabelsInput
    connect?: BoardWhereUniqueInput
    update?: XOR<XOR<BoardUpdateToOneWithWhereWithoutLabelsInput, BoardUpdateWithoutLabelsInput>, BoardUncheckedUpdateWithoutLabelsInput>
  }

  export type CardLabelUncheckedUpdateManyWithoutLabelNestedInput = {
    create?: XOR<CardLabelCreateWithoutLabelInput, CardLabelUncheckedCreateWithoutLabelInput> | CardLabelCreateWithoutLabelInput[] | CardLabelUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: CardLabelCreateOrConnectWithoutLabelInput | CardLabelCreateOrConnectWithoutLabelInput[]
    upsert?: CardLabelUpsertWithWhereUniqueWithoutLabelInput | CardLabelUpsertWithWhereUniqueWithoutLabelInput[]
    createMany?: CardLabelCreateManyLabelInputEnvelope
    set?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    disconnect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    delete?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    connect?: CardLabelWhereUniqueInput | CardLabelWhereUniqueInput[]
    update?: CardLabelUpdateWithWhereUniqueWithoutLabelInput | CardLabelUpdateWithWhereUniqueWithoutLabelInput[]
    updateMany?: CardLabelUpdateManyWithWhereWithoutLabelInput | CardLabelUpdateManyWithWhereWithoutLabelInput[]
    deleteMany?: CardLabelScalarWhereInput | CardLabelScalarWhereInput[]
  }

  export type ListCreateNestedOneWithoutWatchersInput = {
    create?: XOR<ListCreateWithoutWatchersInput, ListUncheckedCreateWithoutWatchersInput>
    connectOrCreate?: ListCreateOrConnectWithoutWatchersInput
    connect?: ListWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutListWatchersInput = {
    create?: XOR<UserCreateWithoutListWatchersInput, UserUncheckedCreateWithoutListWatchersInput>
    connectOrCreate?: UserCreateOrConnectWithoutListWatchersInput
    connect?: UserWhereUniqueInput
  }

  export type ListUpdateOneRequiredWithoutWatchersNestedInput = {
    create?: XOR<ListCreateWithoutWatchersInput, ListUncheckedCreateWithoutWatchersInput>
    connectOrCreate?: ListCreateOrConnectWithoutWatchersInput
    upsert?: ListUpsertWithoutWatchersInput
    connect?: ListWhereUniqueInput
    update?: XOR<XOR<ListUpdateToOneWithWhereWithoutWatchersInput, ListUpdateWithoutWatchersInput>, ListUncheckedUpdateWithoutWatchersInput>
  }

  export type UserUpdateOneRequiredWithoutListWatchersNestedInput = {
    create?: XOR<UserCreateWithoutListWatchersInput, UserUncheckedCreateWithoutListWatchersInput>
    connectOrCreate?: UserCreateOrConnectWithoutListWatchersInput
    upsert?: UserUpsertWithoutListWatchersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutListWatchersInput, UserUpdateWithoutListWatchersInput>, UserUncheckedUpdateWithoutListWatchersInput>
  }

  export type CardCreateNestedManyWithoutListInput = {
    create?: XOR<CardCreateWithoutListInput, CardUncheckedCreateWithoutListInput> | CardCreateWithoutListInput[] | CardUncheckedCreateWithoutListInput[]
    connectOrCreate?: CardCreateOrConnectWithoutListInput | CardCreateOrConnectWithoutListInput[]
    createMany?: CardCreateManyListInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type ListWatcherCreateNestedManyWithoutListInput = {
    create?: XOR<ListWatcherCreateWithoutListInput, ListWatcherUncheckedCreateWithoutListInput> | ListWatcherCreateWithoutListInput[] | ListWatcherUncheckedCreateWithoutListInput[]
    connectOrCreate?: ListWatcherCreateOrConnectWithoutListInput | ListWatcherCreateOrConnectWithoutListInput[]
    createMany?: ListWatcherCreateManyListInputEnvelope
    connect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
  }

  export type BoardCreateNestedOneWithoutListsInput = {
    create?: XOR<BoardCreateWithoutListsInput, BoardUncheckedCreateWithoutListsInput>
    connectOrCreate?: BoardCreateOrConnectWithoutListsInput
    connect?: BoardWhereUniqueInput
  }

  export type CardUncheckedCreateNestedManyWithoutListInput = {
    create?: XOR<CardCreateWithoutListInput, CardUncheckedCreateWithoutListInput> | CardCreateWithoutListInput[] | CardUncheckedCreateWithoutListInput[]
    connectOrCreate?: CardCreateOrConnectWithoutListInput | CardCreateOrConnectWithoutListInput[]
    createMany?: CardCreateManyListInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type ListWatcherUncheckedCreateNestedManyWithoutListInput = {
    create?: XOR<ListWatcherCreateWithoutListInput, ListWatcherUncheckedCreateWithoutListInput> | ListWatcherCreateWithoutListInput[] | ListWatcherUncheckedCreateWithoutListInput[]
    connectOrCreate?: ListWatcherCreateOrConnectWithoutListInput | ListWatcherCreateOrConnectWithoutListInput[]
    createMany?: ListWatcherCreateManyListInputEnvelope
    connect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
  }

  export type CardUpdateManyWithoutListNestedInput = {
    create?: XOR<CardCreateWithoutListInput, CardUncheckedCreateWithoutListInput> | CardCreateWithoutListInput[] | CardUncheckedCreateWithoutListInput[]
    connectOrCreate?: CardCreateOrConnectWithoutListInput | CardCreateOrConnectWithoutListInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutListInput | CardUpsertWithWhereUniqueWithoutListInput[]
    createMany?: CardCreateManyListInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutListInput | CardUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: CardUpdateManyWithWhereWithoutListInput | CardUpdateManyWithWhereWithoutListInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type ListWatcherUpdateManyWithoutListNestedInput = {
    create?: XOR<ListWatcherCreateWithoutListInput, ListWatcherUncheckedCreateWithoutListInput> | ListWatcherCreateWithoutListInput[] | ListWatcherUncheckedCreateWithoutListInput[]
    connectOrCreate?: ListWatcherCreateOrConnectWithoutListInput | ListWatcherCreateOrConnectWithoutListInput[]
    upsert?: ListWatcherUpsertWithWhereUniqueWithoutListInput | ListWatcherUpsertWithWhereUniqueWithoutListInput[]
    createMany?: ListWatcherCreateManyListInputEnvelope
    set?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    disconnect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    delete?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    connect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    update?: ListWatcherUpdateWithWhereUniqueWithoutListInput | ListWatcherUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: ListWatcherUpdateManyWithWhereWithoutListInput | ListWatcherUpdateManyWithWhereWithoutListInput[]
    deleteMany?: ListWatcherScalarWhereInput | ListWatcherScalarWhereInput[]
  }

  export type BoardUpdateOneRequiredWithoutListsNestedInput = {
    create?: XOR<BoardCreateWithoutListsInput, BoardUncheckedCreateWithoutListsInput>
    connectOrCreate?: BoardCreateOrConnectWithoutListsInput
    upsert?: BoardUpsertWithoutListsInput
    connect?: BoardWhereUniqueInput
    update?: XOR<XOR<BoardUpdateToOneWithWhereWithoutListsInput, BoardUpdateWithoutListsInput>, BoardUncheckedUpdateWithoutListsInput>
  }

  export type CardUncheckedUpdateManyWithoutListNestedInput = {
    create?: XOR<CardCreateWithoutListInput, CardUncheckedCreateWithoutListInput> | CardCreateWithoutListInput[] | CardUncheckedCreateWithoutListInput[]
    connectOrCreate?: CardCreateOrConnectWithoutListInput | CardCreateOrConnectWithoutListInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutListInput | CardUpsertWithWhereUniqueWithoutListInput[]
    createMany?: CardCreateManyListInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutListInput | CardUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: CardUpdateManyWithWhereWithoutListInput | CardUpdateManyWithWhereWithoutListInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type ListWatcherUncheckedUpdateManyWithoutListNestedInput = {
    create?: XOR<ListWatcherCreateWithoutListInput, ListWatcherUncheckedCreateWithoutListInput> | ListWatcherCreateWithoutListInput[] | ListWatcherUncheckedCreateWithoutListInput[]
    connectOrCreate?: ListWatcherCreateOrConnectWithoutListInput | ListWatcherCreateOrConnectWithoutListInput[]
    upsert?: ListWatcherUpsertWithWhereUniqueWithoutListInput | ListWatcherUpsertWithWhereUniqueWithoutListInput[]
    createMany?: ListWatcherCreateManyListInputEnvelope
    set?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    disconnect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    delete?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    connect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    update?: ListWatcherUpdateWithWhereUniqueWithoutListInput | ListWatcherUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: ListWatcherUpdateManyWithWhereWithoutListInput | ListWatcherUpdateManyWithWhereWithoutListInput[]
    deleteMany?: ListWatcherScalarWhereInput | ListWatcherScalarWhereInput[]
  }

  export type UserCreaterecentlyViewedBoardsInput = {
    set: string[]
  }

  export type ActivityLogCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type AttachmentCreateNestedManyWithoutUserInput = {
    create?: XOR<AttachmentCreateWithoutUserInput, AttachmentUncheckedCreateWithoutUserInput> | AttachmentCreateWithoutUserInput[] | AttachmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUserInput | AttachmentCreateOrConnectWithoutUserInput[]
    createMany?: AttachmentCreateManyUserInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type BoardMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<BoardMemberCreateWithoutUserInput, BoardMemberUncheckedCreateWithoutUserInput> | BoardMemberCreateWithoutUserInput[] | BoardMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardMemberCreateOrConnectWithoutUserInput | BoardMemberCreateOrConnectWithoutUserInput[]
    createMany?: BoardMemberCreateManyUserInputEnvelope
    connect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
  }

  export type BoardCreateNestedManyWithoutCreatorInput = {
    create?: XOR<BoardCreateWithoutCreatorInput, BoardUncheckedCreateWithoutCreatorInput> | BoardCreateWithoutCreatorInput[] | BoardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutCreatorInput | BoardCreateOrConnectWithoutCreatorInput[]
    createMany?: BoardCreateManyCreatorInputEnvelope
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
  }

  export type CardAssigneeCreateNestedManyWithoutUserInput = {
    create?: XOR<CardAssigneeCreateWithoutUserInput, CardAssigneeUncheckedCreateWithoutUserInput> | CardAssigneeCreateWithoutUserInput[] | CardAssigneeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CardAssigneeCreateOrConnectWithoutUserInput | CardAssigneeCreateOrConnectWithoutUserInput[]
    createMany?: CardAssigneeCreateManyUserInputEnvelope
    connect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
  }

  export type CardWatcherCreateNestedManyWithoutUserInput = {
    create?: XOR<CardWatcherCreateWithoutUserInput, CardWatcherUncheckedCreateWithoutUserInput> | CardWatcherCreateWithoutUserInput[] | CardWatcherUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CardWatcherCreateOrConnectWithoutUserInput | CardWatcherCreateOrConnectWithoutUserInput[]
    createMany?: CardWatcherCreateManyUserInputEnvelope
    connect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
  }

  export type CardCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput> | CardCreateWithoutCreatorInput[] | CardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCreatorInput | CardCreateOrConnectWithoutCreatorInput[]
    createMany?: CardCreateManyCreatorInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type ChecklistItemAssigneeCreateNestedManyWithoutUserInput = {
    create?: XOR<ChecklistItemAssigneeCreateWithoutUserInput, ChecklistItemAssigneeUncheckedCreateWithoutUserInput> | ChecklistItemAssigneeCreateWithoutUserInput[] | ChecklistItemAssigneeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChecklistItemAssigneeCreateOrConnectWithoutUserInput | ChecklistItemAssigneeCreateOrConnectWithoutUserInput[]
    createMany?: ChecklistItemAssigneeCreateManyUserInputEnvelope
    connect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ListWatcherCreateNestedManyWithoutUserInput = {
    create?: XOR<ListWatcherCreateWithoutUserInput, ListWatcherUncheckedCreateWithoutUserInput> | ListWatcherCreateWithoutUserInput[] | ListWatcherUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ListWatcherCreateOrConnectWithoutUserInput | ListWatcherCreateOrConnectWithoutUserInput[]
    createMany?: ListWatcherCreateManyUserInputEnvelope
    connect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
  }

  export type WorkspaceMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput> | WorkspaceMemberCreateWithoutUserInput[] | WorkspaceMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutUserInput | WorkspaceMemberCreateOrConnectWithoutUserInput[]
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type WorkspaceCreateNestedManyWithoutCreatorInput = {
    create?: XOR<WorkspaceCreateWithoutCreatorInput, WorkspaceUncheckedCreateWithoutCreatorInput> | WorkspaceCreateWithoutCreatorInput[] | WorkspaceUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: WorkspaceCreateOrConnectWithoutCreatorInput | WorkspaceCreateOrConnectWithoutCreatorInput[]
    createMany?: WorkspaceCreateManyCreatorInputEnvelope
    connect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
  }

  export type ActivityLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
  }

  export type AttachmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AttachmentCreateWithoutUserInput, AttachmentUncheckedCreateWithoutUserInput> | AttachmentCreateWithoutUserInput[] | AttachmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUserInput | AttachmentCreateOrConnectWithoutUserInput[]
    createMany?: AttachmentCreateManyUserInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type BoardMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BoardMemberCreateWithoutUserInput, BoardMemberUncheckedCreateWithoutUserInput> | BoardMemberCreateWithoutUserInput[] | BoardMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardMemberCreateOrConnectWithoutUserInput | BoardMemberCreateOrConnectWithoutUserInput[]
    createMany?: BoardMemberCreateManyUserInputEnvelope
    connect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
  }

  export type BoardUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<BoardCreateWithoutCreatorInput, BoardUncheckedCreateWithoutCreatorInput> | BoardCreateWithoutCreatorInput[] | BoardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutCreatorInput | BoardCreateOrConnectWithoutCreatorInput[]
    createMany?: BoardCreateManyCreatorInputEnvelope
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
  }

  export type CardAssigneeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CardAssigneeCreateWithoutUserInput, CardAssigneeUncheckedCreateWithoutUserInput> | CardAssigneeCreateWithoutUserInput[] | CardAssigneeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CardAssigneeCreateOrConnectWithoutUserInput | CardAssigneeCreateOrConnectWithoutUserInput[]
    createMany?: CardAssigneeCreateManyUserInputEnvelope
    connect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
  }

  export type CardWatcherUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CardWatcherCreateWithoutUserInput, CardWatcherUncheckedCreateWithoutUserInput> | CardWatcherCreateWithoutUserInput[] | CardWatcherUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CardWatcherCreateOrConnectWithoutUserInput | CardWatcherCreateOrConnectWithoutUserInput[]
    createMany?: CardWatcherCreateManyUserInputEnvelope
    connect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
  }

  export type CardUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput> | CardCreateWithoutCreatorInput[] | CardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCreatorInput | CardCreateOrConnectWithoutCreatorInput[]
    createMany?: CardCreateManyCreatorInputEnvelope
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
  }

  export type ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChecklistItemAssigneeCreateWithoutUserInput, ChecklistItemAssigneeUncheckedCreateWithoutUserInput> | ChecklistItemAssigneeCreateWithoutUserInput[] | ChecklistItemAssigneeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChecklistItemAssigneeCreateOrConnectWithoutUserInput | ChecklistItemAssigneeCreateOrConnectWithoutUserInput[]
    createMany?: ChecklistItemAssigneeCreateManyUserInputEnvelope
    connect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ListWatcherUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ListWatcherCreateWithoutUserInput, ListWatcherUncheckedCreateWithoutUserInput> | ListWatcherCreateWithoutUserInput[] | ListWatcherUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ListWatcherCreateOrConnectWithoutUserInput | ListWatcherCreateOrConnectWithoutUserInput[]
    createMany?: ListWatcherCreateManyUserInputEnvelope
    connect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
  }

  export type WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput> | WorkspaceMemberCreateWithoutUserInput[] | WorkspaceMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutUserInput | WorkspaceMemberCreateOrConnectWithoutUserInput[]
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type WorkspaceUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<WorkspaceCreateWithoutCreatorInput, WorkspaceUncheckedCreateWithoutCreatorInput> | WorkspaceCreateWithoutCreatorInput[] | WorkspaceUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: WorkspaceCreateOrConnectWithoutCreatorInput | WorkspaceCreateOrConnectWithoutCreatorInput[]
    createMany?: WorkspaceCreateManyCreatorInputEnvelope
    connect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
  }

  export type EnumThemeFieldUpdateOperationsInput = {
    set?: $Enums.Theme
  }

  export type UserUpdaterecentlyViewedBoardsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ActivityLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutUserInput | ActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutUserInput | ActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutUserInput | ActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type AttachmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttachmentCreateWithoutUserInput, AttachmentUncheckedCreateWithoutUserInput> | AttachmentCreateWithoutUserInput[] | AttachmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUserInput | AttachmentCreateOrConnectWithoutUserInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutUserInput | AttachmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttachmentCreateManyUserInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutUserInput | AttachmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutUserInput | AttachmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type BoardMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<BoardMemberCreateWithoutUserInput, BoardMemberUncheckedCreateWithoutUserInput> | BoardMemberCreateWithoutUserInput[] | BoardMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardMemberCreateOrConnectWithoutUserInput | BoardMemberCreateOrConnectWithoutUserInput[]
    upsert?: BoardMemberUpsertWithWhereUniqueWithoutUserInput | BoardMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BoardMemberCreateManyUserInputEnvelope
    set?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    disconnect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    delete?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    connect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    update?: BoardMemberUpdateWithWhereUniqueWithoutUserInput | BoardMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BoardMemberUpdateManyWithWhereWithoutUserInput | BoardMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BoardMemberScalarWhereInput | BoardMemberScalarWhereInput[]
  }

  export type BoardUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<BoardCreateWithoutCreatorInput, BoardUncheckedCreateWithoutCreatorInput> | BoardCreateWithoutCreatorInput[] | BoardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutCreatorInput | BoardCreateOrConnectWithoutCreatorInput[]
    upsert?: BoardUpsertWithWhereUniqueWithoutCreatorInput | BoardUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: BoardCreateManyCreatorInputEnvelope
    set?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    disconnect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    delete?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    update?: BoardUpdateWithWhereUniqueWithoutCreatorInput | BoardUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: BoardUpdateManyWithWhereWithoutCreatorInput | BoardUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: BoardScalarWhereInput | BoardScalarWhereInput[]
  }

  export type CardAssigneeUpdateManyWithoutUserNestedInput = {
    create?: XOR<CardAssigneeCreateWithoutUserInput, CardAssigneeUncheckedCreateWithoutUserInput> | CardAssigneeCreateWithoutUserInput[] | CardAssigneeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CardAssigneeCreateOrConnectWithoutUserInput | CardAssigneeCreateOrConnectWithoutUserInput[]
    upsert?: CardAssigneeUpsertWithWhereUniqueWithoutUserInput | CardAssigneeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CardAssigneeCreateManyUserInputEnvelope
    set?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    disconnect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    delete?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    connect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    update?: CardAssigneeUpdateWithWhereUniqueWithoutUserInput | CardAssigneeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CardAssigneeUpdateManyWithWhereWithoutUserInput | CardAssigneeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CardAssigneeScalarWhereInput | CardAssigneeScalarWhereInput[]
  }

  export type CardWatcherUpdateManyWithoutUserNestedInput = {
    create?: XOR<CardWatcherCreateWithoutUserInput, CardWatcherUncheckedCreateWithoutUserInput> | CardWatcherCreateWithoutUserInput[] | CardWatcherUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CardWatcherCreateOrConnectWithoutUserInput | CardWatcherCreateOrConnectWithoutUserInput[]
    upsert?: CardWatcherUpsertWithWhereUniqueWithoutUserInput | CardWatcherUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CardWatcherCreateManyUserInputEnvelope
    set?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    disconnect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    delete?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    connect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    update?: CardWatcherUpdateWithWhereUniqueWithoutUserInput | CardWatcherUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CardWatcherUpdateManyWithWhereWithoutUserInput | CardWatcherUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CardWatcherScalarWhereInput | CardWatcherScalarWhereInput[]
  }

  export type CardUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput> | CardCreateWithoutCreatorInput[] | CardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCreatorInput | CardCreateOrConnectWithoutCreatorInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutCreatorInput | CardUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CardCreateManyCreatorInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutCreatorInput | CardUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CardUpdateManyWithWhereWithoutCreatorInput | CardUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type ChecklistItemAssigneeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChecklistItemAssigneeCreateWithoutUserInput, ChecklistItemAssigneeUncheckedCreateWithoutUserInput> | ChecklistItemAssigneeCreateWithoutUserInput[] | ChecklistItemAssigneeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChecklistItemAssigneeCreateOrConnectWithoutUserInput | ChecklistItemAssigneeCreateOrConnectWithoutUserInput[]
    upsert?: ChecklistItemAssigneeUpsertWithWhereUniqueWithoutUserInput | ChecklistItemAssigneeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChecklistItemAssigneeCreateManyUserInputEnvelope
    set?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    disconnect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    delete?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    connect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    update?: ChecklistItemAssigneeUpdateWithWhereUniqueWithoutUserInput | ChecklistItemAssigneeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChecklistItemAssigneeUpdateManyWithWhereWithoutUserInput | ChecklistItemAssigneeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChecklistItemAssigneeScalarWhereInput | ChecklistItemAssigneeScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ListWatcherUpdateManyWithoutUserNestedInput = {
    create?: XOR<ListWatcherCreateWithoutUserInput, ListWatcherUncheckedCreateWithoutUserInput> | ListWatcherCreateWithoutUserInput[] | ListWatcherUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ListWatcherCreateOrConnectWithoutUserInput | ListWatcherCreateOrConnectWithoutUserInput[]
    upsert?: ListWatcherUpsertWithWhereUniqueWithoutUserInput | ListWatcherUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ListWatcherCreateManyUserInputEnvelope
    set?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    disconnect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    delete?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    connect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    update?: ListWatcherUpdateWithWhereUniqueWithoutUserInput | ListWatcherUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ListWatcherUpdateManyWithWhereWithoutUserInput | ListWatcherUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ListWatcherScalarWhereInput | ListWatcherScalarWhereInput[]
  }

  export type WorkspaceMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput> | WorkspaceMemberCreateWithoutUserInput[] | WorkspaceMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutUserInput | WorkspaceMemberCreateOrConnectWithoutUserInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput | WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput | WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutUserInput | WorkspaceMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type WorkspaceUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<WorkspaceCreateWithoutCreatorInput, WorkspaceUncheckedCreateWithoutCreatorInput> | WorkspaceCreateWithoutCreatorInput[] | WorkspaceUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: WorkspaceCreateOrConnectWithoutCreatorInput | WorkspaceCreateOrConnectWithoutCreatorInput[]
    upsert?: WorkspaceUpsertWithWhereUniqueWithoutCreatorInput | WorkspaceUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: WorkspaceCreateManyCreatorInputEnvelope
    set?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    disconnect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    delete?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    connect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    update?: WorkspaceUpdateWithWhereUniqueWithoutCreatorInput | WorkspaceUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: WorkspaceUpdateManyWithWhereWithoutCreatorInput | WorkspaceUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: WorkspaceScalarWhereInput | WorkspaceScalarWhereInput[]
  }

  export type ActivityLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput> | ActivityLogCreateWithoutUserInput[] | ActivityLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityLogCreateOrConnectWithoutUserInput | ActivityLogCreateOrConnectWithoutUserInput[]
    upsert?: ActivityLogUpsertWithWhereUniqueWithoutUserInput | ActivityLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityLogCreateManyUserInputEnvelope
    set?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    disconnect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    delete?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    connect?: ActivityLogWhereUniqueInput | ActivityLogWhereUniqueInput[]
    update?: ActivityLogUpdateWithWhereUniqueWithoutUserInput | ActivityLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityLogUpdateManyWithWhereWithoutUserInput | ActivityLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
  }

  export type AttachmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AttachmentCreateWithoutUserInput, AttachmentUncheckedCreateWithoutUserInput> | AttachmentCreateWithoutUserInput[] | AttachmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutUserInput | AttachmentCreateOrConnectWithoutUserInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutUserInput | AttachmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AttachmentCreateManyUserInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutUserInput | AttachmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutUserInput | AttachmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type BoardMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BoardMemberCreateWithoutUserInput, BoardMemberUncheckedCreateWithoutUserInput> | BoardMemberCreateWithoutUserInput[] | BoardMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BoardMemberCreateOrConnectWithoutUserInput | BoardMemberCreateOrConnectWithoutUserInput[]
    upsert?: BoardMemberUpsertWithWhereUniqueWithoutUserInput | BoardMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BoardMemberCreateManyUserInputEnvelope
    set?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    disconnect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    delete?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    connect?: BoardMemberWhereUniqueInput | BoardMemberWhereUniqueInput[]
    update?: BoardMemberUpdateWithWhereUniqueWithoutUserInput | BoardMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BoardMemberUpdateManyWithWhereWithoutUserInput | BoardMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BoardMemberScalarWhereInput | BoardMemberScalarWhereInput[]
  }

  export type BoardUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<BoardCreateWithoutCreatorInput, BoardUncheckedCreateWithoutCreatorInput> | BoardCreateWithoutCreatorInput[] | BoardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutCreatorInput | BoardCreateOrConnectWithoutCreatorInput[]
    upsert?: BoardUpsertWithWhereUniqueWithoutCreatorInput | BoardUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: BoardCreateManyCreatorInputEnvelope
    set?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    disconnect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    delete?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    update?: BoardUpdateWithWhereUniqueWithoutCreatorInput | BoardUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: BoardUpdateManyWithWhereWithoutCreatorInput | BoardUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: BoardScalarWhereInput | BoardScalarWhereInput[]
  }

  export type CardAssigneeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CardAssigneeCreateWithoutUserInput, CardAssigneeUncheckedCreateWithoutUserInput> | CardAssigneeCreateWithoutUserInput[] | CardAssigneeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CardAssigneeCreateOrConnectWithoutUserInput | CardAssigneeCreateOrConnectWithoutUserInput[]
    upsert?: CardAssigneeUpsertWithWhereUniqueWithoutUserInput | CardAssigneeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CardAssigneeCreateManyUserInputEnvelope
    set?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    disconnect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    delete?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    connect?: CardAssigneeWhereUniqueInput | CardAssigneeWhereUniqueInput[]
    update?: CardAssigneeUpdateWithWhereUniqueWithoutUserInput | CardAssigneeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CardAssigneeUpdateManyWithWhereWithoutUserInput | CardAssigneeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CardAssigneeScalarWhereInput | CardAssigneeScalarWhereInput[]
  }

  export type CardWatcherUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CardWatcherCreateWithoutUserInput, CardWatcherUncheckedCreateWithoutUserInput> | CardWatcherCreateWithoutUserInput[] | CardWatcherUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CardWatcherCreateOrConnectWithoutUserInput | CardWatcherCreateOrConnectWithoutUserInput[]
    upsert?: CardWatcherUpsertWithWhereUniqueWithoutUserInput | CardWatcherUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CardWatcherCreateManyUserInputEnvelope
    set?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    disconnect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    delete?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    connect?: CardWatcherWhereUniqueInput | CardWatcherWhereUniqueInput[]
    update?: CardWatcherUpdateWithWhereUniqueWithoutUserInput | CardWatcherUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CardWatcherUpdateManyWithWhereWithoutUserInput | CardWatcherUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CardWatcherScalarWhereInput | CardWatcherScalarWhereInput[]
  }

  export type CardUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput> | CardCreateWithoutCreatorInput[] | CardUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CardCreateOrConnectWithoutCreatorInput | CardCreateOrConnectWithoutCreatorInput[]
    upsert?: CardUpsertWithWhereUniqueWithoutCreatorInput | CardUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CardCreateManyCreatorInputEnvelope
    set?: CardWhereUniqueInput | CardWhereUniqueInput[]
    disconnect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    delete?: CardWhereUniqueInput | CardWhereUniqueInput[]
    connect?: CardWhereUniqueInput | CardWhereUniqueInput[]
    update?: CardUpdateWithWhereUniqueWithoutCreatorInput | CardUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CardUpdateManyWithWhereWithoutCreatorInput | CardUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CardScalarWhereInput | CardScalarWhereInput[]
  }

  export type ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChecklistItemAssigneeCreateWithoutUserInput, ChecklistItemAssigneeUncheckedCreateWithoutUserInput> | ChecklistItemAssigneeCreateWithoutUserInput[] | ChecklistItemAssigneeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChecklistItemAssigneeCreateOrConnectWithoutUserInput | ChecklistItemAssigneeCreateOrConnectWithoutUserInput[]
    upsert?: ChecklistItemAssigneeUpsertWithWhereUniqueWithoutUserInput | ChecklistItemAssigneeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChecklistItemAssigneeCreateManyUserInputEnvelope
    set?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    disconnect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    delete?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    connect?: ChecklistItemAssigneeWhereUniqueInput | ChecklistItemAssigneeWhereUniqueInput[]
    update?: ChecklistItemAssigneeUpdateWithWhereUniqueWithoutUserInput | ChecklistItemAssigneeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChecklistItemAssigneeUpdateManyWithWhereWithoutUserInput | ChecklistItemAssigneeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChecklistItemAssigneeScalarWhereInput | ChecklistItemAssigneeScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ListWatcherUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ListWatcherCreateWithoutUserInput, ListWatcherUncheckedCreateWithoutUserInput> | ListWatcherCreateWithoutUserInput[] | ListWatcherUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ListWatcherCreateOrConnectWithoutUserInput | ListWatcherCreateOrConnectWithoutUserInput[]
    upsert?: ListWatcherUpsertWithWhereUniqueWithoutUserInput | ListWatcherUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ListWatcherCreateManyUserInputEnvelope
    set?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    disconnect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    delete?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    connect?: ListWatcherWhereUniqueInput | ListWatcherWhereUniqueInput[]
    update?: ListWatcherUpdateWithWhereUniqueWithoutUserInput | ListWatcherUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ListWatcherUpdateManyWithWhereWithoutUserInput | ListWatcherUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ListWatcherScalarWhereInput | ListWatcherScalarWhereInput[]
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput> | WorkspaceMemberCreateWithoutUserInput[] | WorkspaceMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutUserInput | WorkspaceMemberCreateOrConnectWithoutUserInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput | WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WorkspaceMemberCreateManyUserInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput | WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutUserInput | WorkspaceMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<WorkspaceCreateWithoutCreatorInput, WorkspaceUncheckedCreateWithoutCreatorInput> | WorkspaceCreateWithoutCreatorInput[] | WorkspaceUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: WorkspaceCreateOrConnectWithoutCreatorInput | WorkspaceCreateOrConnectWithoutCreatorInput[]
    upsert?: WorkspaceUpsertWithWhereUniqueWithoutCreatorInput | WorkspaceUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: WorkspaceCreateManyCreatorInputEnvelope
    set?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    disconnect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    delete?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    connect?: WorkspaceWhereUniqueInput | WorkspaceWhereUniqueInput[]
    update?: WorkspaceUpdateWithWhereUniqueWithoutCreatorInput | WorkspaceUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: WorkspaceUpdateManyWithWhereWithoutCreatorInput | WorkspaceUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: WorkspaceScalarWhereInput | WorkspaceScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWorkspaceMembersInput = {
    create?: XOR<UserCreateWithoutWorkspaceMembersInput, UserUncheckedCreateWithoutWorkspaceMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkspaceMembersInput
    connect?: UserWhereUniqueInput
  }

  export type WorkspaceCreateNestedOneWithoutWorkspaceMembersInput = {
    create?: XOR<WorkspaceCreateWithoutWorkspaceMembersInput, WorkspaceUncheckedCreateWithoutWorkspaceMembersInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutWorkspaceMembersInput
    connect?: WorkspaceWhereUniqueInput
  }

  export type EnumWorkspaceRoleFieldUpdateOperationsInput = {
    set?: $Enums.WorkspaceRole
  }

  export type UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput = {
    create?: XOR<UserCreateWithoutWorkspaceMembersInput, UserUncheckedCreateWithoutWorkspaceMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkspaceMembersInput
    upsert?: UserUpsertWithoutWorkspaceMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkspaceMembersInput, UserUpdateWithoutWorkspaceMembersInput>, UserUncheckedUpdateWithoutWorkspaceMembersInput>
  }

  export type WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput = {
    create?: XOR<WorkspaceCreateWithoutWorkspaceMembersInput, WorkspaceUncheckedCreateWithoutWorkspaceMembersInput>
    connectOrCreate?: WorkspaceCreateOrConnectWithoutWorkspaceMembersInput
    upsert?: WorkspaceUpsertWithoutWorkspaceMembersInput
    connect?: WorkspaceWhereUniqueInput
    update?: XOR<XOR<WorkspaceUpdateToOneWithWhereWithoutWorkspaceMembersInput, WorkspaceUpdateWithoutWorkspaceMembersInput>, WorkspaceUncheckedUpdateWithoutWorkspaceMembersInput>
  }

  export type BoardCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<BoardCreateWithoutWorkspaceInput, BoardUncheckedCreateWithoutWorkspaceInput> | BoardCreateWithoutWorkspaceInput[] | BoardUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutWorkspaceInput | BoardCreateOrConnectWithoutWorkspaceInput[]
    createMany?: BoardCreateManyWorkspaceInputEnvelope
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
  }

  export type WorkspaceMemberCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput> | WorkspaceMemberCreateWithoutWorkspaceInput[] | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutWorkspaceInput | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutWorkspacesInput = {
    create?: XOR<UserCreateWithoutWorkspacesInput, UserUncheckedCreateWithoutWorkspacesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkspacesInput
    connect?: UserWhereUniqueInput
  }

  export type BoardUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<BoardCreateWithoutWorkspaceInput, BoardUncheckedCreateWithoutWorkspaceInput> | BoardCreateWithoutWorkspaceInput[] | BoardUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutWorkspaceInput | BoardCreateOrConnectWithoutWorkspaceInput[]
    createMany?: BoardCreateManyWorkspaceInputEnvelope
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
  }

  export type WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput = {
    create?: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput> | WorkspaceMemberCreateWithoutWorkspaceInput[] | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutWorkspaceInput | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[]
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
  }

  export type EnumWorkspaceVisibilityFieldUpdateOperationsInput = {
    set?: $Enums.WorkspaceVisibility
  }

  export type EnumWorkspaceTypeFieldUpdateOperationsInput = {
    set?: $Enums.WorkspaceType
  }

  export type EnumMembershipRestrictionsFieldUpdateOperationsInput = {
    set?: $Enums.MembershipRestrictions
  }

  export type EnumBoardCreationRestrictionsFieldUpdateOperationsInput = {
    set?: $Enums.BoardCreationRestrictions
  }

  export type EnumBoardSharingFieldUpdateOperationsInput = {
    set?: $Enums.BoardSharing
  }

  export type EnumSlackSharingFieldUpdateOperationsInput = {
    set?: $Enums.SlackSharing
  }

  export type BoardUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<BoardCreateWithoutWorkspaceInput, BoardUncheckedCreateWithoutWorkspaceInput> | BoardCreateWithoutWorkspaceInput[] | BoardUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutWorkspaceInput | BoardCreateOrConnectWithoutWorkspaceInput[]
    upsert?: BoardUpsertWithWhereUniqueWithoutWorkspaceInput | BoardUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: BoardCreateManyWorkspaceInputEnvelope
    set?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    disconnect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    delete?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    update?: BoardUpdateWithWhereUniqueWithoutWorkspaceInput | BoardUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: BoardUpdateManyWithWhereWithoutWorkspaceInput | BoardUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: BoardScalarWhereInput | BoardScalarWhereInput[]
  }

  export type WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput> | WorkspaceMemberCreateWithoutWorkspaceInput[] | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutWorkspaceInput | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutWorkspacesNestedInput = {
    create?: XOR<UserCreateWithoutWorkspacesInput, UserUncheckedCreateWithoutWorkspacesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWorkspacesInput
    upsert?: UserUpsertWithoutWorkspacesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWorkspacesInput, UserUpdateWithoutWorkspacesInput>, UserUncheckedUpdateWithoutWorkspacesInput>
  }

  export type BoardUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<BoardCreateWithoutWorkspaceInput, BoardUncheckedCreateWithoutWorkspaceInput> | BoardCreateWithoutWorkspaceInput[] | BoardUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: BoardCreateOrConnectWithoutWorkspaceInput | BoardCreateOrConnectWithoutWorkspaceInput[]
    upsert?: BoardUpsertWithWhereUniqueWithoutWorkspaceInput | BoardUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: BoardCreateManyWorkspaceInputEnvelope
    set?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    disconnect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    delete?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    connect?: BoardWhereUniqueInput | BoardWhereUniqueInput[]
    update?: BoardUpdateWithWhereUniqueWithoutWorkspaceInput | BoardUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: BoardUpdateManyWithWhereWithoutWorkspaceInput | BoardUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: BoardScalarWhereInput | BoardScalarWhereInput[]
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput = {
    create?: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput> | WorkspaceMemberCreateWithoutWorkspaceInput[] | WorkspaceMemberUncheckedCreateWithoutWorkspaceInput[]
    connectOrCreate?: WorkspaceMemberCreateOrConnectWithoutWorkspaceInput | WorkspaceMemberCreateOrConnectWithoutWorkspaceInput[]
    upsert?: WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput | WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput[]
    createMany?: WorkspaceMemberCreateManyWorkspaceInputEnvelope
    set?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    disconnect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    delete?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    connect?: WorkspaceMemberWhereUniqueInput | WorkspaceMemberWhereUniqueInput[]
    update?: WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput | WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput[]
    updateMany?: WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput | WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput[]
    deleteMany?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumActivityActionFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityAction | EnumActivityActionFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityAction[] | ListEnumActivityActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityAction[] | ListEnumActivityActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityActionFilter<$PrismaModel> | $Enums.ActivityAction
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumActivityActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityAction | EnumActivityActionFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityAction[] | ListEnumActivityActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityAction[] | ListEnumActivityActionFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityActionWithAggregatesFilter<$PrismaModel> | $Enums.ActivityAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActivityActionFilter<$PrismaModel>
    _max?: NestedEnumActivityActionFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumBoardRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardRole | EnumBoardRoleFieldRefInput<$PrismaModel>
    in?: $Enums.BoardRole[] | ListEnumBoardRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardRole[] | ListEnumBoardRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardRoleFilter<$PrismaModel> | $Enums.BoardRole
  }

  export type NestedEnumBoardRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardRole | EnumBoardRoleFieldRefInput<$PrismaModel>
    in?: $Enums.BoardRole[] | ListEnumBoardRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardRole[] | ListEnumBoardRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardRoleWithAggregatesFilter<$PrismaModel> | $Enums.BoardRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardRoleFilter<$PrismaModel>
    _max?: NestedEnumBoardRoleFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumBoardBackgroundFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardBackground | EnumBoardBackgroundFieldRefInput<$PrismaModel>
    in?: $Enums.BoardBackground[] | ListEnumBoardBackgroundFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardBackground[] | ListEnumBoardBackgroundFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardBackgroundFilter<$PrismaModel> | $Enums.BoardBackground
  }

  export type NestedEnumBoardVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardVisibility | EnumBoardVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.BoardVisibility[] | ListEnumBoardVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardVisibility[] | ListEnumBoardVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardVisibilityFilter<$PrismaModel> | $Enums.BoardVisibility
  }

  export type NestedEnumMemberManageRestrictionsFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberManageRestrictions | EnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.MemberManageRestrictions[] | ListEnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberManageRestrictions[] | ListEnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberManageRestrictionsFilter<$PrismaModel> | $Enums.MemberManageRestrictions
  }

  export type NestedEnumCommentingRestrictionsFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentingRestrictions | EnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.CommentingRestrictions[] | ListEnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommentingRestrictions[] | ListEnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumCommentingRestrictionsFilter<$PrismaModel> | $Enums.CommentingRestrictions
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumBoardBackgroundWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardBackground | EnumBoardBackgroundFieldRefInput<$PrismaModel>
    in?: $Enums.BoardBackground[] | ListEnumBoardBackgroundFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardBackground[] | ListEnumBoardBackgroundFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardBackgroundWithAggregatesFilter<$PrismaModel> | $Enums.BoardBackground
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardBackgroundFilter<$PrismaModel>
    _max?: NestedEnumBoardBackgroundFilter<$PrismaModel>
  }

  export type NestedEnumBoardVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardVisibility | EnumBoardVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.BoardVisibility[] | ListEnumBoardVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardVisibility[] | ListEnumBoardVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.BoardVisibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardVisibilityFilter<$PrismaModel>
    _max?: NestedEnumBoardVisibilityFilter<$PrismaModel>
  }

  export type NestedEnumMemberManageRestrictionsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MemberManageRestrictions | EnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.MemberManageRestrictions[] | ListEnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.MemberManageRestrictions[] | ListEnumMemberManageRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumMemberManageRestrictionsWithAggregatesFilter<$PrismaModel> | $Enums.MemberManageRestrictions
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMemberManageRestrictionsFilter<$PrismaModel>
    _max?: NestedEnumMemberManageRestrictionsFilter<$PrismaModel>
  }

  export type NestedEnumCommentingRestrictionsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentingRestrictions | EnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.CommentingRestrictions[] | ListEnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommentingRestrictions[] | ListEnumCommentingRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumCommentingRestrictionsWithAggregatesFilter<$PrismaModel> | $Enums.CommentingRestrictions
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommentingRestrictionsFilter<$PrismaModel>
    _max?: NestedEnumCommentingRestrictionsFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumColorFilter<$PrismaModel = never> = {
    equals?: $Enums.Color | EnumColorFieldRefInput<$PrismaModel>
    in?: $Enums.Color[] | ListEnumColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.Color[] | ListEnumColorFieldRefInput<$PrismaModel>
    not?: NestedEnumColorFilter<$PrismaModel> | $Enums.Color
  }

  export type NestedEnumColorWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Color | EnumColorFieldRefInput<$PrismaModel>
    in?: $Enums.Color[] | ListEnumColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.Color[] | ListEnumColorFieldRefInput<$PrismaModel>
    not?: NestedEnumColorWithAggregatesFilter<$PrismaModel> | $Enums.Color
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumColorFilter<$PrismaModel>
    _max?: NestedEnumColorFilter<$PrismaModel>
  }

  export type NestedEnumThemeFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeFilter<$PrismaModel> | $Enums.Theme
  }

  export type NestedEnumThemeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeWithAggregatesFilter<$PrismaModel> | $Enums.Theme
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemeFilter<$PrismaModel>
    _max?: NestedEnumThemeFilter<$PrismaModel>
  }

  export type NestedEnumWorkspaceRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceRole | EnumWorkspaceRoleFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceRoleFilter<$PrismaModel> | $Enums.WorkspaceRole
  }

  export type NestedEnumWorkspaceRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceRole | EnumWorkspaceRoleFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceRole[] | ListEnumWorkspaceRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceRoleWithAggregatesFilter<$PrismaModel> | $Enums.WorkspaceRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkspaceRoleFilter<$PrismaModel>
    _max?: NestedEnumWorkspaceRoleFilter<$PrismaModel>
  }

  export type NestedEnumWorkspaceVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceVisibility | EnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceVisibility[] | ListEnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceVisibility[] | ListEnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceVisibilityFilter<$PrismaModel> | $Enums.WorkspaceVisibility
  }

  export type NestedEnumWorkspaceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceType | EnumWorkspaceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceType[] | ListEnumWorkspaceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceType[] | ListEnumWorkspaceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceTypeFilter<$PrismaModel> | $Enums.WorkspaceType
  }

  export type NestedEnumMembershipRestrictionsFilter<$PrismaModel = never> = {
    equals?: $Enums.MembershipRestrictions | EnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.MembershipRestrictions[] | ListEnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.MembershipRestrictions[] | ListEnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumMembershipRestrictionsFilter<$PrismaModel> | $Enums.MembershipRestrictions
  }

  export type NestedEnumBoardCreationRestrictionsFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardCreationRestrictions | EnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.BoardCreationRestrictions[] | ListEnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardCreationRestrictions[] | ListEnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardCreationRestrictionsFilter<$PrismaModel> | $Enums.BoardCreationRestrictions
  }

  export type NestedEnumBoardSharingFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardSharing | EnumBoardSharingFieldRefInput<$PrismaModel>
    in?: $Enums.BoardSharing[] | ListEnumBoardSharingFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardSharing[] | ListEnumBoardSharingFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardSharingFilter<$PrismaModel> | $Enums.BoardSharing
  }

  export type NestedEnumSlackSharingFilter<$PrismaModel = never> = {
    equals?: $Enums.SlackSharing | EnumSlackSharingFieldRefInput<$PrismaModel>
    in?: $Enums.SlackSharing[] | ListEnumSlackSharingFieldRefInput<$PrismaModel>
    notIn?: $Enums.SlackSharing[] | ListEnumSlackSharingFieldRefInput<$PrismaModel>
    not?: NestedEnumSlackSharingFilter<$PrismaModel> | $Enums.SlackSharing
  }

  export type NestedEnumWorkspaceVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceVisibility | EnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceVisibility[] | ListEnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceVisibility[] | ListEnumWorkspaceVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.WorkspaceVisibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkspaceVisibilityFilter<$PrismaModel>
    _max?: NestedEnumWorkspaceVisibilityFilter<$PrismaModel>
  }

  export type NestedEnumWorkspaceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkspaceType | EnumWorkspaceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkspaceType[] | ListEnumWorkspaceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkspaceType[] | ListEnumWorkspaceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkspaceTypeWithAggregatesFilter<$PrismaModel> | $Enums.WorkspaceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkspaceTypeFilter<$PrismaModel>
    _max?: NestedEnumWorkspaceTypeFilter<$PrismaModel>
  }

  export type NestedEnumMembershipRestrictionsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MembershipRestrictions | EnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.MembershipRestrictions[] | ListEnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.MembershipRestrictions[] | ListEnumMembershipRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumMembershipRestrictionsWithAggregatesFilter<$PrismaModel> | $Enums.MembershipRestrictions
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMembershipRestrictionsFilter<$PrismaModel>
    _max?: NestedEnumMembershipRestrictionsFilter<$PrismaModel>
  }

  export type NestedEnumBoardCreationRestrictionsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardCreationRestrictions | EnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    in?: $Enums.BoardCreationRestrictions[] | ListEnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardCreationRestrictions[] | ListEnumBoardCreationRestrictionsFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardCreationRestrictionsWithAggregatesFilter<$PrismaModel> | $Enums.BoardCreationRestrictions
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardCreationRestrictionsFilter<$PrismaModel>
    _max?: NestedEnumBoardCreationRestrictionsFilter<$PrismaModel>
  }

  export type NestedEnumBoardSharingWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BoardSharing | EnumBoardSharingFieldRefInput<$PrismaModel>
    in?: $Enums.BoardSharing[] | ListEnumBoardSharingFieldRefInput<$PrismaModel>
    notIn?: $Enums.BoardSharing[] | ListEnumBoardSharingFieldRefInput<$PrismaModel>
    not?: NestedEnumBoardSharingWithAggregatesFilter<$PrismaModel> | $Enums.BoardSharing
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBoardSharingFilter<$PrismaModel>
    _max?: NestedEnumBoardSharingFilter<$PrismaModel>
  }

  export type NestedEnumSlackSharingWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SlackSharing | EnumSlackSharingFieldRefInput<$PrismaModel>
    in?: $Enums.SlackSharing[] | ListEnumSlackSharingFieldRefInput<$PrismaModel>
    notIn?: $Enums.SlackSharing[] | ListEnumSlackSharingFieldRefInput<$PrismaModel>
    not?: NestedEnumSlackSharingWithAggregatesFilter<$PrismaModel> | $Enums.SlackSharing
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSlackSharingFilter<$PrismaModel>
    _max?: NestedEnumSlackSharingFilter<$PrismaModel>
  }

  export type BoardCreateWithoutActivityLogsInput = {
    id?: string
    name: string
    description?: string | null
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    boardMembers?: BoardMemberCreateNestedManyWithoutBoardInput
    creator: UserCreateNestedOneWithoutBoardsInput
    workspace: WorkspaceCreateNestedOneWithoutBoardsInput
    labels?: LabelCreateNestedManyWithoutBoardInput
    lists?: ListCreateNestedManyWithoutBoardInput
  }

  export type BoardUncheckedCreateWithoutActivityLogsInput = {
    id?: string
    workspaceId: string
    name: string
    description?: string | null
    createdBy: string
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutBoardInput
    labels?: LabelUncheckedCreateNestedManyWithoutBoardInput
    lists?: ListUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardCreateOrConnectWithoutActivityLogsInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutActivityLogsInput, BoardUncheckedCreateWithoutActivityLogsInput>
  }

  export type CardCreateWithoutActivityLogsInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelCreateNestedManyWithoutCardInput
    watchers?: CardWatcherCreateNestedManyWithoutCardInput
    creator: UserCreateNestedOneWithoutCardsInput
    list: ListCreateNestedOneWithoutCardsInput
    checklists?: ChecklistCreateNestedManyWithoutCardInput
    comments?: CommentCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutActivityLogsInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attachments?: AttachmentUncheckedCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeUncheckedCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutCardInput
    watchers?: CardWatcherUncheckedCreateNestedManyWithoutCardInput
    checklists?: ChecklistUncheckedCreateNestedManyWithoutCardInput
    comments?: CommentUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutActivityLogsInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutActivityLogsInput, CardUncheckedCreateWithoutActivityLogsInput>
  }

  export type UserCreateWithoutActivityLogsInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutActivityLogsInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutActivityLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
  }

  export type BoardUpsertWithoutActivityLogsInput = {
    update: XOR<BoardUpdateWithoutActivityLogsInput, BoardUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<BoardCreateWithoutActivityLogsInput, BoardUncheckedCreateWithoutActivityLogsInput>
    where?: BoardWhereInput
  }

  export type BoardUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: BoardWhereInput
    data: XOR<BoardUpdateWithoutActivityLogsInput, BoardUncheckedUpdateWithoutActivityLogsInput>
  }

  export type BoardUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    boardMembers?: BoardMemberUpdateManyWithoutBoardNestedInput
    creator?: UserUpdateOneRequiredWithoutBoardsNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBoardsNestedInput
    labels?: LabelUpdateManyWithoutBoardNestedInput
    lists?: ListUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutBoardNestedInput
    labels?: LabelUncheckedUpdateManyWithoutBoardNestedInput
    lists?: ListUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type CardUpsertWithoutActivityLogsInput = {
    update: XOR<CardUpdateWithoutActivityLogsInput, CardUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<CardCreateWithoutActivityLogsInput, CardUncheckedCreateWithoutActivityLogsInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutActivityLogsInput, CardUncheckedUpdateWithoutActivityLogsInput>
  }

  export type CardUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUpdateManyWithoutCardNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    list?: ListUpdateOneRequiredWithoutCardsNestedInput
    checklists?: ChecklistUpdateManyWithoutCardNestedInput
    comments?: CommentUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attachments?: AttachmentUncheckedUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUncheckedUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUncheckedUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUncheckedUpdateManyWithoutCardNestedInput
    checklists?: ChecklistUncheckedUpdateManyWithoutCardNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCardNestedInput
  }

  export type UserUpsertWithoutActivityLogsInput = {
    update: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
    create: XOR<UserCreateWithoutActivityLogsInput, UserUncheckedCreateWithoutActivityLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityLogsInput, UserUncheckedUpdateWithoutActivityLogsInput>
  }

  export type UserUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CardCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelCreateNestedManyWithoutCardInput
    watchers?: CardWatcherCreateNestedManyWithoutCardInput
    creator: UserCreateNestedOneWithoutCardsInput
    list: ListCreateNestedOneWithoutCardsInput
    checklists?: ChecklistCreateNestedManyWithoutCardInput
    comments?: CommentCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeUncheckedCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutCardInput
    watchers?: CardWatcherUncheckedCreateNestedManyWithoutCardInput
    checklists?: ChecklistUncheckedCreateNestedManyWithoutCardInput
    comments?: CommentUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutAttachmentsInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutAttachmentsInput, CardUncheckedCreateWithoutAttachmentsInput>
  }

  export type UserCreateWithoutAttachmentsInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutAttachmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
  }

  export type CardUpsertWithoutAttachmentsInput = {
    update: XOR<CardUpdateWithoutAttachmentsInput, CardUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<CardCreateWithoutAttachmentsInput, CardUncheckedCreateWithoutAttachmentsInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutAttachmentsInput, CardUncheckedUpdateWithoutAttachmentsInput>
  }

  export type CardUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUpdateManyWithoutCardNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    list?: ListUpdateOneRequiredWithoutCardsNestedInput
    checklists?: ChecklistUpdateManyWithoutCardNestedInput
    comments?: CommentUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUncheckedUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUncheckedUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUncheckedUpdateManyWithoutCardNestedInput
    checklists?: ChecklistUncheckedUpdateManyWithoutCardNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCardNestedInput
  }

  export type UserUpsertWithoutAttachmentsInput = {
    update: XOR<UserUpdateWithoutAttachmentsInput, UserUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<UserCreateWithoutAttachmentsInput, UserUncheckedCreateWithoutAttachmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttachmentsInput, UserUncheckedUpdateWithoutAttachmentsInput>
  }

  export type UserUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type BoardCreateWithoutBoardMembersInput = {
    id?: string
    name: string
    description?: string | null
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogCreateNestedManyWithoutBoardInput
    creator: UserCreateNestedOneWithoutBoardsInput
    workspace: WorkspaceCreateNestedOneWithoutBoardsInput
    labels?: LabelCreateNestedManyWithoutBoardInput
    lists?: ListCreateNestedManyWithoutBoardInput
  }

  export type BoardUncheckedCreateWithoutBoardMembersInput = {
    id?: string
    workspaceId: string
    name: string
    description?: string | null
    createdBy: string
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutBoardInput
    labels?: LabelUncheckedCreateNestedManyWithoutBoardInput
    lists?: ListUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardCreateOrConnectWithoutBoardMembersInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutBoardMembersInput, BoardUncheckedCreateWithoutBoardMembersInput>
  }

  export type UserCreateWithoutBoardMembersInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutBoardMembersInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutBoardMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBoardMembersInput, UserUncheckedCreateWithoutBoardMembersInput>
  }

  export type BoardUpsertWithoutBoardMembersInput = {
    update: XOR<BoardUpdateWithoutBoardMembersInput, BoardUncheckedUpdateWithoutBoardMembersInput>
    create: XOR<BoardCreateWithoutBoardMembersInput, BoardUncheckedCreateWithoutBoardMembersInput>
    where?: BoardWhereInput
  }

  export type BoardUpdateToOneWithWhereWithoutBoardMembersInput = {
    where?: BoardWhereInput
    data: XOR<BoardUpdateWithoutBoardMembersInput, BoardUncheckedUpdateWithoutBoardMembersInput>
  }

  export type BoardUpdateWithoutBoardMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUpdateManyWithoutBoardNestedInput
    creator?: UserUpdateOneRequiredWithoutBoardsNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBoardsNestedInput
    labels?: LabelUpdateManyWithoutBoardNestedInput
    lists?: ListUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateWithoutBoardMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutBoardNestedInput
    labels?: LabelUncheckedUpdateManyWithoutBoardNestedInput
    lists?: ListUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type UserUpsertWithoutBoardMembersInput = {
    update: XOR<UserUpdateWithoutBoardMembersInput, UserUncheckedUpdateWithoutBoardMembersInput>
    create: XOR<UserCreateWithoutBoardMembersInput, UserUncheckedCreateWithoutBoardMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBoardMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBoardMembersInput, UserUncheckedUpdateWithoutBoardMembersInput>
  }

  export type UserUpdateWithoutBoardMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutBoardMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ActivityLogCreateWithoutBoardInput = {
    id?: string
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    card?: CardCreateNestedOneWithoutActivityLogsInput
    user?: UserCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateWithoutBoardInput = {
    id?: string
    cardId?: string | null
    userId?: string | null
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ActivityLogCreateOrConnectWithoutBoardInput = {
    where: ActivityLogWhereUniqueInput
    create: XOR<ActivityLogCreateWithoutBoardInput, ActivityLogUncheckedCreateWithoutBoardInput>
  }

  export type ActivityLogCreateManyBoardInputEnvelope = {
    data: ActivityLogCreateManyBoardInput | ActivityLogCreateManyBoardInput[]
    skipDuplicates?: boolean
  }

  export type BoardMemberCreateWithoutBoardInput = {
    role?: $Enums.BoardRole
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutBoardMembersInput
  }

  export type BoardMemberUncheckedCreateWithoutBoardInput = {
    userId: string
    role?: $Enums.BoardRole
    joinedAt?: Date | string
  }

  export type BoardMemberCreateOrConnectWithoutBoardInput = {
    where: BoardMemberWhereUniqueInput
    create: XOR<BoardMemberCreateWithoutBoardInput, BoardMemberUncheckedCreateWithoutBoardInput>
  }

  export type BoardMemberCreateManyBoardInputEnvelope = {
    data: BoardMemberCreateManyBoardInput | BoardMemberCreateManyBoardInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutBoardsInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutBoardsInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutBoardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBoardsInput, UserUncheckedCreateWithoutBoardsInput>
  }

  export type WorkspaceCreateWithoutBoardsInput = {
    id?: string
    name: string
    description?: string | null
    visibility?: $Enums.WorkspaceVisibility
    premium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.WorkspaceType
    workspaceMembershipRestrictions?: $Enums.MembershipRestrictions
    publicBoardCreation?: $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: $Enums.BoardCreationRestrictions
    privateBoardCreation?: $Enums.BoardCreationRestrictions
    publicBoardDeletion?: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: $Enums.BoardCreationRestrictions
    privateBoardDeletion?: $Enums.BoardCreationRestrictions
    allowGuestSharing?: $Enums.BoardSharing
    allowSlackIntegration?: $Enums.SlackSharing
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
    creator: UserCreateNestedOneWithoutWorkspacesInput
  }

  export type WorkspaceUncheckedCreateWithoutBoardsInput = {
    id?: string
    name: string
    description?: string | null
    visibility?: $Enums.WorkspaceVisibility
    premium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.WorkspaceType
    createdBy: string
    workspaceMembershipRestrictions?: $Enums.MembershipRestrictions
    publicBoardCreation?: $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: $Enums.BoardCreationRestrictions
    privateBoardCreation?: $Enums.BoardCreationRestrictions
    publicBoardDeletion?: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: $Enums.BoardCreationRestrictions
    privateBoardDeletion?: $Enums.BoardCreationRestrictions
    allowGuestSharing?: $Enums.BoardSharing
    allowSlackIntegration?: $Enums.SlackSharing
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutBoardsInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutBoardsInput, WorkspaceUncheckedCreateWithoutBoardsInput>
  }

  export type LabelCreateWithoutBoardInput = {
    id?: string
    name?: string | null
    color: $Enums.Color
    cardLabels?: CardLabelCreateNestedManyWithoutLabelInput
  }

  export type LabelUncheckedCreateWithoutBoardInput = {
    id?: string
    name?: string | null
    color: $Enums.Color
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutLabelInput
  }

  export type LabelCreateOrConnectWithoutBoardInput = {
    where: LabelWhereUniqueInput
    create: XOR<LabelCreateWithoutBoardInput, LabelUncheckedCreateWithoutBoardInput>
  }

  export type LabelCreateManyBoardInputEnvelope = {
    data: LabelCreateManyBoardInput | LabelCreateManyBoardInput[]
    skipDuplicates?: boolean
  }

  export type ListCreateWithoutBoardInput = {
    id?: string
    name: string
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    subscribed?: boolean
    cards?: CardCreateNestedManyWithoutListInput
    watchers?: ListWatcherCreateNestedManyWithoutListInput
  }

  export type ListUncheckedCreateWithoutBoardInput = {
    id?: string
    name: string
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    subscribed?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutListInput
    watchers?: ListWatcherUncheckedCreateNestedManyWithoutListInput
  }

  export type ListCreateOrConnectWithoutBoardInput = {
    where: ListWhereUniqueInput
    create: XOR<ListCreateWithoutBoardInput, ListUncheckedCreateWithoutBoardInput>
  }

  export type ListCreateManyBoardInputEnvelope = {
    data: ListCreateManyBoardInput | ListCreateManyBoardInput[]
    skipDuplicates?: boolean
  }

  export type ActivityLogUpsertWithWhereUniqueWithoutBoardInput = {
    where: ActivityLogWhereUniqueInput
    update: XOR<ActivityLogUpdateWithoutBoardInput, ActivityLogUncheckedUpdateWithoutBoardInput>
    create: XOR<ActivityLogCreateWithoutBoardInput, ActivityLogUncheckedCreateWithoutBoardInput>
  }

  export type ActivityLogUpdateWithWhereUniqueWithoutBoardInput = {
    where: ActivityLogWhereUniqueInput
    data: XOR<ActivityLogUpdateWithoutBoardInput, ActivityLogUncheckedUpdateWithoutBoardInput>
  }

  export type ActivityLogUpdateManyWithWhereWithoutBoardInput = {
    where: ActivityLogScalarWhereInput
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyWithoutBoardInput>
  }

  export type ActivityLogScalarWhereInput = {
    AND?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
    OR?: ActivityLogScalarWhereInput[]
    NOT?: ActivityLogScalarWhereInput | ActivityLogScalarWhereInput[]
    id?: UuidFilter<"ActivityLog"> | string
    boardId?: UuidFilter<"ActivityLog"> | string
    cardId?: UuidNullableFilter<"ActivityLog"> | string | null
    userId?: UuidNullableFilter<"ActivityLog"> | string | null
    action?: EnumActivityActionFilter<"ActivityLog"> | $Enums.ActivityAction
    payload?: JsonNullableFilter<"ActivityLog">
    createdAt?: DateTimeFilter<"ActivityLog"> | Date | string
  }

  export type BoardMemberUpsertWithWhereUniqueWithoutBoardInput = {
    where: BoardMemberWhereUniqueInput
    update: XOR<BoardMemberUpdateWithoutBoardInput, BoardMemberUncheckedUpdateWithoutBoardInput>
    create: XOR<BoardMemberCreateWithoutBoardInput, BoardMemberUncheckedCreateWithoutBoardInput>
  }

  export type BoardMemberUpdateWithWhereUniqueWithoutBoardInput = {
    where: BoardMemberWhereUniqueInput
    data: XOR<BoardMemberUpdateWithoutBoardInput, BoardMemberUncheckedUpdateWithoutBoardInput>
  }

  export type BoardMemberUpdateManyWithWhereWithoutBoardInput = {
    where: BoardMemberScalarWhereInput
    data: XOR<BoardMemberUpdateManyMutationInput, BoardMemberUncheckedUpdateManyWithoutBoardInput>
  }

  export type BoardMemberScalarWhereInput = {
    AND?: BoardMemberScalarWhereInput | BoardMemberScalarWhereInput[]
    OR?: BoardMemberScalarWhereInput[]
    NOT?: BoardMemberScalarWhereInput | BoardMemberScalarWhereInput[]
    boardId?: UuidFilter<"BoardMember"> | string
    userId?: UuidFilter<"BoardMember"> | string
    role?: EnumBoardRoleFilter<"BoardMember"> | $Enums.BoardRole
    joinedAt?: DateTimeFilter<"BoardMember"> | Date | string
  }

  export type UserUpsertWithoutBoardsInput = {
    update: XOR<UserUpdateWithoutBoardsInput, UserUncheckedUpdateWithoutBoardsInput>
    create: XOR<UserCreateWithoutBoardsInput, UserUncheckedCreateWithoutBoardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBoardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBoardsInput, UserUncheckedUpdateWithoutBoardsInput>
  }

  export type UserUpdateWithoutBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type WorkspaceUpsertWithoutBoardsInput = {
    update: XOR<WorkspaceUpdateWithoutBoardsInput, WorkspaceUncheckedUpdateWithoutBoardsInput>
    create: XOR<WorkspaceCreateWithoutBoardsInput, WorkspaceUncheckedCreateWithoutBoardsInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutBoardsInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutBoardsInput, WorkspaceUncheckedUpdateWithoutBoardsInput>
  }

  export type WorkspaceUpdateWithoutBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
    creator?: UserUpdateOneRequiredWithoutWorkspacesNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutBoardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    createdBy?: StringFieldUpdateOperationsInput | string
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type LabelUpsertWithWhereUniqueWithoutBoardInput = {
    where: LabelWhereUniqueInput
    update: XOR<LabelUpdateWithoutBoardInput, LabelUncheckedUpdateWithoutBoardInput>
    create: XOR<LabelCreateWithoutBoardInput, LabelUncheckedCreateWithoutBoardInput>
  }

  export type LabelUpdateWithWhereUniqueWithoutBoardInput = {
    where: LabelWhereUniqueInput
    data: XOR<LabelUpdateWithoutBoardInput, LabelUncheckedUpdateWithoutBoardInput>
  }

  export type LabelUpdateManyWithWhereWithoutBoardInput = {
    where: LabelScalarWhereInput
    data: XOR<LabelUpdateManyMutationInput, LabelUncheckedUpdateManyWithoutBoardInput>
  }

  export type LabelScalarWhereInput = {
    AND?: LabelScalarWhereInput | LabelScalarWhereInput[]
    OR?: LabelScalarWhereInput[]
    NOT?: LabelScalarWhereInput | LabelScalarWhereInput[]
    id?: UuidFilter<"Label"> | string
    boardId?: UuidFilter<"Label"> | string
    name?: StringNullableFilter<"Label"> | string | null
    color?: EnumColorFilter<"Label"> | $Enums.Color
  }

  export type ListUpsertWithWhereUniqueWithoutBoardInput = {
    where: ListWhereUniqueInput
    update: XOR<ListUpdateWithoutBoardInput, ListUncheckedUpdateWithoutBoardInput>
    create: XOR<ListCreateWithoutBoardInput, ListUncheckedCreateWithoutBoardInput>
  }

  export type ListUpdateWithWhereUniqueWithoutBoardInput = {
    where: ListWhereUniqueInput
    data: XOR<ListUpdateWithoutBoardInput, ListUncheckedUpdateWithoutBoardInput>
  }

  export type ListUpdateManyWithWhereWithoutBoardInput = {
    where: ListScalarWhereInput
    data: XOR<ListUpdateManyMutationInput, ListUncheckedUpdateManyWithoutBoardInput>
  }

  export type ListScalarWhereInput = {
    AND?: ListScalarWhereInput | ListScalarWhereInput[]
    OR?: ListScalarWhereInput[]
    NOT?: ListScalarWhereInput | ListScalarWhereInput[]
    id?: UuidFilter<"List"> | string
    boardId?: UuidFilter<"List"> | string
    name?: StringFilter<"List"> | string
    position?: DecimalFilter<"List"> | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFilter<"List"> | boolean
    subscribed?: BoolFilter<"List"> | boolean
  }

  export type CardCreateWithoutAssigneesInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogCreateNestedManyWithoutCardInput
    attachments?: AttachmentCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelCreateNestedManyWithoutCardInput
    watchers?: CardWatcherCreateNestedManyWithoutCardInput
    creator: UserCreateNestedOneWithoutCardsInput
    list: ListCreateNestedOneWithoutCardsInput
    checklists?: ChecklistCreateNestedManyWithoutCardInput
    comments?: CommentCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutAssigneesInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutCardInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutCardInput
    watchers?: CardWatcherUncheckedCreateNestedManyWithoutCardInput
    checklists?: ChecklistUncheckedCreateNestedManyWithoutCardInput
    comments?: CommentUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutAssigneesInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutAssigneesInput, CardUncheckedCreateWithoutAssigneesInput>
  }

  export type UserCreateWithoutCardAssigneesInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCardAssigneesInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCardAssigneesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCardAssigneesInput, UserUncheckedCreateWithoutCardAssigneesInput>
  }

  export type CardUpsertWithoutAssigneesInput = {
    update: XOR<CardUpdateWithoutAssigneesInput, CardUncheckedUpdateWithoutAssigneesInput>
    create: XOR<CardCreateWithoutAssigneesInput, CardUncheckedCreateWithoutAssigneesInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutAssigneesInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutAssigneesInput, CardUncheckedUpdateWithoutAssigneesInput>
  }

  export type CardUpdateWithoutAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUpdateManyWithoutCardNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    list?: ListUpdateOneRequiredWithoutCardsNestedInput
    checklists?: ChecklistUpdateManyWithoutCardNestedInput
    comments?: CommentUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUncheckedUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUncheckedUpdateManyWithoutCardNestedInput
    checklists?: ChecklistUncheckedUpdateManyWithoutCardNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCardNestedInput
  }

  export type UserUpsertWithoutCardAssigneesInput = {
    update: XOR<UserUpdateWithoutCardAssigneesInput, UserUncheckedUpdateWithoutCardAssigneesInput>
    create: XOR<UserCreateWithoutCardAssigneesInput, UserUncheckedCreateWithoutCardAssigneesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCardAssigneesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCardAssigneesInput, UserUncheckedUpdateWithoutCardAssigneesInput>
  }

  export type UserUpdateWithoutCardAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCardAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CardCreateWithoutCardLabelsInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogCreateNestedManyWithoutCardInput
    attachments?: AttachmentCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeCreateNestedManyWithoutCardInput
    watchers?: CardWatcherCreateNestedManyWithoutCardInput
    creator: UserCreateNestedOneWithoutCardsInput
    list: ListCreateNestedOneWithoutCardsInput
    checklists?: ChecklistCreateNestedManyWithoutCardInput
    comments?: CommentCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutCardLabelsInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutCardInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeUncheckedCreateNestedManyWithoutCardInput
    watchers?: CardWatcherUncheckedCreateNestedManyWithoutCardInput
    checklists?: ChecklistUncheckedCreateNestedManyWithoutCardInput
    comments?: CommentUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutCardLabelsInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutCardLabelsInput, CardUncheckedCreateWithoutCardLabelsInput>
  }

  export type LabelCreateWithoutCardLabelsInput = {
    id?: string
    name?: string | null
    color: $Enums.Color
    board: BoardCreateNestedOneWithoutLabelsInput
  }

  export type LabelUncheckedCreateWithoutCardLabelsInput = {
    id?: string
    boardId: string
    name?: string | null
    color: $Enums.Color
  }

  export type LabelCreateOrConnectWithoutCardLabelsInput = {
    where: LabelWhereUniqueInput
    create: XOR<LabelCreateWithoutCardLabelsInput, LabelUncheckedCreateWithoutCardLabelsInput>
  }

  export type CardUpsertWithoutCardLabelsInput = {
    update: XOR<CardUpdateWithoutCardLabelsInput, CardUncheckedUpdateWithoutCardLabelsInput>
    create: XOR<CardCreateWithoutCardLabelsInput, CardUncheckedCreateWithoutCardLabelsInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutCardLabelsInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutCardLabelsInput, CardUncheckedUpdateWithoutCardLabelsInput>
  }

  export type CardUpdateWithoutCardLabelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUpdateManyWithoutCardNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    list?: ListUpdateOneRequiredWithoutCardsNestedInput
    checklists?: ChecklistUpdateManyWithoutCardNestedInput
    comments?: CommentUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutCardLabelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUncheckedUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUncheckedUpdateManyWithoutCardNestedInput
    checklists?: ChecklistUncheckedUpdateManyWithoutCardNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCardNestedInput
  }

  export type LabelUpsertWithoutCardLabelsInput = {
    update: XOR<LabelUpdateWithoutCardLabelsInput, LabelUncheckedUpdateWithoutCardLabelsInput>
    create: XOR<LabelCreateWithoutCardLabelsInput, LabelUncheckedCreateWithoutCardLabelsInput>
    where?: LabelWhereInput
  }

  export type LabelUpdateToOneWithWhereWithoutCardLabelsInput = {
    where?: LabelWhereInput
    data: XOR<LabelUpdateWithoutCardLabelsInput, LabelUncheckedUpdateWithoutCardLabelsInput>
  }

  export type LabelUpdateWithoutCardLabelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: EnumColorFieldUpdateOperationsInput | $Enums.Color
    board?: BoardUpdateOneRequiredWithoutLabelsNestedInput
  }

  export type LabelUncheckedUpdateWithoutCardLabelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: EnumColorFieldUpdateOperationsInput | $Enums.Color
  }

  export type CardCreateWithoutWatchersInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogCreateNestedManyWithoutCardInput
    attachments?: AttachmentCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelCreateNestedManyWithoutCardInput
    creator: UserCreateNestedOneWithoutCardsInput
    list: ListCreateNestedOneWithoutCardsInput
    checklists?: ChecklistCreateNestedManyWithoutCardInput
    comments?: CommentCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutWatchersInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutCardInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeUncheckedCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutCardInput
    checklists?: ChecklistUncheckedCreateNestedManyWithoutCardInput
    comments?: CommentUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutWatchersInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutWatchersInput, CardUncheckedCreateWithoutWatchersInput>
  }

  export type UserCreateWithoutCardWatchersInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCardWatchersInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCardWatchersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCardWatchersInput, UserUncheckedCreateWithoutCardWatchersInput>
  }

  export type CardUpsertWithoutWatchersInput = {
    update: XOR<CardUpdateWithoutWatchersInput, CardUncheckedUpdateWithoutWatchersInput>
    create: XOR<CardCreateWithoutWatchersInput, CardUncheckedCreateWithoutWatchersInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutWatchersInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutWatchersInput, CardUncheckedUpdateWithoutWatchersInput>
  }

  export type CardUpdateWithoutWatchersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUpdateManyWithoutCardNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    list?: ListUpdateOneRequiredWithoutCardsNestedInput
    checklists?: ChecklistUpdateManyWithoutCardNestedInput
    comments?: CommentUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutWatchersInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUncheckedUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUncheckedUpdateManyWithoutCardNestedInput
    checklists?: ChecklistUncheckedUpdateManyWithoutCardNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCardNestedInput
  }

  export type UserUpsertWithoutCardWatchersInput = {
    update: XOR<UserUpdateWithoutCardWatchersInput, UserUncheckedUpdateWithoutCardWatchersInput>
    create: XOR<UserCreateWithoutCardWatchersInput, UserUncheckedCreateWithoutCardWatchersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCardWatchersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCardWatchersInput, UserUncheckedUpdateWithoutCardWatchersInput>
  }

  export type UserUpdateWithoutCardWatchersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCardWatchersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ActivityLogCreateWithoutCardInput = {
    id?: string
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    board: BoardCreateNestedOneWithoutActivityLogsInput
    user?: UserCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateWithoutCardInput = {
    id?: string
    boardId: string
    userId?: string | null
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ActivityLogCreateOrConnectWithoutCardInput = {
    where: ActivityLogWhereUniqueInput
    create: XOR<ActivityLogCreateWithoutCardInput, ActivityLogUncheckedCreateWithoutCardInput>
  }

  export type ActivityLogCreateManyCardInputEnvelope = {
    data: ActivityLogCreateManyCardInput | ActivityLogCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type AttachmentCreateWithoutCardInput = {
    id?: string
    url: string
    filename: string
    bytes?: bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateWithoutCardInput = {
    id?: string
    userId: string
    url: string
    filename: string
    bytes?: bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttachmentCreateOrConnectWithoutCardInput = {
    where: AttachmentWhereUniqueInput
    create: XOR<AttachmentCreateWithoutCardInput, AttachmentUncheckedCreateWithoutCardInput>
  }

  export type AttachmentCreateManyCardInputEnvelope = {
    data: AttachmentCreateManyCardInput | AttachmentCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type CardAssigneeCreateWithoutCardInput = {
    user: UserCreateNestedOneWithoutCardAssigneesInput
  }

  export type CardAssigneeUncheckedCreateWithoutCardInput = {
    userId: string
  }

  export type CardAssigneeCreateOrConnectWithoutCardInput = {
    where: CardAssigneeWhereUniqueInput
    create: XOR<CardAssigneeCreateWithoutCardInput, CardAssigneeUncheckedCreateWithoutCardInput>
  }

  export type CardAssigneeCreateManyCardInputEnvelope = {
    data: CardAssigneeCreateManyCardInput | CardAssigneeCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type CardLabelCreateWithoutCardInput = {
    label: LabelCreateNestedOneWithoutCardLabelsInput
  }

  export type CardLabelUncheckedCreateWithoutCardInput = {
    labelId: string
  }

  export type CardLabelCreateOrConnectWithoutCardInput = {
    where: CardLabelWhereUniqueInput
    create: XOR<CardLabelCreateWithoutCardInput, CardLabelUncheckedCreateWithoutCardInput>
  }

  export type CardLabelCreateManyCardInputEnvelope = {
    data: CardLabelCreateManyCardInput | CardLabelCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type CardWatcherCreateWithoutCardInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCardWatchersInput
  }

  export type CardWatcherUncheckedCreateWithoutCardInput = {
    userId: string
    createdAt?: Date | string
  }

  export type CardWatcherCreateOrConnectWithoutCardInput = {
    where: CardWatcherWhereUniqueInput
    create: XOR<CardWatcherCreateWithoutCardInput, CardWatcherUncheckedCreateWithoutCardInput>
  }

  export type CardWatcherCreateManyCardInputEnvelope = {
    data: CardWatcherCreateManyCardInput | CardWatcherCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCardsInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCardsInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCardsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
  }

  export type ListCreateWithoutCardsInput = {
    id?: string
    name: string
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    subscribed?: boolean
    watchers?: ListWatcherCreateNestedManyWithoutListInput
    board: BoardCreateNestedOneWithoutListsInput
  }

  export type ListUncheckedCreateWithoutCardsInput = {
    id?: string
    boardId: string
    name: string
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    subscribed?: boolean
    watchers?: ListWatcherUncheckedCreateNestedManyWithoutListInput
  }

  export type ListCreateOrConnectWithoutCardsInput = {
    where: ListWhereUniqueInput
    create: XOR<ListCreateWithoutCardsInput, ListUncheckedCreateWithoutCardsInput>
  }

  export type ChecklistCreateWithoutCardInput = {
    id?: string
    title: string
    position?: Decimal | DecimalJsLike | number | string
    items?: ChecklistItemCreateNestedManyWithoutChecklistInput
  }

  export type ChecklistUncheckedCreateWithoutCardInput = {
    id?: string
    title: string
    position?: Decimal | DecimalJsLike | number | string
    items?: ChecklistItemUncheckedCreateNestedManyWithoutChecklistInput
  }

  export type ChecklistCreateOrConnectWithoutCardInput = {
    where: ChecklistWhereUniqueInput
    create: XOR<ChecklistCreateWithoutCardInput, ChecklistUncheckedCreateWithoutCardInput>
  }

  export type ChecklistCreateManyCardInputEnvelope = {
    data: ChecklistCreateManyCardInput | ChecklistCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutCardInput = {
    id?: string
    text: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutCardInput = {
    id?: string
    userId: string
    text: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutCardInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutCardInput, CommentUncheckedCreateWithoutCardInput>
  }

  export type CommentCreateManyCardInputEnvelope = {
    data: CommentCreateManyCardInput | CommentCreateManyCardInput[]
    skipDuplicates?: boolean
  }

  export type ActivityLogUpsertWithWhereUniqueWithoutCardInput = {
    where: ActivityLogWhereUniqueInput
    update: XOR<ActivityLogUpdateWithoutCardInput, ActivityLogUncheckedUpdateWithoutCardInput>
    create: XOR<ActivityLogCreateWithoutCardInput, ActivityLogUncheckedCreateWithoutCardInput>
  }

  export type ActivityLogUpdateWithWhereUniqueWithoutCardInput = {
    where: ActivityLogWhereUniqueInput
    data: XOR<ActivityLogUpdateWithoutCardInput, ActivityLogUncheckedUpdateWithoutCardInput>
  }

  export type ActivityLogUpdateManyWithWhereWithoutCardInput = {
    where: ActivityLogScalarWhereInput
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyWithoutCardInput>
  }

  export type AttachmentUpsertWithWhereUniqueWithoutCardInput = {
    where: AttachmentWhereUniqueInput
    update: XOR<AttachmentUpdateWithoutCardInput, AttachmentUncheckedUpdateWithoutCardInput>
    create: XOR<AttachmentCreateWithoutCardInput, AttachmentUncheckedCreateWithoutCardInput>
  }

  export type AttachmentUpdateWithWhereUniqueWithoutCardInput = {
    where: AttachmentWhereUniqueInput
    data: XOR<AttachmentUpdateWithoutCardInput, AttachmentUncheckedUpdateWithoutCardInput>
  }

  export type AttachmentUpdateManyWithWhereWithoutCardInput = {
    where: AttachmentScalarWhereInput
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyWithoutCardInput>
  }

  export type AttachmentScalarWhereInput = {
    AND?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    OR?: AttachmentScalarWhereInput[]
    NOT?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    id?: UuidFilter<"Attachment"> | string
    cardId?: UuidFilter<"Attachment"> | string
    userId?: UuidFilter<"Attachment"> | string
    url?: StringFilter<"Attachment"> | string
    filename?: StringFilter<"Attachment"> | string
    bytes?: BigIntNullableFilter<"Attachment"> | bigint | number | null
    meta?: JsonNullableFilter<"Attachment">
    createdAt?: DateTimeFilter<"Attachment"> | Date | string
  }

  export type CardAssigneeUpsertWithWhereUniqueWithoutCardInput = {
    where: CardAssigneeWhereUniqueInput
    update: XOR<CardAssigneeUpdateWithoutCardInput, CardAssigneeUncheckedUpdateWithoutCardInput>
    create: XOR<CardAssigneeCreateWithoutCardInput, CardAssigneeUncheckedCreateWithoutCardInput>
  }

  export type CardAssigneeUpdateWithWhereUniqueWithoutCardInput = {
    where: CardAssigneeWhereUniqueInput
    data: XOR<CardAssigneeUpdateWithoutCardInput, CardAssigneeUncheckedUpdateWithoutCardInput>
  }

  export type CardAssigneeUpdateManyWithWhereWithoutCardInput = {
    where: CardAssigneeScalarWhereInput
    data: XOR<CardAssigneeUpdateManyMutationInput, CardAssigneeUncheckedUpdateManyWithoutCardInput>
  }

  export type CardAssigneeScalarWhereInput = {
    AND?: CardAssigneeScalarWhereInput | CardAssigneeScalarWhereInput[]
    OR?: CardAssigneeScalarWhereInput[]
    NOT?: CardAssigneeScalarWhereInput | CardAssigneeScalarWhereInput[]
    cardId?: UuidFilter<"CardAssignee"> | string
    userId?: UuidFilter<"CardAssignee"> | string
  }

  export type CardLabelUpsertWithWhereUniqueWithoutCardInput = {
    where: CardLabelWhereUniqueInput
    update: XOR<CardLabelUpdateWithoutCardInput, CardLabelUncheckedUpdateWithoutCardInput>
    create: XOR<CardLabelCreateWithoutCardInput, CardLabelUncheckedCreateWithoutCardInput>
  }

  export type CardLabelUpdateWithWhereUniqueWithoutCardInput = {
    where: CardLabelWhereUniqueInput
    data: XOR<CardLabelUpdateWithoutCardInput, CardLabelUncheckedUpdateWithoutCardInput>
  }

  export type CardLabelUpdateManyWithWhereWithoutCardInput = {
    where: CardLabelScalarWhereInput
    data: XOR<CardLabelUpdateManyMutationInput, CardLabelUncheckedUpdateManyWithoutCardInput>
  }

  export type CardLabelScalarWhereInput = {
    AND?: CardLabelScalarWhereInput | CardLabelScalarWhereInput[]
    OR?: CardLabelScalarWhereInput[]
    NOT?: CardLabelScalarWhereInput | CardLabelScalarWhereInput[]
    cardId?: UuidFilter<"CardLabel"> | string
    labelId?: UuidFilter<"CardLabel"> | string
  }

  export type CardWatcherUpsertWithWhereUniqueWithoutCardInput = {
    where: CardWatcherWhereUniqueInput
    update: XOR<CardWatcherUpdateWithoutCardInput, CardWatcherUncheckedUpdateWithoutCardInput>
    create: XOR<CardWatcherCreateWithoutCardInput, CardWatcherUncheckedCreateWithoutCardInput>
  }

  export type CardWatcherUpdateWithWhereUniqueWithoutCardInput = {
    where: CardWatcherWhereUniqueInput
    data: XOR<CardWatcherUpdateWithoutCardInput, CardWatcherUncheckedUpdateWithoutCardInput>
  }

  export type CardWatcherUpdateManyWithWhereWithoutCardInput = {
    where: CardWatcherScalarWhereInput
    data: XOR<CardWatcherUpdateManyMutationInput, CardWatcherUncheckedUpdateManyWithoutCardInput>
  }

  export type CardWatcherScalarWhereInput = {
    AND?: CardWatcherScalarWhereInput | CardWatcherScalarWhereInput[]
    OR?: CardWatcherScalarWhereInput[]
    NOT?: CardWatcherScalarWhereInput | CardWatcherScalarWhereInput[]
    cardId?: UuidFilter<"CardWatcher"> | string
    userId?: UuidFilter<"CardWatcher"> | string
    createdAt?: DateTimeFilter<"CardWatcher"> | Date | string
  }

  export type UserUpsertWithoutCardsInput = {
    update: XOR<UserUpdateWithoutCardsInput, UserUncheckedUpdateWithoutCardsInput>
    create: XOR<UserCreateWithoutCardsInput, UserUncheckedCreateWithoutCardsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCardsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCardsInput, UserUncheckedUpdateWithoutCardsInput>
  }

  export type UserUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ListUpsertWithoutCardsInput = {
    update: XOR<ListUpdateWithoutCardsInput, ListUncheckedUpdateWithoutCardsInput>
    create: XOR<ListCreateWithoutCardsInput, ListUncheckedCreateWithoutCardsInput>
    where?: ListWhereInput
  }

  export type ListUpdateToOneWithWhereWithoutCardsInput = {
    where?: ListWhereInput
    data: XOR<ListUpdateWithoutCardsInput, ListUncheckedUpdateWithoutCardsInput>
  }

  export type ListUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
    watchers?: ListWatcherUpdateManyWithoutListNestedInput
    board?: BoardUpdateOneRequiredWithoutListsNestedInput
  }

  export type ListUncheckedUpdateWithoutCardsInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
    watchers?: ListWatcherUncheckedUpdateManyWithoutListNestedInput
  }

  export type ChecklistUpsertWithWhereUniqueWithoutCardInput = {
    where: ChecklistWhereUniqueInput
    update: XOR<ChecklistUpdateWithoutCardInput, ChecklistUncheckedUpdateWithoutCardInput>
    create: XOR<ChecklistCreateWithoutCardInput, ChecklistUncheckedCreateWithoutCardInput>
  }

  export type ChecklistUpdateWithWhereUniqueWithoutCardInput = {
    where: ChecklistWhereUniqueInput
    data: XOR<ChecklistUpdateWithoutCardInput, ChecklistUncheckedUpdateWithoutCardInput>
  }

  export type ChecklistUpdateManyWithWhereWithoutCardInput = {
    where: ChecklistScalarWhereInput
    data: XOR<ChecklistUpdateManyMutationInput, ChecklistUncheckedUpdateManyWithoutCardInput>
  }

  export type ChecklistScalarWhereInput = {
    AND?: ChecklistScalarWhereInput | ChecklistScalarWhereInput[]
    OR?: ChecklistScalarWhereInput[]
    NOT?: ChecklistScalarWhereInput | ChecklistScalarWhereInput[]
    id?: UuidFilter<"Checklist"> | string
    cardId?: UuidFilter<"Checklist"> | string
    title?: StringFilter<"Checklist"> | string
    position?: DecimalFilter<"Checklist"> | Decimal | DecimalJsLike | number | string
  }

  export type CommentUpsertWithWhereUniqueWithoutCardInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutCardInput, CommentUncheckedUpdateWithoutCardInput>
    create: XOR<CommentCreateWithoutCardInput, CommentUncheckedCreateWithoutCardInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutCardInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutCardInput, CommentUncheckedUpdateWithoutCardInput>
  }

  export type CommentUpdateManyWithWhereWithoutCardInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCardInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: UuidFilter<"Comment"> | string
    cardId?: UuidFilter<"Comment"> | string
    userId?: UuidFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type ChecklistItemCreateWithoutAssigneesInput = {
    id?: string
    text: string
    isCompleted?: boolean
    dueDate?: Date | string | null
    position?: Decimal | DecimalJsLike | number | string
    checklist: ChecklistCreateNestedOneWithoutItemsInput
  }

  export type ChecklistItemUncheckedCreateWithoutAssigneesInput = {
    id?: string
    checklistId: string
    text: string
    isCompleted?: boolean
    dueDate?: Date | string | null
    position?: Decimal | DecimalJsLike | number | string
  }

  export type ChecklistItemCreateOrConnectWithoutAssigneesInput = {
    where: ChecklistItemWhereUniqueInput
    create: XOR<ChecklistItemCreateWithoutAssigneesInput, ChecklistItemUncheckedCreateWithoutAssigneesInput>
  }

  export type UserCreateWithoutChecklistItemAssigneesInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutChecklistItemAssigneesInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutChecklistItemAssigneesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChecklistItemAssigneesInput, UserUncheckedCreateWithoutChecklistItemAssigneesInput>
  }

  export type ChecklistItemUpsertWithoutAssigneesInput = {
    update: XOR<ChecklistItemUpdateWithoutAssigneesInput, ChecklistItemUncheckedUpdateWithoutAssigneesInput>
    create: XOR<ChecklistItemCreateWithoutAssigneesInput, ChecklistItemUncheckedCreateWithoutAssigneesInput>
    where?: ChecklistItemWhereInput
  }

  export type ChecklistItemUpdateToOneWithWhereWithoutAssigneesInput = {
    where?: ChecklistItemWhereInput
    data: XOR<ChecklistItemUpdateWithoutAssigneesInput, ChecklistItemUncheckedUpdateWithoutAssigneesInput>
  }

  export type ChecklistItemUpdateWithoutAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    checklist?: ChecklistUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ChecklistItemUncheckedUpdateWithoutAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    checklistId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type UserUpsertWithoutChecklistItemAssigneesInput = {
    update: XOR<UserUpdateWithoutChecklistItemAssigneesInput, UserUncheckedUpdateWithoutChecklistItemAssigneesInput>
    create: XOR<UserCreateWithoutChecklistItemAssigneesInput, UserUncheckedCreateWithoutChecklistItemAssigneesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChecklistItemAssigneesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChecklistItemAssigneesInput, UserUncheckedUpdateWithoutChecklistItemAssigneesInput>
  }

  export type UserUpdateWithoutChecklistItemAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutChecklistItemAssigneesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type ChecklistItemAssigneeCreateWithoutItemInput = {
    user: UserCreateNestedOneWithoutChecklistItemAssigneesInput
  }

  export type ChecklistItemAssigneeUncheckedCreateWithoutItemInput = {
    userId: string
  }

  export type ChecklistItemAssigneeCreateOrConnectWithoutItemInput = {
    where: ChecklistItemAssigneeWhereUniqueInput
    create: XOR<ChecklistItemAssigneeCreateWithoutItemInput, ChecklistItemAssigneeUncheckedCreateWithoutItemInput>
  }

  export type ChecklistItemAssigneeCreateManyItemInputEnvelope = {
    data: ChecklistItemAssigneeCreateManyItemInput | ChecklistItemAssigneeCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type ChecklistCreateWithoutItemsInput = {
    id?: string
    title: string
    position?: Decimal | DecimalJsLike | number | string
    card: CardCreateNestedOneWithoutChecklistsInput
  }

  export type ChecklistUncheckedCreateWithoutItemsInput = {
    id?: string
    cardId: string
    title: string
    position?: Decimal | DecimalJsLike | number | string
  }

  export type ChecklistCreateOrConnectWithoutItemsInput = {
    where: ChecklistWhereUniqueInput
    create: XOR<ChecklistCreateWithoutItemsInput, ChecklistUncheckedCreateWithoutItemsInput>
  }

  export type ChecklistItemAssigneeUpsertWithWhereUniqueWithoutItemInput = {
    where: ChecklistItemAssigneeWhereUniqueInput
    update: XOR<ChecklistItemAssigneeUpdateWithoutItemInput, ChecklistItemAssigneeUncheckedUpdateWithoutItemInput>
    create: XOR<ChecklistItemAssigneeCreateWithoutItemInput, ChecklistItemAssigneeUncheckedCreateWithoutItemInput>
  }

  export type ChecklistItemAssigneeUpdateWithWhereUniqueWithoutItemInput = {
    where: ChecklistItemAssigneeWhereUniqueInput
    data: XOR<ChecklistItemAssigneeUpdateWithoutItemInput, ChecklistItemAssigneeUncheckedUpdateWithoutItemInput>
  }

  export type ChecklistItemAssigneeUpdateManyWithWhereWithoutItemInput = {
    where: ChecklistItemAssigneeScalarWhereInput
    data: XOR<ChecklistItemAssigneeUpdateManyMutationInput, ChecklistItemAssigneeUncheckedUpdateManyWithoutItemInput>
  }

  export type ChecklistItemAssigneeScalarWhereInput = {
    AND?: ChecklistItemAssigneeScalarWhereInput | ChecklistItemAssigneeScalarWhereInput[]
    OR?: ChecklistItemAssigneeScalarWhereInput[]
    NOT?: ChecklistItemAssigneeScalarWhereInput | ChecklistItemAssigneeScalarWhereInput[]
    itemId?: UuidFilter<"ChecklistItemAssignee"> | string
    userId?: UuidFilter<"ChecklistItemAssignee"> | string
  }

  export type ChecklistUpsertWithoutItemsInput = {
    update: XOR<ChecklistUpdateWithoutItemsInput, ChecklistUncheckedUpdateWithoutItemsInput>
    create: XOR<ChecklistCreateWithoutItemsInput, ChecklistUncheckedCreateWithoutItemsInput>
    where?: ChecklistWhereInput
  }

  export type ChecklistUpdateToOneWithWhereWithoutItemsInput = {
    where?: ChecklistWhereInput
    data: XOR<ChecklistUpdateWithoutItemsInput, ChecklistUncheckedUpdateWithoutItemsInput>
  }

  export type ChecklistUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    card?: CardUpdateOneRequiredWithoutChecklistsNestedInput
  }

  export type ChecklistUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ChecklistItemCreateWithoutChecklistInput = {
    id?: string
    text: string
    isCompleted?: boolean
    dueDate?: Date | string | null
    position?: Decimal | DecimalJsLike | number | string
    assignees?: ChecklistItemAssigneeCreateNestedManyWithoutItemInput
  }

  export type ChecklistItemUncheckedCreateWithoutChecklistInput = {
    id?: string
    text: string
    isCompleted?: boolean
    dueDate?: Date | string | null
    position?: Decimal | DecimalJsLike | number | string
    assignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutItemInput
  }

  export type ChecklistItemCreateOrConnectWithoutChecklistInput = {
    where: ChecklistItemWhereUniqueInput
    create: XOR<ChecklistItemCreateWithoutChecklistInput, ChecklistItemUncheckedCreateWithoutChecklistInput>
  }

  export type ChecklistItemCreateManyChecklistInputEnvelope = {
    data: ChecklistItemCreateManyChecklistInput | ChecklistItemCreateManyChecklistInput[]
    skipDuplicates?: boolean
  }

  export type CardCreateWithoutChecklistsInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogCreateNestedManyWithoutCardInput
    attachments?: AttachmentCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelCreateNestedManyWithoutCardInput
    watchers?: CardWatcherCreateNestedManyWithoutCardInput
    creator: UserCreateNestedOneWithoutCardsInput
    list: ListCreateNestedOneWithoutCardsInput
    comments?: CommentCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutChecklistsInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutCardInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeUncheckedCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutCardInput
    watchers?: CardWatcherUncheckedCreateNestedManyWithoutCardInput
    comments?: CommentUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutChecklistsInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutChecklistsInput, CardUncheckedCreateWithoutChecklistsInput>
  }

  export type ChecklistItemUpsertWithWhereUniqueWithoutChecklistInput = {
    where: ChecklistItemWhereUniqueInput
    update: XOR<ChecklistItemUpdateWithoutChecklistInput, ChecklistItemUncheckedUpdateWithoutChecklistInput>
    create: XOR<ChecklistItemCreateWithoutChecklistInput, ChecklistItemUncheckedCreateWithoutChecklistInput>
  }

  export type ChecklistItemUpdateWithWhereUniqueWithoutChecklistInput = {
    where: ChecklistItemWhereUniqueInput
    data: XOR<ChecklistItemUpdateWithoutChecklistInput, ChecklistItemUncheckedUpdateWithoutChecklistInput>
  }

  export type ChecklistItemUpdateManyWithWhereWithoutChecklistInput = {
    where: ChecklistItemScalarWhereInput
    data: XOR<ChecklistItemUpdateManyMutationInput, ChecklistItemUncheckedUpdateManyWithoutChecklistInput>
  }

  export type ChecklistItemScalarWhereInput = {
    AND?: ChecklistItemScalarWhereInput | ChecklistItemScalarWhereInput[]
    OR?: ChecklistItemScalarWhereInput[]
    NOT?: ChecklistItemScalarWhereInput | ChecklistItemScalarWhereInput[]
    id?: UuidFilter<"ChecklistItem"> | string
    checklistId?: UuidFilter<"ChecklistItem"> | string
    text?: StringFilter<"ChecklistItem"> | string
    isCompleted?: BoolFilter<"ChecklistItem"> | boolean
    dueDate?: DateTimeNullableFilter<"ChecklistItem"> | Date | string | null
    position?: DecimalFilter<"ChecklistItem"> | Decimal | DecimalJsLike | number | string
  }

  export type CardUpsertWithoutChecklistsInput = {
    update: XOR<CardUpdateWithoutChecklistsInput, CardUncheckedUpdateWithoutChecklistsInput>
    create: XOR<CardCreateWithoutChecklistsInput, CardUncheckedCreateWithoutChecklistsInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutChecklistsInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutChecklistsInput, CardUncheckedUpdateWithoutChecklistsInput>
  }

  export type CardUpdateWithoutChecklistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUpdateManyWithoutCardNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    list?: ListUpdateOneRequiredWithoutCardsNestedInput
    comments?: CommentUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutChecklistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUncheckedUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUncheckedUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUncheckedUpdateManyWithoutCardNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogCreateNestedManyWithoutCardInput
    attachments?: AttachmentCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelCreateNestedManyWithoutCardInput
    watchers?: CardWatcherCreateNestedManyWithoutCardInput
    creator: UserCreateNestedOneWithoutCardsInput
    list: ListCreateNestedOneWithoutCardsInput
    checklists?: ChecklistCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutCommentsInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutCardInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeUncheckedCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutCardInput
    watchers?: CardWatcherUncheckedCreateNestedManyWithoutCardInput
    checklists?: ChecklistUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutCommentsInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutCommentsInput, CardUncheckedCreateWithoutCommentsInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type CardUpsertWithoutCommentsInput = {
    update: XOR<CardUpdateWithoutCommentsInput, CardUncheckedUpdateWithoutCommentsInput>
    create: XOR<CardCreateWithoutCommentsInput, CardUncheckedCreateWithoutCommentsInput>
    where?: CardWhereInput
  }

  export type CardUpdateToOneWithWhereWithoutCommentsInput = {
    where?: CardWhereInput
    data: XOR<CardUpdateWithoutCommentsInput, CardUncheckedUpdateWithoutCommentsInput>
  }

  export type CardUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUpdateManyWithoutCardNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    list?: ListUpdateOneRequiredWithoutCardsNestedInput
    checklists?: ChecklistUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUncheckedUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUncheckedUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUncheckedUpdateManyWithoutCardNestedInput
    checklists?: ChecklistUncheckedUpdateManyWithoutCardNestedInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CardLabelCreateWithoutLabelInput = {
    card: CardCreateNestedOneWithoutCardLabelsInput
  }

  export type CardLabelUncheckedCreateWithoutLabelInput = {
    cardId: string
  }

  export type CardLabelCreateOrConnectWithoutLabelInput = {
    where: CardLabelWhereUniqueInput
    create: XOR<CardLabelCreateWithoutLabelInput, CardLabelUncheckedCreateWithoutLabelInput>
  }

  export type CardLabelCreateManyLabelInputEnvelope = {
    data: CardLabelCreateManyLabelInput | CardLabelCreateManyLabelInput[]
    skipDuplicates?: boolean
  }

  export type BoardCreateWithoutLabelsInput = {
    id?: string
    name: string
    description?: string | null
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogCreateNestedManyWithoutBoardInput
    boardMembers?: BoardMemberCreateNestedManyWithoutBoardInput
    creator: UserCreateNestedOneWithoutBoardsInput
    workspace: WorkspaceCreateNestedOneWithoutBoardsInput
    lists?: ListCreateNestedManyWithoutBoardInput
  }

  export type BoardUncheckedCreateWithoutLabelsInput = {
    id?: string
    workspaceId: string
    name: string
    description?: string | null
    createdBy: string
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutBoardInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutBoardInput
    lists?: ListUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardCreateOrConnectWithoutLabelsInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutLabelsInput, BoardUncheckedCreateWithoutLabelsInput>
  }

  export type CardLabelUpsertWithWhereUniqueWithoutLabelInput = {
    where: CardLabelWhereUniqueInput
    update: XOR<CardLabelUpdateWithoutLabelInput, CardLabelUncheckedUpdateWithoutLabelInput>
    create: XOR<CardLabelCreateWithoutLabelInput, CardLabelUncheckedCreateWithoutLabelInput>
  }

  export type CardLabelUpdateWithWhereUniqueWithoutLabelInput = {
    where: CardLabelWhereUniqueInput
    data: XOR<CardLabelUpdateWithoutLabelInput, CardLabelUncheckedUpdateWithoutLabelInput>
  }

  export type CardLabelUpdateManyWithWhereWithoutLabelInput = {
    where: CardLabelScalarWhereInput
    data: XOR<CardLabelUpdateManyMutationInput, CardLabelUncheckedUpdateManyWithoutLabelInput>
  }

  export type BoardUpsertWithoutLabelsInput = {
    update: XOR<BoardUpdateWithoutLabelsInput, BoardUncheckedUpdateWithoutLabelsInput>
    create: XOR<BoardCreateWithoutLabelsInput, BoardUncheckedCreateWithoutLabelsInput>
    where?: BoardWhereInput
  }

  export type BoardUpdateToOneWithWhereWithoutLabelsInput = {
    where?: BoardWhereInput
    data: XOR<BoardUpdateWithoutLabelsInput, BoardUncheckedUpdateWithoutLabelsInput>
  }

  export type BoardUpdateWithoutLabelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUpdateManyWithoutBoardNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutBoardNestedInput
    creator?: UserUpdateOneRequiredWithoutBoardsNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBoardsNestedInput
    lists?: ListUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateWithoutLabelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutBoardNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutBoardNestedInput
    lists?: ListUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type ListCreateWithoutWatchersInput = {
    id?: string
    name: string
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    subscribed?: boolean
    cards?: CardCreateNestedManyWithoutListInput
    board: BoardCreateNestedOneWithoutListsInput
  }

  export type ListUncheckedCreateWithoutWatchersInput = {
    id?: string
    boardId: string
    name: string
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    subscribed?: boolean
    cards?: CardUncheckedCreateNestedManyWithoutListInput
  }

  export type ListCreateOrConnectWithoutWatchersInput = {
    where: ListWhereUniqueInput
    create: XOR<ListCreateWithoutWatchersInput, ListUncheckedCreateWithoutWatchersInput>
  }

  export type UserCreateWithoutListWatchersInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutListWatchersInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutListWatchersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutListWatchersInput, UserUncheckedCreateWithoutListWatchersInput>
  }

  export type ListUpsertWithoutWatchersInput = {
    update: XOR<ListUpdateWithoutWatchersInput, ListUncheckedUpdateWithoutWatchersInput>
    create: XOR<ListCreateWithoutWatchersInput, ListUncheckedCreateWithoutWatchersInput>
    where?: ListWhereInput
  }

  export type ListUpdateToOneWithWhereWithoutWatchersInput = {
    where?: ListWhereInput
    data: XOR<ListUpdateWithoutWatchersInput, ListUncheckedUpdateWithoutWatchersInput>
  }

  export type ListUpdateWithoutWatchersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutListNestedInput
    board?: BoardUpdateOneRequiredWithoutListsNestedInput
  }

  export type ListUncheckedUpdateWithoutWatchersInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutListNestedInput
  }

  export type UserUpsertWithoutListWatchersInput = {
    update: XOR<UserUpdateWithoutListWatchersInput, UserUncheckedUpdateWithoutListWatchersInput>
    create: XOR<UserCreateWithoutListWatchersInput, UserUncheckedCreateWithoutListWatchersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutListWatchersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutListWatchersInput, UserUncheckedUpdateWithoutListWatchersInput>
  }

  export type UserUpdateWithoutListWatchersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutListWatchersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type CardCreateWithoutListInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogCreateNestedManyWithoutCardInput
    attachments?: AttachmentCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelCreateNestedManyWithoutCardInput
    watchers?: CardWatcherCreateNestedManyWithoutCardInput
    creator: UserCreateNestedOneWithoutCardsInput
    checklists?: ChecklistCreateNestedManyWithoutCardInput
    comments?: CommentCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutListInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutCardInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeUncheckedCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutCardInput
    watchers?: CardWatcherUncheckedCreateNestedManyWithoutCardInput
    checklists?: ChecklistUncheckedCreateNestedManyWithoutCardInput
    comments?: CommentUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutListInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutListInput, CardUncheckedCreateWithoutListInput>
  }

  export type CardCreateManyListInputEnvelope = {
    data: CardCreateManyListInput | CardCreateManyListInput[]
    skipDuplicates?: boolean
  }

  export type ListWatcherCreateWithoutListInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutListWatchersInput
  }

  export type ListWatcherUncheckedCreateWithoutListInput = {
    userId: string
    createdAt?: Date | string
  }

  export type ListWatcherCreateOrConnectWithoutListInput = {
    where: ListWatcherWhereUniqueInput
    create: XOR<ListWatcherCreateWithoutListInput, ListWatcherUncheckedCreateWithoutListInput>
  }

  export type ListWatcherCreateManyListInputEnvelope = {
    data: ListWatcherCreateManyListInput | ListWatcherCreateManyListInput[]
    skipDuplicates?: boolean
  }

  export type BoardCreateWithoutListsInput = {
    id?: string
    name: string
    description?: string | null
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogCreateNestedManyWithoutBoardInput
    boardMembers?: BoardMemberCreateNestedManyWithoutBoardInput
    creator: UserCreateNestedOneWithoutBoardsInput
    workspace: WorkspaceCreateNestedOneWithoutBoardsInput
    labels?: LabelCreateNestedManyWithoutBoardInput
  }

  export type BoardUncheckedCreateWithoutListsInput = {
    id?: string
    workspaceId: string
    name: string
    description?: string | null
    createdBy: string
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutBoardInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutBoardInput
    labels?: LabelUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardCreateOrConnectWithoutListsInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutListsInput, BoardUncheckedCreateWithoutListsInput>
  }

  export type CardUpsertWithWhereUniqueWithoutListInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutListInput, CardUncheckedUpdateWithoutListInput>
    create: XOR<CardCreateWithoutListInput, CardUncheckedCreateWithoutListInput>
  }

  export type CardUpdateWithWhereUniqueWithoutListInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutListInput, CardUncheckedUpdateWithoutListInput>
  }

  export type CardUpdateManyWithWhereWithoutListInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutListInput>
  }

  export type CardScalarWhereInput = {
    AND?: CardScalarWhereInput | CardScalarWhereInput[]
    OR?: CardScalarWhereInput[]
    NOT?: CardScalarWhereInput | CardScalarWhereInput[]
    id?: UuidFilter<"Card"> | string
    listId?: UuidFilter<"Card"> | string
    title?: StringFilter<"Card"> | string
    description?: StringNullableFilter<"Card"> | string | null
    dueDate?: DateTimeNullableFilter<"Card"> | Date | string | null
    startDate?: DateTimeNullableFilter<"Card"> | Date | string | null
    position?: DecimalFilter<"Card"> | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFilter<"Card"> | boolean
    createdBy?: UuidFilter<"Card"> | string
    coverImageUrl?: StringNullableFilter<"Card"> | string | null
    createdAt?: DateTimeFilter<"Card"> | Date | string
    updatedAt?: DateTimeFilter<"Card"> | Date | string
  }

  export type ListWatcherUpsertWithWhereUniqueWithoutListInput = {
    where: ListWatcherWhereUniqueInput
    update: XOR<ListWatcherUpdateWithoutListInput, ListWatcherUncheckedUpdateWithoutListInput>
    create: XOR<ListWatcherCreateWithoutListInput, ListWatcherUncheckedCreateWithoutListInput>
  }

  export type ListWatcherUpdateWithWhereUniqueWithoutListInput = {
    where: ListWatcherWhereUniqueInput
    data: XOR<ListWatcherUpdateWithoutListInput, ListWatcherUncheckedUpdateWithoutListInput>
  }

  export type ListWatcherUpdateManyWithWhereWithoutListInput = {
    where: ListWatcherScalarWhereInput
    data: XOR<ListWatcherUpdateManyMutationInput, ListWatcherUncheckedUpdateManyWithoutListInput>
  }

  export type ListWatcherScalarWhereInput = {
    AND?: ListWatcherScalarWhereInput | ListWatcherScalarWhereInput[]
    OR?: ListWatcherScalarWhereInput[]
    NOT?: ListWatcherScalarWhereInput | ListWatcherScalarWhereInput[]
    listId?: UuidFilter<"ListWatcher"> | string
    userId?: UuidFilter<"ListWatcher"> | string
    createdAt?: DateTimeFilter<"ListWatcher"> | Date | string
  }

  export type BoardUpsertWithoutListsInput = {
    update: XOR<BoardUpdateWithoutListsInput, BoardUncheckedUpdateWithoutListsInput>
    create: XOR<BoardCreateWithoutListsInput, BoardUncheckedCreateWithoutListsInput>
    where?: BoardWhereInput
  }

  export type BoardUpdateToOneWithWhereWithoutListsInput = {
    where?: BoardWhereInput
    data: XOR<BoardUpdateWithoutListsInput, BoardUncheckedUpdateWithoutListsInput>
  }

  export type BoardUpdateWithoutListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUpdateManyWithoutBoardNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutBoardNestedInput
    creator?: UserUpdateOneRequiredWithoutBoardsNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBoardsNestedInput
    labels?: LabelUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateWithoutListsInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutBoardNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutBoardNestedInput
    labels?: LabelUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type ActivityLogCreateWithoutUserInput = {
    id?: string
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    board: BoardCreateNestedOneWithoutActivityLogsInput
    card?: CardCreateNestedOneWithoutActivityLogsInput
  }

  export type ActivityLogUncheckedCreateWithoutUserInput = {
    id?: string
    boardId: string
    cardId?: string | null
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ActivityLogCreateOrConnectWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    create: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogCreateManyUserInputEnvelope = {
    data: ActivityLogCreateManyUserInput | ActivityLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AttachmentCreateWithoutUserInput = {
    id?: string
    url: string
    filename: string
    bytes?: bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateWithoutUserInput = {
    id?: string
    cardId: string
    url: string
    filename: string
    bytes?: bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttachmentCreateOrConnectWithoutUserInput = {
    where: AttachmentWhereUniqueInput
    create: XOR<AttachmentCreateWithoutUserInput, AttachmentUncheckedCreateWithoutUserInput>
  }

  export type AttachmentCreateManyUserInputEnvelope = {
    data: AttachmentCreateManyUserInput | AttachmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BoardMemberCreateWithoutUserInput = {
    role?: $Enums.BoardRole
    joinedAt?: Date | string
    board: BoardCreateNestedOneWithoutBoardMembersInput
  }

  export type BoardMemberUncheckedCreateWithoutUserInput = {
    boardId: string
    role?: $Enums.BoardRole
    joinedAt?: Date | string
  }

  export type BoardMemberCreateOrConnectWithoutUserInput = {
    where: BoardMemberWhereUniqueInput
    create: XOR<BoardMemberCreateWithoutUserInput, BoardMemberUncheckedCreateWithoutUserInput>
  }

  export type BoardMemberCreateManyUserInputEnvelope = {
    data: BoardMemberCreateManyUserInput | BoardMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BoardCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogCreateNestedManyWithoutBoardInput
    boardMembers?: BoardMemberCreateNestedManyWithoutBoardInput
    workspace: WorkspaceCreateNestedOneWithoutBoardsInput
    labels?: LabelCreateNestedManyWithoutBoardInput
    lists?: ListCreateNestedManyWithoutBoardInput
  }

  export type BoardUncheckedCreateWithoutCreatorInput = {
    id?: string
    workspaceId: string
    name: string
    description?: string | null
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutBoardInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutBoardInput
    labels?: LabelUncheckedCreateNestedManyWithoutBoardInput
    lists?: ListUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardCreateOrConnectWithoutCreatorInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutCreatorInput, BoardUncheckedCreateWithoutCreatorInput>
  }

  export type BoardCreateManyCreatorInputEnvelope = {
    data: BoardCreateManyCreatorInput | BoardCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type CardAssigneeCreateWithoutUserInput = {
    card: CardCreateNestedOneWithoutAssigneesInput
  }

  export type CardAssigneeUncheckedCreateWithoutUserInput = {
    cardId: string
  }

  export type CardAssigneeCreateOrConnectWithoutUserInput = {
    where: CardAssigneeWhereUniqueInput
    create: XOR<CardAssigneeCreateWithoutUserInput, CardAssigneeUncheckedCreateWithoutUserInput>
  }

  export type CardAssigneeCreateManyUserInputEnvelope = {
    data: CardAssigneeCreateManyUserInput | CardAssigneeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CardWatcherCreateWithoutUserInput = {
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutWatchersInput
  }

  export type CardWatcherUncheckedCreateWithoutUserInput = {
    cardId: string
    createdAt?: Date | string
  }

  export type CardWatcherCreateOrConnectWithoutUserInput = {
    where: CardWatcherWhereUniqueInput
    create: XOR<CardWatcherCreateWithoutUserInput, CardWatcherUncheckedCreateWithoutUserInput>
  }

  export type CardWatcherCreateManyUserInputEnvelope = {
    data: CardWatcherCreateManyUserInput | CardWatcherCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CardCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogCreateNestedManyWithoutCardInput
    attachments?: AttachmentCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelCreateNestedManyWithoutCardInput
    watchers?: CardWatcherCreateNestedManyWithoutCardInput
    list: ListCreateNestedOneWithoutCardsInput
    checklists?: ChecklistCreateNestedManyWithoutCardInput
    comments?: CommentCreateNestedManyWithoutCardInput
  }

  export type CardUncheckedCreateWithoutCreatorInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutCardInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutCardInput
    assignees?: CardAssigneeUncheckedCreateNestedManyWithoutCardInput
    cardLabels?: CardLabelUncheckedCreateNestedManyWithoutCardInput
    watchers?: CardWatcherUncheckedCreateNestedManyWithoutCardInput
    checklists?: ChecklistUncheckedCreateNestedManyWithoutCardInput
    comments?: CommentUncheckedCreateNestedManyWithoutCardInput
  }

  export type CardCreateOrConnectWithoutCreatorInput = {
    where: CardWhereUniqueInput
    create: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput>
  }

  export type CardCreateManyCreatorInputEnvelope = {
    data: CardCreateManyCreatorInput | CardCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ChecklistItemAssigneeCreateWithoutUserInput = {
    item: ChecklistItemCreateNestedOneWithoutAssigneesInput
  }

  export type ChecklistItemAssigneeUncheckedCreateWithoutUserInput = {
    itemId: string
  }

  export type ChecklistItemAssigneeCreateOrConnectWithoutUserInput = {
    where: ChecklistItemAssigneeWhereUniqueInput
    create: XOR<ChecklistItemAssigneeCreateWithoutUserInput, ChecklistItemAssigneeUncheckedCreateWithoutUserInput>
  }

  export type ChecklistItemAssigneeCreateManyUserInputEnvelope = {
    data: ChecklistItemAssigneeCreateManyUserInput | ChecklistItemAssigneeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    text: string
    createdAt?: Date | string
    card: CardCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    cardId: string
    text: string
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ListWatcherCreateWithoutUserInput = {
    createdAt?: Date | string
    list: ListCreateNestedOneWithoutWatchersInput
  }

  export type ListWatcherUncheckedCreateWithoutUserInput = {
    listId: string
    createdAt?: Date | string
  }

  export type ListWatcherCreateOrConnectWithoutUserInput = {
    where: ListWatcherWhereUniqueInput
    create: XOR<ListWatcherCreateWithoutUserInput, ListWatcherUncheckedCreateWithoutUserInput>
  }

  export type ListWatcherCreateManyUserInputEnvelope = {
    data: ListWatcherCreateManyUserInput | ListWatcherCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceMemberCreateWithoutUserInput = {
    role?: $Enums.WorkspaceRole
    joinedAt?: Date | string
    workspace: WorkspaceCreateNestedOneWithoutWorkspaceMembersInput
  }

  export type WorkspaceMemberUncheckedCreateWithoutUserInput = {
    workspaceId: string
    role?: $Enums.WorkspaceRole
    joinedAt?: Date | string
  }

  export type WorkspaceMemberCreateOrConnectWithoutUserInput = {
    where: WorkspaceMemberWhereUniqueInput
    create: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput>
  }

  export type WorkspaceMemberCreateManyUserInputEnvelope = {
    data: WorkspaceMemberCreateManyUserInput | WorkspaceMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    visibility?: $Enums.WorkspaceVisibility
    premium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.WorkspaceType
    workspaceMembershipRestrictions?: $Enums.MembershipRestrictions
    publicBoardCreation?: $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: $Enums.BoardCreationRestrictions
    privateBoardCreation?: $Enums.BoardCreationRestrictions
    publicBoardDeletion?: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: $Enums.BoardCreationRestrictions
    privateBoardDeletion?: $Enums.BoardCreationRestrictions
    allowGuestSharing?: $Enums.BoardSharing
    allowSlackIntegration?: $Enums.SlackSharing
    boards?: BoardCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceUncheckedCreateWithoutCreatorInput = {
    id?: string
    name: string
    description?: string | null
    visibility?: $Enums.WorkspaceVisibility
    premium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.WorkspaceType
    workspaceMembershipRestrictions?: $Enums.MembershipRestrictions
    publicBoardCreation?: $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: $Enums.BoardCreationRestrictions
    privateBoardCreation?: $Enums.BoardCreationRestrictions
    publicBoardDeletion?: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: $Enums.BoardCreationRestrictions
    privateBoardDeletion?: $Enums.BoardCreationRestrictions
    allowGuestSharing?: $Enums.BoardSharing
    allowSlackIntegration?: $Enums.SlackSharing
    boards?: BoardUncheckedCreateNestedManyWithoutWorkspaceInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutCreatorInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutCreatorInput, WorkspaceUncheckedCreateWithoutCreatorInput>
  }

  export type WorkspaceCreateManyCreatorInputEnvelope = {
    data: WorkspaceCreateManyCreatorInput | WorkspaceCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ActivityLogUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    update: XOR<ActivityLogUpdateWithoutUserInput, ActivityLogUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityLogCreateWithoutUserInput, ActivityLogUncheckedCreateWithoutUserInput>
  }

  export type ActivityLogUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityLogWhereUniqueInput
    data: XOR<ActivityLogUpdateWithoutUserInput, ActivityLogUncheckedUpdateWithoutUserInput>
  }

  export type ActivityLogUpdateManyWithWhereWithoutUserInput = {
    where: ActivityLogScalarWhereInput
    data: XOR<ActivityLogUpdateManyMutationInput, ActivityLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AttachmentUpsertWithWhereUniqueWithoutUserInput = {
    where: AttachmentWhereUniqueInput
    update: XOR<AttachmentUpdateWithoutUserInput, AttachmentUncheckedUpdateWithoutUserInput>
    create: XOR<AttachmentCreateWithoutUserInput, AttachmentUncheckedCreateWithoutUserInput>
  }

  export type AttachmentUpdateWithWhereUniqueWithoutUserInput = {
    where: AttachmentWhereUniqueInput
    data: XOR<AttachmentUpdateWithoutUserInput, AttachmentUncheckedUpdateWithoutUserInput>
  }

  export type AttachmentUpdateManyWithWhereWithoutUserInput = {
    where: AttachmentScalarWhereInput
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyWithoutUserInput>
  }

  export type BoardMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: BoardMemberWhereUniqueInput
    update: XOR<BoardMemberUpdateWithoutUserInput, BoardMemberUncheckedUpdateWithoutUserInput>
    create: XOR<BoardMemberCreateWithoutUserInput, BoardMemberUncheckedCreateWithoutUserInput>
  }

  export type BoardMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: BoardMemberWhereUniqueInput
    data: XOR<BoardMemberUpdateWithoutUserInput, BoardMemberUncheckedUpdateWithoutUserInput>
  }

  export type BoardMemberUpdateManyWithWhereWithoutUserInput = {
    where: BoardMemberScalarWhereInput
    data: XOR<BoardMemberUpdateManyMutationInput, BoardMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type BoardUpsertWithWhereUniqueWithoutCreatorInput = {
    where: BoardWhereUniqueInput
    update: XOR<BoardUpdateWithoutCreatorInput, BoardUncheckedUpdateWithoutCreatorInput>
    create: XOR<BoardCreateWithoutCreatorInput, BoardUncheckedCreateWithoutCreatorInput>
  }

  export type BoardUpdateWithWhereUniqueWithoutCreatorInput = {
    where: BoardWhereUniqueInput
    data: XOR<BoardUpdateWithoutCreatorInput, BoardUncheckedUpdateWithoutCreatorInput>
  }

  export type BoardUpdateManyWithWhereWithoutCreatorInput = {
    where: BoardScalarWhereInput
    data: XOR<BoardUpdateManyMutationInput, BoardUncheckedUpdateManyWithoutCreatorInput>
  }

  export type BoardScalarWhereInput = {
    AND?: BoardScalarWhereInput | BoardScalarWhereInput[]
    OR?: BoardScalarWhereInput[]
    NOT?: BoardScalarWhereInput | BoardScalarWhereInput[]
    id?: UuidFilter<"Board"> | string
    workspaceId?: UuidFilter<"Board"> | string
    name?: StringFilter<"Board"> | string
    description?: StringNullableFilter<"Board"> | string | null
    createdBy?: UuidFilter<"Board"> | string
    allowCovers?: BoolFilter<"Board"> | boolean
    showComplete?: BoolFilter<"Board"> | boolean
    createdAt?: DateTimeFilter<"Board"> | Date | string
    updatedAt?: DateTimeFilter<"Board"> | Date | string
    lastActivityAt?: DateTimeNullableFilter<"Board"> | Date | string | null
    background?: EnumBoardBackgroundFilter<"Board"> | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFilter<"Board"> | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFilter<"Board"> | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFilter<"Board"> | $Enums.CommentingRestrictions
  }

  export type CardAssigneeUpsertWithWhereUniqueWithoutUserInput = {
    where: CardAssigneeWhereUniqueInput
    update: XOR<CardAssigneeUpdateWithoutUserInput, CardAssigneeUncheckedUpdateWithoutUserInput>
    create: XOR<CardAssigneeCreateWithoutUserInput, CardAssigneeUncheckedCreateWithoutUserInput>
  }

  export type CardAssigneeUpdateWithWhereUniqueWithoutUserInput = {
    where: CardAssigneeWhereUniqueInput
    data: XOR<CardAssigneeUpdateWithoutUserInput, CardAssigneeUncheckedUpdateWithoutUserInput>
  }

  export type CardAssigneeUpdateManyWithWhereWithoutUserInput = {
    where: CardAssigneeScalarWhereInput
    data: XOR<CardAssigneeUpdateManyMutationInput, CardAssigneeUncheckedUpdateManyWithoutUserInput>
  }

  export type CardWatcherUpsertWithWhereUniqueWithoutUserInput = {
    where: CardWatcherWhereUniqueInput
    update: XOR<CardWatcherUpdateWithoutUserInput, CardWatcherUncheckedUpdateWithoutUserInput>
    create: XOR<CardWatcherCreateWithoutUserInput, CardWatcherUncheckedCreateWithoutUserInput>
  }

  export type CardWatcherUpdateWithWhereUniqueWithoutUserInput = {
    where: CardWatcherWhereUniqueInput
    data: XOR<CardWatcherUpdateWithoutUserInput, CardWatcherUncheckedUpdateWithoutUserInput>
  }

  export type CardWatcherUpdateManyWithWhereWithoutUserInput = {
    where: CardWatcherScalarWhereInput
    data: XOR<CardWatcherUpdateManyMutationInput, CardWatcherUncheckedUpdateManyWithoutUserInput>
  }

  export type CardUpsertWithWhereUniqueWithoutCreatorInput = {
    where: CardWhereUniqueInput
    update: XOR<CardUpdateWithoutCreatorInput, CardUncheckedUpdateWithoutCreatorInput>
    create: XOR<CardCreateWithoutCreatorInput, CardUncheckedCreateWithoutCreatorInput>
  }

  export type CardUpdateWithWhereUniqueWithoutCreatorInput = {
    where: CardWhereUniqueInput
    data: XOR<CardUpdateWithoutCreatorInput, CardUncheckedUpdateWithoutCreatorInput>
  }

  export type CardUpdateManyWithWhereWithoutCreatorInput = {
    where: CardScalarWhereInput
    data: XOR<CardUpdateManyMutationInput, CardUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ChecklistItemAssigneeUpsertWithWhereUniqueWithoutUserInput = {
    where: ChecklistItemAssigneeWhereUniqueInput
    update: XOR<ChecklistItemAssigneeUpdateWithoutUserInput, ChecklistItemAssigneeUncheckedUpdateWithoutUserInput>
    create: XOR<ChecklistItemAssigneeCreateWithoutUserInput, ChecklistItemAssigneeUncheckedCreateWithoutUserInput>
  }

  export type ChecklistItemAssigneeUpdateWithWhereUniqueWithoutUserInput = {
    where: ChecklistItemAssigneeWhereUniqueInput
    data: XOR<ChecklistItemAssigneeUpdateWithoutUserInput, ChecklistItemAssigneeUncheckedUpdateWithoutUserInput>
  }

  export type ChecklistItemAssigneeUpdateManyWithWhereWithoutUserInput = {
    where: ChecklistItemAssigneeScalarWhereInput
    data: XOR<ChecklistItemAssigneeUpdateManyMutationInput, ChecklistItemAssigneeUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type ListWatcherUpsertWithWhereUniqueWithoutUserInput = {
    where: ListWatcherWhereUniqueInput
    update: XOR<ListWatcherUpdateWithoutUserInput, ListWatcherUncheckedUpdateWithoutUserInput>
    create: XOR<ListWatcherCreateWithoutUserInput, ListWatcherUncheckedCreateWithoutUserInput>
  }

  export type ListWatcherUpdateWithWhereUniqueWithoutUserInput = {
    where: ListWatcherWhereUniqueInput
    data: XOR<ListWatcherUpdateWithoutUserInput, ListWatcherUncheckedUpdateWithoutUserInput>
  }

  export type ListWatcherUpdateManyWithWhereWithoutUserInput = {
    where: ListWatcherScalarWhereInput
    data: XOR<ListWatcherUpdateManyMutationInput, ListWatcherUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkspaceMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: WorkspaceMemberWhereUniqueInput
    update: XOR<WorkspaceMemberUpdateWithoutUserInput, WorkspaceMemberUncheckedUpdateWithoutUserInput>
    create: XOR<WorkspaceMemberCreateWithoutUserInput, WorkspaceMemberUncheckedCreateWithoutUserInput>
  }

  export type WorkspaceMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: WorkspaceMemberWhereUniqueInput
    data: XOR<WorkspaceMemberUpdateWithoutUserInput, WorkspaceMemberUncheckedUpdateWithoutUserInput>
  }

  export type WorkspaceMemberUpdateManyWithWhereWithoutUserInput = {
    where: WorkspaceMemberScalarWhereInput
    data: XOR<WorkspaceMemberUpdateManyMutationInput, WorkspaceMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type WorkspaceMemberScalarWhereInput = {
    AND?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
    OR?: WorkspaceMemberScalarWhereInput[]
    NOT?: WorkspaceMemberScalarWhereInput | WorkspaceMemberScalarWhereInput[]
    workspaceId?: UuidFilter<"WorkspaceMember"> | string
    userId?: UuidFilter<"WorkspaceMember"> | string
    role?: EnumWorkspaceRoleFilter<"WorkspaceMember"> | $Enums.WorkspaceRole
    joinedAt?: DateTimeFilter<"WorkspaceMember"> | Date | string
  }

  export type WorkspaceUpsertWithWhereUniqueWithoutCreatorInput = {
    where: WorkspaceWhereUniqueInput
    update: XOR<WorkspaceUpdateWithoutCreatorInput, WorkspaceUncheckedUpdateWithoutCreatorInput>
    create: XOR<WorkspaceCreateWithoutCreatorInput, WorkspaceUncheckedCreateWithoutCreatorInput>
  }

  export type WorkspaceUpdateWithWhereUniqueWithoutCreatorInput = {
    where: WorkspaceWhereUniqueInput
    data: XOR<WorkspaceUpdateWithoutCreatorInput, WorkspaceUncheckedUpdateWithoutCreatorInput>
  }

  export type WorkspaceUpdateManyWithWhereWithoutCreatorInput = {
    where: WorkspaceScalarWhereInput
    data: XOR<WorkspaceUpdateManyMutationInput, WorkspaceUncheckedUpdateManyWithoutCreatorInput>
  }

  export type WorkspaceScalarWhereInput = {
    AND?: WorkspaceScalarWhereInput | WorkspaceScalarWhereInput[]
    OR?: WorkspaceScalarWhereInput[]
    NOT?: WorkspaceScalarWhereInput | WorkspaceScalarWhereInput[]
    id?: UuidFilter<"Workspace"> | string
    name?: StringFilter<"Workspace"> | string
    description?: StringNullableFilter<"Workspace"> | string | null
    visibility?: EnumWorkspaceVisibilityFilter<"Workspace"> | $Enums.WorkspaceVisibility
    premium?: BoolFilter<"Workspace"> | boolean
    createdAt?: DateTimeFilter<"Workspace"> | Date | string
    updatedAt?: DateTimeFilter<"Workspace"> | Date | string
    type?: EnumWorkspaceTypeFilter<"Workspace"> | $Enums.WorkspaceType
    createdBy?: UuidFilter<"Workspace"> | string
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFilter<"Workspace"> | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFilter<"Workspace"> | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFilter<"Workspace"> | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFilter<"Workspace"> | $Enums.SlackSharing
  }

  export type UserCreateWithoutWorkspaceMembersInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutWorkspaceMembersInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaces?: WorkspaceUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutWorkspaceMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkspaceMembersInput, UserUncheckedCreateWithoutWorkspaceMembersInput>
  }

  export type WorkspaceCreateWithoutWorkspaceMembersInput = {
    id?: string
    name: string
    description?: string | null
    visibility?: $Enums.WorkspaceVisibility
    premium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.WorkspaceType
    workspaceMembershipRestrictions?: $Enums.MembershipRestrictions
    publicBoardCreation?: $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: $Enums.BoardCreationRestrictions
    privateBoardCreation?: $Enums.BoardCreationRestrictions
    publicBoardDeletion?: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: $Enums.BoardCreationRestrictions
    privateBoardDeletion?: $Enums.BoardCreationRestrictions
    allowGuestSharing?: $Enums.BoardSharing
    allowSlackIntegration?: $Enums.SlackSharing
    boards?: BoardCreateNestedManyWithoutWorkspaceInput
    creator: UserCreateNestedOneWithoutWorkspacesInput
  }

  export type WorkspaceUncheckedCreateWithoutWorkspaceMembersInput = {
    id?: string
    name: string
    description?: string | null
    visibility?: $Enums.WorkspaceVisibility
    premium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.WorkspaceType
    createdBy: string
    workspaceMembershipRestrictions?: $Enums.MembershipRestrictions
    publicBoardCreation?: $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: $Enums.BoardCreationRestrictions
    privateBoardCreation?: $Enums.BoardCreationRestrictions
    publicBoardDeletion?: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: $Enums.BoardCreationRestrictions
    privateBoardDeletion?: $Enums.BoardCreationRestrictions
    allowGuestSharing?: $Enums.BoardSharing
    allowSlackIntegration?: $Enums.SlackSharing
    boards?: BoardUncheckedCreateNestedManyWithoutWorkspaceInput
  }

  export type WorkspaceCreateOrConnectWithoutWorkspaceMembersInput = {
    where: WorkspaceWhereUniqueInput
    create: XOR<WorkspaceCreateWithoutWorkspaceMembersInput, WorkspaceUncheckedCreateWithoutWorkspaceMembersInput>
  }

  export type UserUpsertWithoutWorkspaceMembersInput = {
    update: XOR<UserUpdateWithoutWorkspaceMembersInput, UserUncheckedUpdateWithoutWorkspaceMembersInput>
    create: XOR<UserCreateWithoutWorkspaceMembersInput, UserUncheckedCreateWithoutWorkspaceMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkspaceMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkspaceMembersInput, UserUncheckedUpdateWithoutWorkspaceMembersInput>
  }

  export type UserUpdateWithoutWorkspaceMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkspaceMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaces?: WorkspaceUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type WorkspaceUpsertWithoutWorkspaceMembersInput = {
    update: XOR<WorkspaceUpdateWithoutWorkspaceMembersInput, WorkspaceUncheckedUpdateWithoutWorkspaceMembersInput>
    create: XOR<WorkspaceCreateWithoutWorkspaceMembersInput, WorkspaceUncheckedCreateWithoutWorkspaceMembersInput>
    where?: WorkspaceWhereInput
  }

  export type WorkspaceUpdateToOneWithWhereWithoutWorkspaceMembersInput = {
    where?: WorkspaceWhereInput
    data: XOR<WorkspaceUpdateWithoutWorkspaceMembersInput, WorkspaceUncheckedUpdateWithoutWorkspaceMembersInput>
  }

  export type WorkspaceUpdateWithoutWorkspaceMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
    boards?: BoardUpdateManyWithoutWorkspaceNestedInput
    creator?: UserUpdateOneRequiredWithoutWorkspacesNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutWorkspaceMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    createdBy?: StringFieldUpdateOperationsInput | string
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
    boards?: BoardUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type BoardCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    description?: string | null
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogCreateNestedManyWithoutBoardInput
    boardMembers?: BoardMemberCreateNestedManyWithoutBoardInput
    creator: UserCreateNestedOneWithoutBoardsInput
    labels?: LabelCreateNestedManyWithoutBoardInput
    lists?: ListCreateNestedManyWithoutBoardInput
  }

  export type BoardUncheckedCreateWithoutWorkspaceInput = {
    id?: string
    name: string
    description?: string | null
    createdBy: string
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutBoardInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutBoardInput
    labels?: LabelUncheckedCreateNestedManyWithoutBoardInput
    lists?: ListUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardCreateOrConnectWithoutWorkspaceInput = {
    where: BoardWhereUniqueInput
    create: XOR<BoardCreateWithoutWorkspaceInput, BoardUncheckedCreateWithoutWorkspaceInput>
  }

  export type BoardCreateManyWorkspaceInputEnvelope = {
    data: BoardCreateManyWorkspaceInput | BoardCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type WorkspaceMemberCreateWithoutWorkspaceInput = {
    role?: $Enums.WorkspaceRole
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutWorkspaceMembersInput
  }

  export type WorkspaceMemberUncheckedCreateWithoutWorkspaceInput = {
    userId: string
    role?: $Enums.WorkspaceRole
    joinedAt?: Date | string
  }

  export type WorkspaceMemberCreateOrConnectWithoutWorkspaceInput = {
    where: WorkspaceMemberWhereUniqueInput
    create: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceMemberCreateManyWorkspaceInputEnvelope = {
    data: WorkspaceMemberCreateManyWorkspaceInput | WorkspaceMemberCreateManyWorkspaceInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutWorkspacesInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogCreateNestedManyWithoutUserInput
    attachments?: AttachmentCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberCreateNestedManyWithoutUserInput
    boards?: BoardCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherCreateNestedManyWithoutUserInput
    cards?: CardCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWorkspacesInput = {
    id?: string
    clerkId: string
    email: string
    username?: string | null
    fullName: string
    avatarUrl: string
    theme?: $Enums.Theme
    recentlyViewedBoards?: UserCreaterecentlyViewedBoardsInput | string[]
    emailNotification?: boolean
    pushNotification?: boolean
    createdAt?: Date | string
    bio?: string | null
    activityLogs?: ActivityLogUncheckedCreateNestedManyWithoutUserInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutUserInput
    boardMembers?: BoardMemberUncheckedCreateNestedManyWithoutUserInput
    boards?: BoardUncheckedCreateNestedManyWithoutCreatorInput
    cardAssignees?: CardAssigneeUncheckedCreateNestedManyWithoutUserInput
    cardWatchers?: CardWatcherUncheckedCreateNestedManyWithoutUserInput
    cards?: CardUncheckedCreateNestedManyWithoutCreatorInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    listWatchers?: ListWatcherUncheckedCreateNestedManyWithoutUserInput
    workspaceMembers?: WorkspaceMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWorkspacesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWorkspacesInput, UserUncheckedCreateWithoutWorkspacesInput>
  }

  export type BoardUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: BoardWhereUniqueInput
    update: XOR<BoardUpdateWithoutWorkspaceInput, BoardUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<BoardCreateWithoutWorkspaceInput, BoardUncheckedCreateWithoutWorkspaceInput>
  }

  export type BoardUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: BoardWhereUniqueInput
    data: XOR<BoardUpdateWithoutWorkspaceInput, BoardUncheckedUpdateWithoutWorkspaceInput>
  }

  export type BoardUpdateManyWithWhereWithoutWorkspaceInput = {
    where: BoardScalarWhereInput
    data: XOR<BoardUpdateManyMutationInput, BoardUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type WorkspaceMemberUpsertWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceMemberWhereUniqueInput
    update: XOR<WorkspaceMemberUpdateWithoutWorkspaceInput, WorkspaceMemberUncheckedUpdateWithoutWorkspaceInput>
    create: XOR<WorkspaceMemberCreateWithoutWorkspaceInput, WorkspaceMemberUncheckedCreateWithoutWorkspaceInput>
  }

  export type WorkspaceMemberUpdateWithWhereUniqueWithoutWorkspaceInput = {
    where: WorkspaceMemberWhereUniqueInput
    data: XOR<WorkspaceMemberUpdateWithoutWorkspaceInput, WorkspaceMemberUncheckedUpdateWithoutWorkspaceInput>
  }

  export type WorkspaceMemberUpdateManyWithWhereWithoutWorkspaceInput = {
    where: WorkspaceMemberScalarWhereInput
    data: XOR<WorkspaceMemberUpdateManyMutationInput, WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceInput>
  }

  export type UserUpsertWithoutWorkspacesInput = {
    update: XOR<UserUpdateWithoutWorkspacesInput, UserUncheckedUpdateWithoutWorkspacesInput>
    create: XOR<UserCreateWithoutWorkspacesInput, UserUncheckedCreateWithoutWorkspacesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWorkspacesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWorkspacesInput, UserUncheckedUpdateWithoutWorkspacesInput>
  }

  export type UserUpdateWithoutWorkspacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutUserNestedInput
    boards?: BoardUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUpdateManyWithoutUserNestedInput
    cards?: CardUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWorkspacesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clerkId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: StringFieldUpdateOperationsInput | string
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    recentlyViewedBoards?: UserUpdaterecentlyViewedBoardsInput | string[]
    emailNotification?: BoolFieldUpdateOperationsInput | boolean
    pushNotification?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutUserNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutUserNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutUserNestedInput
    boards?: BoardUncheckedUpdateManyWithoutCreatorNestedInput
    cardAssignees?: CardAssigneeUncheckedUpdateManyWithoutUserNestedInput
    cardWatchers?: CardWatcherUncheckedUpdateManyWithoutUserNestedInput
    cards?: CardUncheckedUpdateManyWithoutCreatorNestedInput
    checklistItemAssignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    listWatchers?: ListWatcherUncheckedUpdateManyWithoutUserNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityLogCreateManyBoardInput = {
    id?: string
    cardId?: string | null
    userId?: string | null
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BoardMemberCreateManyBoardInput = {
    userId: string
    role?: $Enums.BoardRole
    joinedAt?: Date | string
  }

  export type LabelCreateManyBoardInput = {
    id?: string
    name?: string | null
    color: $Enums.Color
  }

  export type ListCreateManyBoardInput = {
    id?: string
    name: string
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    subscribed?: boolean
  }

  export type ActivityLogUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneWithoutActivityLogsNestedInput
    user?: UserUpdateOneWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateManyWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardMemberUpdateWithoutBoardInput = {
    role?: EnumBoardRoleFieldUpdateOperationsInput | $Enums.BoardRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBoardMembersNestedInput
  }

  export type BoardMemberUncheckedUpdateWithoutBoardInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumBoardRoleFieldUpdateOperationsInput | $Enums.BoardRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardMemberUncheckedUpdateManyWithoutBoardInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumBoardRoleFieldUpdateOperationsInput | $Enums.BoardRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabelUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: EnumColorFieldUpdateOperationsInput | $Enums.Color
    cardLabels?: CardLabelUpdateManyWithoutLabelNestedInput
  }

  export type LabelUncheckedUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: EnumColorFieldUpdateOperationsInput | $Enums.Color
    cardLabels?: CardLabelUncheckedUpdateManyWithoutLabelNestedInput
  }

  export type LabelUncheckedUpdateManyWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    color?: EnumColorFieldUpdateOperationsInput | $Enums.Color
  }

  export type ListUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUpdateManyWithoutListNestedInput
    watchers?: ListWatcherUpdateManyWithoutListNestedInput
  }

  export type ListUncheckedUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
    cards?: CardUncheckedUpdateManyWithoutListNestedInput
    watchers?: ListWatcherUncheckedUpdateManyWithoutListNestedInput
  }

  export type ListUncheckedUpdateManyWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    subscribed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityLogCreateManyCardInput = {
    id?: string
    boardId: string
    userId?: string | null
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttachmentCreateManyCardInput = {
    id?: string
    userId: string
    url: string
    filename: string
    bytes?: bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CardAssigneeCreateManyCardInput = {
    userId: string
  }

  export type CardLabelCreateManyCardInput = {
    labelId: string
  }

  export type CardWatcherCreateManyCardInput = {
    userId: string
    createdAt?: Date | string
  }

  export type ChecklistCreateManyCardInput = {
    id?: string
    title: string
    position?: Decimal | DecimalJsLike | number | string
  }

  export type CommentCreateManyCardInput = {
    id?: string
    userId: string
    text: string
    createdAt?: Date | string
  }

  export type ActivityLogUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    board?: BoardUpdateOneRequiredWithoutActivityLogsNestedInput
    user?: UserUpdateOneWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    bytes?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    bytes?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    bytes?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardAssigneeUpdateWithoutCardInput = {
    user?: UserUpdateOneRequiredWithoutCardAssigneesNestedInput
  }

  export type CardAssigneeUncheckedUpdateWithoutCardInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CardAssigneeUncheckedUpdateManyWithoutCardInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CardLabelUpdateWithoutCardInput = {
    label?: LabelUpdateOneRequiredWithoutCardLabelsNestedInput
  }

  export type CardLabelUncheckedUpdateWithoutCardInput = {
    labelId?: StringFieldUpdateOperationsInput | string
  }

  export type CardLabelUncheckedUpdateManyWithoutCardInput = {
    labelId?: StringFieldUpdateOperationsInput | string
  }

  export type CardWatcherUpdateWithoutCardInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCardWatchersNestedInput
  }

  export type CardWatcherUncheckedUpdateWithoutCardInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardWatcherUncheckedUpdateManyWithoutCardInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChecklistUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    items?: ChecklistItemUpdateManyWithoutChecklistNestedInput
  }

  export type ChecklistUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    items?: ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInput
  }

  export type ChecklistUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type CommentUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChecklistItemAssigneeCreateManyItemInput = {
    userId: string
  }

  export type ChecklistItemAssigneeUpdateWithoutItemInput = {
    user?: UserUpdateOneRequiredWithoutChecklistItemAssigneesNestedInput
  }

  export type ChecklistItemAssigneeUncheckedUpdateWithoutItemInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ChecklistItemAssigneeUncheckedUpdateManyWithoutItemInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ChecklistItemCreateManyChecklistInput = {
    id?: string
    text: string
    isCompleted?: boolean
    dueDate?: Date | string | null
    position?: Decimal | DecimalJsLike | number | string
  }

  export type ChecklistItemUpdateWithoutChecklistInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    assignees?: ChecklistItemAssigneeUpdateManyWithoutItemNestedInput
  }

  export type ChecklistItemUncheckedUpdateWithoutChecklistInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    assignees?: ChecklistItemAssigneeUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ChecklistItemUncheckedUpdateManyWithoutChecklistInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type CardLabelCreateManyLabelInput = {
    cardId: string
  }

  export type CardLabelUpdateWithoutLabelInput = {
    card?: CardUpdateOneRequiredWithoutCardLabelsNestedInput
  }

  export type CardLabelUncheckedUpdateWithoutLabelInput = {
    cardId?: StringFieldUpdateOperationsInput | string
  }

  export type CardLabelUncheckedUpdateManyWithoutLabelInput = {
    cardId?: StringFieldUpdateOperationsInput | string
  }

  export type CardCreateManyListInput = {
    id?: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    createdBy: string
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ListWatcherCreateManyListInput = {
    userId: string
    createdAt?: Date | string
  }

  export type CardUpdateWithoutListInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUpdateManyWithoutCardNestedInput
    creator?: UserUpdateOneRequiredWithoutCardsNestedInput
    checklists?: ChecklistUpdateManyWithoutCardNestedInput
    comments?: CommentUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutListInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUncheckedUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUncheckedUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUncheckedUpdateManyWithoutCardNestedInput
    checklists?: ChecklistUncheckedUpdateManyWithoutCardNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateManyWithoutListInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListWatcherUpdateWithoutListInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutListWatchersNestedInput
  }

  export type ListWatcherUncheckedUpdateWithoutListInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListWatcherUncheckedUpdateManyWithoutListInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogCreateManyUserInput = {
    id?: string
    boardId: string
    cardId?: string | null
    action: $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AttachmentCreateManyUserInput = {
    id?: string
    cardId: string
    url: string
    filename: string
    bytes?: bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type BoardMemberCreateManyUserInput = {
    boardId: string
    role?: $Enums.BoardRole
    joinedAt?: Date | string
  }

  export type BoardCreateManyCreatorInput = {
    id?: string
    workspaceId: string
    name: string
    description?: string | null
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
  }

  export type CardAssigneeCreateManyUserInput = {
    cardId: string
  }

  export type CardWatcherCreateManyUserInput = {
    cardId: string
    createdAt?: Date | string
  }

  export type CardCreateManyCreatorInput = {
    id?: string
    listId: string
    title: string
    description?: string | null
    dueDate?: Date | string | null
    startDate?: Date | string | null
    position: Decimal | DecimalJsLike | number | string
    isArchived?: boolean
    coverImageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChecklistItemAssigneeCreateManyUserInput = {
    itemId: string
  }

  export type CommentCreateManyUserInput = {
    id?: string
    cardId: string
    text: string
    createdAt?: Date | string
  }

  export type ListWatcherCreateManyUserInput = {
    listId: string
    createdAt?: Date | string
  }

  export type WorkspaceMemberCreateManyUserInput = {
    workspaceId: string
    role?: $Enums.WorkspaceRole
    joinedAt?: Date | string
  }

  export type WorkspaceCreateManyCreatorInput = {
    id?: string
    name: string
    description?: string | null
    visibility?: $Enums.WorkspaceVisibility
    premium?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    type: $Enums.WorkspaceType
    workspaceMembershipRestrictions?: $Enums.MembershipRestrictions
    publicBoardCreation?: $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: $Enums.BoardCreationRestrictions
    privateBoardCreation?: $Enums.BoardCreationRestrictions
    publicBoardDeletion?: $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: $Enums.BoardCreationRestrictions
    privateBoardDeletion?: $Enums.BoardCreationRestrictions
    allowGuestSharing?: $Enums.BoardSharing
    allowSlackIntegration?: $Enums.SlackSharing
  }

  export type ActivityLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    board?: BoardUpdateOneRequiredWithoutActivityLogsNestedInput
    card?: CardUpdateOneWithoutActivityLogsNestedInput
  }

  export type ActivityLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    cardId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: EnumActivityActionFieldUpdateOperationsInput | $Enums.ActivityAction
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    bytes?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    bytes?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttachmentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    bytes?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    meta?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardMemberUpdateWithoutUserInput = {
    role?: EnumBoardRoleFieldUpdateOperationsInput | $Enums.BoardRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    board?: BoardUpdateOneRequiredWithoutBoardMembersNestedInput
  }

  export type BoardMemberUncheckedUpdateWithoutUserInput = {
    boardId?: StringFieldUpdateOperationsInput | string
    role?: EnumBoardRoleFieldUpdateOperationsInput | $Enums.BoardRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardMemberUncheckedUpdateManyWithoutUserInput = {
    boardId?: StringFieldUpdateOperationsInput | string
    role?: EnumBoardRoleFieldUpdateOperationsInput | $Enums.BoardRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUpdateManyWithoutBoardNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutBoardNestedInput
    workspace?: WorkspaceUpdateOneRequiredWithoutBoardsNestedInput
    labels?: LabelUpdateManyWithoutBoardNestedInput
    lists?: ListUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutBoardNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutBoardNestedInput
    labels?: LabelUncheckedUpdateManyWithoutBoardNestedInput
    lists?: ListUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    workspaceId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
  }

  export type CardAssigneeUpdateWithoutUserInput = {
    card?: CardUpdateOneRequiredWithoutAssigneesNestedInput
  }

  export type CardAssigneeUncheckedUpdateWithoutUserInput = {
    cardId?: StringFieldUpdateOperationsInput | string
  }

  export type CardAssigneeUncheckedUpdateManyWithoutUserInput = {
    cardId?: StringFieldUpdateOperationsInput | string
  }

  export type CardWatcherUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutWatchersNestedInput
  }

  export type CardWatcherUncheckedUpdateWithoutUserInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardWatcherUncheckedUpdateManyWithoutUserInput = {
    cardId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CardUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUpdateManyWithoutCardNestedInput
    list?: ListUpdateOneRequiredWithoutCardsNestedInput
    checklists?: ChecklistUpdateManyWithoutCardNestedInput
    comments?: CommentUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutCardNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutCardNestedInput
    assignees?: CardAssigneeUncheckedUpdateManyWithoutCardNestedInput
    cardLabels?: CardLabelUncheckedUpdateManyWithoutCardNestedInput
    watchers?: CardWatcherUncheckedUpdateManyWithoutCardNestedInput
    checklists?: ChecklistUncheckedUpdateManyWithoutCardNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCardNestedInput
  }

  export type CardUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    listId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    position?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    coverImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChecklistItemAssigneeUpdateWithoutUserInput = {
    item?: ChecklistItemUpdateOneRequiredWithoutAssigneesNestedInput
  }

  export type ChecklistItemAssigneeUncheckedUpdateWithoutUserInput = {
    itemId?: StringFieldUpdateOperationsInput | string
  }

  export type ChecklistItemAssigneeUncheckedUpdateManyWithoutUserInput = {
    itemId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    card?: CardUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListWatcherUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    list?: ListUpdateOneRequiredWithoutWatchersNestedInput
  }

  export type ListWatcherUncheckedUpdateWithoutUserInput = {
    listId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListWatcherUncheckedUpdateManyWithoutUserInput = {
    listId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberUpdateWithoutUserInput = {
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workspace?: WorkspaceUpdateOneRequiredWithoutWorkspaceMembersNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateWithoutUserInput = {
    workspaceId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutUserInput = {
    workspaceId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
    boards?: BoardUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
    boards?: BoardUncheckedUpdateManyWithoutWorkspaceNestedInput
    workspaceMembers?: WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceNestedInput
  }

  export type WorkspaceUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    visibility?: EnumWorkspaceVisibilityFieldUpdateOperationsInput | $Enums.WorkspaceVisibility
    premium?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumWorkspaceTypeFieldUpdateOperationsInput | $Enums.WorkspaceType
    workspaceMembershipRestrictions?: EnumMembershipRestrictionsFieldUpdateOperationsInput | $Enums.MembershipRestrictions
    publicBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardCreation?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    publicBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    workspaceBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    privateBoardDeletion?: EnumBoardCreationRestrictionsFieldUpdateOperationsInput | $Enums.BoardCreationRestrictions
    allowGuestSharing?: EnumBoardSharingFieldUpdateOperationsInput | $Enums.BoardSharing
    allowSlackIntegration?: EnumSlackSharingFieldUpdateOperationsInput | $Enums.SlackSharing
  }

  export type BoardCreateManyWorkspaceInput = {
    id?: string
    name: string
    description?: string | null
    createdBy: string
    allowCovers?: boolean
    showComplete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastActivityAt?: Date | string | null
    background: $Enums.BoardBackground
    visibility?: $Enums.BoardVisibility
    memberManage?: $Enums.MemberManageRestrictions
    commenting?: $Enums.CommentingRestrictions
  }

  export type WorkspaceMemberCreateManyWorkspaceInput = {
    userId: string
    role?: $Enums.WorkspaceRole
    joinedAt?: Date | string
  }

  export type BoardUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUpdateManyWithoutBoardNestedInput
    boardMembers?: BoardMemberUpdateManyWithoutBoardNestedInput
    creator?: UserUpdateOneRequiredWithoutBoardsNestedInput
    labels?: LabelUpdateManyWithoutBoardNestedInput
    lists?: ListUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
    activityLogs?: ActivityLogUncheckedUpdateManyWithoutBoardNestedInput
    boardMembers?: BoardMemberUncheckedUpdateManyWithoutBoardNestedInput
    labels?: LabelUncheckedUpdateManyWithoutBoardNestedInput
    lists?: ListUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type BoardUncheckedUpdateManyWithoutWorkspaceInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    allowCovers?: BoolFieldUpdateOperationsInput | boolean
    showComplete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivityAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    background?: EnumBoardBackgroundFieldUpdateOperationsInput | $Enums.BoardBackground
    visibility?: EnumBoardVisibilityFieldUpdateOperationsInput | $Enums.BoardVisibility
    memberManage?: EnumMemberManageRestrictionsFieldUpdateOperationsInput | $Enums.MemberManageRestrictions
    commenting?: EnumCommentingRestrictionsFieldUpdateOperationsInput | $Enums.CommentingRestrictions
  }

  export type WorkspaceMemberUpdateWithoutWorkspaceInput = {
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWorkspaceMembersNestedInput
  }

  export type WorkspaceMemberUncheckedUpdateWithoutWorkspaceInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkspaceMemberUncheckedUpdateManyWithoutWorkspaceInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumWorkspaceRoleFieldUpdateOperationsInput | $Enums.WorkspaceRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}