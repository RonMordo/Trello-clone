
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  cardId: 'cardId',
  userId: 'userId',
  action: 'action',
  payload: 'payload',
  createdAt: 'createdAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  userId: 'userId',
  url: 'url',
  filename: 'filename',
  bytes: 'bytes',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.BoardMemberScalarFieldEnum = {
  boardId: 'boardId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.BoardScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  description: 'description',
  createdBy: 'createdBy',
  allowCovers: 'allowCovers',
  showComplete: 'showComplete',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActivityAt: 'lastActivityAt',
  background: 'background',
  visibility: 'visibility',
  memberManage: 'memberManage',
  commenting: 'commenting'
};

exports.Prisma.CardAssigneeScalarFieldEnum = {
  cardId: 'cardId',
  userId: 'userId'
};

exports.Prisma.CardLabelScalarFieldEnum = {
  cardId: 'cardId',
  labelId: 'labelId'
};

exports.Prisma.CardWatcherScalarFieldEnum = {
  cardId: 'cardId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.CardScalarFieldEnum = {
  id: 'id',
  listId: 'listId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  startDate: 'startDate',
  position: 'position',
  isArchived: 'isArchived',
  createdBy: 'createdBy',
  coverImageUrl: 'coverImageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChecklistItemAssigneeScalarFieldEnum = {
  itemId: 'itemId',
  userId: 'userId'
};

exports.Prisma.ChecklistItemScalarFieldEnum = {
  id: 'id',
  checklistId: 'checklistId',
  text: 'text',
  isCompleted: 'isCompleted',
  dueDate: 'dueDate',
  position: 'position'
};

exports.Prisma.ChecklistScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  title: 'title',
  position: 'position'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  userId: 'userId',
  text: 'text',
  createdAt: 'createdAt'
};

exports.Prisma.LabelScalarFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  name: 'name',
  color: 'color'
};

exports.Prisma.ListWatcherScalarFieldEnum = {
  listId: 'listId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.ListScalarFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  name: 'name',
  position: 'position',
  isArchived: 'isArchived',
  subscribed: 'subscribed'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clerkId: 'clerkId',
  email: 'email',
  username: 'username',
  fullName: 'fullName',
  avatarUrl: 'avatarUrl',
  theme: 'theme',
  recentlyViewedBoards: 'recentlyViewedBoards',
  emailNotification: 'emailNotification',
  pushNotification: 'pushNotification',
  createdAt: 'createdAt',
  bio: 'bio'
};

exports.Prisma.WorkspaceMemberScalarFieldEnum = {
  workspaceId: 'workspaceId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.WorkspaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  visibility: 'visibility',
  premium: 'premium',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type',
  createdBy: 'createdBy',
  workspaceMembershipRestrictions: 'workspaceMembershipRestrictions',
  publicBoardCreation: 'publicBoardCreation',
  workspaceBoardCreation: 'workspaceBoardCreation',
  privateBoardCreation: 'privateBoardCreation',
  publicBoardDeletion: 'publicBoardDeletion',
  workspaceBoardDeletion: 'workspaceBoardDeletion',
  privateBoardDeletion: 'privateBoardDeletion',
  allowGuestSharing: 'allowGuestSharing',
  allowSlackIntegration: 'allowSlackIntegration'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ActivityAction = exports.$Enums.ActivityAction = {
  Created: 'Created',
  Moved: 'Moved',
  Updated: 'Updated',
  Commented: 'Commented',
  Closed: 'Closed',
  Reopened: 'Reopened',
  Assigned: 'Assigned',
  Unassigned: 'Unassigned',
  Labeled: 'Labeled',
  Unlabeled: 'Unlabeled',
  Attached: 'Attached',
  Detached: 'Detached'
};

exports.BoardRole = exports.$Enums.BoardRole = {
  Admin: 'Admin',
  Member: 'Member',
  Observer: 'Observer'
};

exports.BoardBackground = exports.$Enums.BoardBackground = {
  Mountain: 'Mountain',
  Valley: 'Valley',
  Tree: 'Tree',
  Snow: 'Snow'
};

exports.BoardVisibility = exports.$Enums.BoardVisibility = {
  Private: 'Private',
  WorkspaceMembers: 'WorkspaceMembers',
  Public: 'Public'
};

exports.MemberManageRestrictions = exports.$Enums.MemberManageRestrictions = {
  Admins: 'Admins',
  Members: 'Members'
};

exports.CommentingRestrictions = exports.$Enums.CommentingRestrictions = {
  Disabled: 'Disabled',
  BoardMembers: 'BoardMembers',
  WorkspaceMembers: 'WorkspaceMembers'
};

exports.Color = exports.$Enums.Color = {
  SubtleYellow: 'SubtleYellow',
  SubtleOrange: 'SubtleOrange',
  SubtleRed: 'SubtleRed',
  SubtlePurple: 'SubtlePurple',
  Green: 'Green',
  Yellow: 'Yellow',
  Orange: 'Orange',
  Red: 'Red',
  Purple: 'Purple',
  BoldGreen: 'BoldGreen',
  BoldYellow: 'BoldYellow',
  BoldOrange: 'BoldOrange',
  BoldRed: 'BoldRed',
  BoldPurple: 'BoldPurple',
  SubtleBlue: 'SubtleBlue',
  SubtleSky: 'SubtleSky',
  SubtleLime: 'SubtleLime',
  SubtlePink: 'SubtlePink',
  SubtleBlack: 'SubtleBlack',
  Blue: 'Blue',
  Sky: 'Sky',
  Lime: 'Lime',
  Pink: 'Pink',
  Black: 'Black',
  BoldBlue: 'BoldBlue',
  BoldSky: 'BoldSky',
  BoldLime: 'BoldLime',
  BoldPink: 'BoldPink',
  BoldBlack: 'BoldBlack',
  Default: 'Default'
};

exports.Theme = exports.$Enums.Theme = {
  Light: 'Light',
  Dark: 'Dark',
  System: 'System'
};

exports.WorkspaceRole = exports.$Enums.WorkspaceRole = {
  Admin: 'Admin',
  Member: 'Member',
  Guest: 'Guest'
};

exports.WorkspaceVisibility = exports.$Enums.WorkspaceVisibility = {
  Private: 'Private',
  Public: 'Public'
};

exports.WorkspaceType = exports.$Enums.WorkspaceType = {
  Marketing: 'Marketing',
  SalesCrm: 'SalesCrm',
  HumenResources: 'HumenResources',
  SmallBusiness: 'SmallBusiness',
  EngineeringIt: 'EngineeringIt',
  Education: 'Education',
  Operations: 'Operations',
  Other: 'Other'
};

exports.MembershipRestrictions = exports.$Enums.MembershipRestrictions = {
  Anybody: 'Anybody',
  SpecificDomain: 'SpecificDomain'
};

exports.BoardCreationRestrictions = exports.$Enums.BoardCreationRestrictions = {
  WorkspaceMember: 'WorkspaceMember',
  WorkspaceAdmin: 'WorkspaceAdmin',
  Nobody: 'Nobody'
};

exports.BoardSharing = exports.$Enums.BoardSharing = {
  Anybody: 'Anybody',
  OnlyWorkspaceMember: 'OnlyWorkspaceMember'
};

exports.SlackSharing = exports.$Enums.SlackSharing = {
  WorkspaceMember: 'WorkspaceMember',
  Admins: 'Admins'
};

exports.Prisma.ModelName = {
  ActivityLog: 'ActivityLog',
  Attachment: 'Attachment',
  BoardMember: 'BoardMember',
  Board: 'Board',
  CardAssignee: 'CardAssignee',
  CardLabel: 'CardLabel',
  CardWatcher: 'CardWatcher',
  Card: 'Card',
  ChecklistItemAssignee: 'ChecklistItemAssignee',
  ChecklistItem: 'ChecklistItem',
  Checklist: 'Checklist',
  Comment: 'Comment',
  Label: 'Label',
  ListWatcher: 'ListWatcher',
  List: 'List',
  User: 'User',
  WorkspaceMember: 'WorkspaceMember',
  Workspace: 'Workspace'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
