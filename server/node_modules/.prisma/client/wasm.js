
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  cardId: 'cardId',
  userId: 'userId',
  action: 'action',
  payload: 'payload',
  createdAt: 'createdAt'
};

exports.Prisma.AttachmentScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  userId: 'userId',
  url: 'url',
  filename: 'filename',
  bytes: 'bytes',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.BoardMemberScalarFieldEnum = {
  boardId: 'boardId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.BoardScalarFieldEnum = {
  id: 'id',
  workspaceId: 'workspaceId',
  name: 'name',
  description: 'description',
  createdBy: 'createdBy',
  allowCovers: 'allowCovers',
  showComplete: 'showComplete',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActivityAt: 'lastActivityAt',
  background: 'background',
  visibility: 'visibility',
  memberManage: 'memberManage',
  commenting: 'commenting'
};

exports.Prisma.CardAssigneeScalarFieldEnum = {
  cardId: 'cardId',
  userId: 'userId'
};

exports.Prisma.CardLabelScalarFieldEnum = {
  cardId: 'cardId',
  labelId: 'labelId'
};

exports.Prisma.CardWatcherScalarFieldEnum = {
  cardId: 'cardId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.CardScalarFieldEnum = {
  id: 'id',
  listId: 'listId',
  title: 'title',
  description: 'description',
  dueDate: 'dueDate',
  startDate: 'startDate',
  position: 'position',
  isArchived: 'isArchived',
  createdBy: 'createdBy',
  coverImageUrl: 'coverImageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChecklistItemAssigneeScalarFieldEnum = {
  itemId: 'itemId',
  userId: 'userId'
};

exports.Prisma.ChecklistItemScalarFieldEnum = {
  id: 'id',
  checklistId: 'checklistId',
  text: 'text',
  isCompleted: 'isCompleted',
  dueDate: 'dueDate',
  position: 'position'
};

exports.Prisma.ChecklistScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  title: 'title',
  position: 'position'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  cardId: 'cardId',
  userId: 'userId',
  text: 'text',
  createdAt: 'createdAt'
};

exports.Prisma.LabelScalarFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  name: 'name',
  color: 'color'
};

exports.Prisma.ListWatcherScalarFieldEnum = {
  listId: 'listId',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.ListScalarFieldEnum = {
  id: 'id',
  boardId: 'boardId',
  name: 'name',
  position: 'position',
  isArchived: 'isArchived',
  subscribed: 'subscribed'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  clerkId: 'clerkId',
  email: 'email',
  username: 'username',
  fullName: 'fullName',
  avatarUrl: 'avatarUrl',
  theme: 'theme',
  recentlyViewedBoards: 'recentlyViewedBoards',
  emailNotification: 'emailNotification',
  pushNotification: 'pushNotification',
  createdAt: 'createdAt',
  bio: 'bio'
};

exports.Prisma.WorkspaceMemberScalarFieldEnum = {
  workspaceId: 'workspaceId',
  userId: 'userId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.WorkspaceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  visibility: 'visibility',
  premium: 'premium',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type',
  createdBy: 'createdBy',
  workspaceMembershipRestrictions: 'workspaceMembershipRestrictions',
  publicBoardCreation: 'publicBoardCreation',
  workspaceBoardCreation: 'workspaceBoardCreation',
  privateBoardCreation: 'privateBoardCreation',
  publicBoardDeletion: 'publicBoardDeletion',
  workspaceBoardDeletion: 'workspaceBoardDeletion',
  privateBoardDeletion: 'privateBoardDeletion',
  allowGuestSharing: 'allowGuestSharing',
  allowSlackIntegration: 'allowSlackIntegration'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ActivityAction = exports.$Enums.ActivityAction = {
  Created: 'Created',
  Moved: 'Moved',
  Updated: 'Updated',
  Commented: 'Commented',
  Closed: 'Closed',
  Reopened: 'Reopened',
  Assigned: 'Assigned',
  Unassigned: 'Unassigned',
  Labeled: 'Labeled',
  Unlabeled: 'Unlabeled',
  Attached: 'Attached',
  Detached: 'Detached'
};

exports.Color = exports.$Enums.Color = {
  SubtleYellow: 'SubtleYellow',
  SubtleOrange: 'SubtleOrange',
  SubtleRed: 'SubtleRed',
  SubtlePurple: 'SubtlePurple',
  Green: 'Green',
  Yellow: 'Yellow',
  Orange: 'Orange',
  Red: 'Red',
  Purple: 'Purple',
  BoldGreen: 'BoldGreen',
  BoldYellow: 'BoldYellow',
  BoldOrange: 'BoldOrange',
  BoldRed: 'BoldRed',
  BoldPurple: 'BoldPurple',
  SubtleBlue: 'SubtleBlue',
  SubtleSky: 'SubtleSky',
  SubtleLime: 'SubtleLime',
  SubtlePink: 'SubtlePink',
  SubtleBlack: 'SubtleBlack',
  Blue: 'Blue',
  Sky: 'Sky',
  Lime: 'Lime',
  Pink: 'Pink',
  Black: 'Black',
  BoldBlue: 'BoldBlue',
  BoldSky: 'BoldSky',
  BoldLime: 'BoldLime',
  BoldPink: 'BoldPink',
  BoldBlack: 'BoldBlack',
  Default: 'Default'
};

exports.BoardBackground = exports.$Enums.BoardBackground = {
  Mountain: 'Mountain',
  Valley: 'Valley',
  Tree: 'Tree',
  Snow: 'Snow'
};

exports.BoardCreationRestrictions = exports.$Enums.BoardCreationRestrictions = {
  WorkspaceMember: 'WorkspaceMember',
  WorkspaceAdmin: 'WorkspaceAdmin',
  Nobody: 'Nobody'
};

exports.BoardRole = exports.$Enums.BoardRole = {
  Admin: 'Admin',
  Member: 'Member',
  Observer: 'Observer'
};

exports.BoardSharing = exports.$Enums.BoardSharing = {
  Anybody: 'Anybody',
  OnlyWorkspaceMember: 'OnlyWorkspaceMember'
};

exports.BoardVisibility = exports.$Enums.BoardVisibility = {
  Private: 'Private',
  WorkspaceMembers: 'WorkspaceMembers',
  Public: 'Public'
};

exports.CommentingRestrictions = exports.$Enums.CommentingRestrictions = {
  Disabled: 'Disabled',
  BoardMembers: 'BoardMembers',
  WorkspaceMembers: 'WorkspaceMembers'
};

exports.MemberManageRestrictions = exports.$Enums.MemberManageRestrictions = {
  Admins: 'Admins',
  Members: 'Members'
};

exports.MembershipRestrictions = exports.$Enums.MembershipRestrictions = {
  Anybody: 'Anybody',
  SpecificDomain: 'SpecificDomain'
};

exports.SlackSharing = exports.$Enums.SlackSharing = {
  WorkspaceMember: 'WorkspaceMember',
  Admins: 'Admins'
};

exports.Theme = exports.$Enums.Theme = {
  Light: 'Light',
  Dark: 'Dark',
  System: 'System'
};

exports.WorkspaceRole = exports.$Enums.WorkspaceRole = {
  Admin: 'Admin',
  Member: 'Member',
  Guest: 'Guest'
};

exports.WorkspaceType = exports.$Enums.WorkspaceType = {
  Marketing: 'Marketing',
  SalesCrm: 'SalesCrm',
  HumenResources: 'HumenResources',
  SmallBusiness: 'SmallBusiness',
  EngineeringIt: 'EngineeringIt',
  Education: 'Education',
  Operations: 'Operations',
  Other: 'Other'
};

exports.WorkspaceVisibility = exports.$Enums.WorkspaceVisibility = {
  Private: 'Private',
  Public: 'Public'
};

exports.Prisma.ModelName = {
  ActivityLog: 'ActivityLog',
  Attachment: 'Attachment',
  BoardMember: 'BoardMember',
  Board: 'Board',
  CardAssignee: 'CardAssignee',
  CardLabel: 'CardLabel',
  CardWatcher: 'CardWatcher',
  Card: 'Card',
  ChecklistItemAssignee: 'ChecklistItemAssignee',
  ChecklistItem: 'ChecklistItem',
  Checklist: 'Checklist',
  Comment: 'Comment',
  Label: 'Label',
  ListWatcher: 'ListWatcher',
  List: 'List',
  User: 'User',
  WorkspaceMember: 'WorkspaceMember',
  Workspace: 'Workspace'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\tony_\\Desktop\\FullStack\\Trello-clone\\server\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\tony_\\Desktop\\FullStack\\Trello-clone\\server\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Enums\n\nenum ActivityAction {\n  Created    @map(\"created\")\n  Moved      @map(\"moved\")\n  Updated    @map(\"updated\")\n  Commented  @map(\"commented\")\n  Closed     @map(\"closed\")\n  Reopened   @map(\"reopened\")\n  Assigned   @map(\"assigned\")\n  Unassigned @map(\"unassigned\")\n  Labeled    @map(\"labeled\")\n  Unlabeled  @map(\"unlabeled\")\n  Attached   @map(\"attached\")\n  Detached   @map(\"detached\")\n\n  @@map(\"activity_action\")\n}\n\nenum Color {\n  SubtleYellow @map(\"subtle_yellow\")\n  SubtleOrange @map(\"subtle_orange\")\n  SubtleRed    @map(\"subtle_red\")\n  SubtlePurple @map(\"subtle_purple\")\n  Green        @map(\"green\")\n  Yellow       @map(\"yellow\")\n  Orange       @map(\"orange\")\n  Red          @map(\"red\")\n  Purple       @map(\"purple\")\n  BoldGreen    @map(\"bold_green\")\n  BoldYellow   @map(\"bold_yellow\")\n  BoldOrange   @map(\"bold_orange\")\n  BoldRed      @map(\"bold_red\")\n  BoldPurple   @map(\"bold_purple\")\n  SubtleBlue   @map(\"subtle_blue\")\n  SubtleSky    @map(\"subtle_sky\")\n  SubtleLime   @map(\"subtle_lime\")\n  SubtlePink   @map(\"subtle_pink\")\n  SubtleBlack  @map(\"subtle_black\")\n  Blue         @map(\"blue\")\n  Sky          @map(\"sky\")\n  Lime         @map(\"lime\")\n  Pink         @map(\"pink\")\n  Black        @map(\"black\")\n  BoldBlue     @map(\"bold_blue\")\n  BoldSky      @map(\"bold_sky\")\n  BoldLime     @map(\"bold_lime\")\n  BoldPink     @map(\"bold_pink\")\n  BoldBlack    @map(\"bold_black\")\n  Default      @map(\"default\")\n\n  @@map(\"color\")\n}\n\nenum BoardBackground {\n  Mountain @map(\"mountain\")\n  Valley   @map(\"valley\")\n  Tree     @map(\"tree\")\n  Snow     @map(\"snow\")\n\n  @@map(\"board_background\")\n}\n\nenum BoardCreationRestrictions {\n  WorkspaceMember @map(\"workspace_member\")\n  WorkspaceAdmin  @map(\"workspace_admin\")\n  Nobody          @map(\"nobody\")\n\n  @@map(\"board_creation_restrictions\")\n}\n\nenum BoardRole {\n  Admin    @map(\"admin\")\n  Member   @map(\"member\")\n  Observer @map(\"observer\")\n\n  @@map(\"board_role\")\n}\n\nenum BoardSharing {\n  Anybody             @map(\"anybody\")\n  OnlyWorkspaceMember @map(\"only_workspace_member\")\n\n  @@map(\"board_sharing\")\n}\n\nenum BoardVisibility {\n  Private          @map(\"private\")\n  WorkspaceMembers @map(\"workspace_members\")\n  Public           @map(\"public\")\n\n  @@map(\"board_visibility\")\n}\n\nenum CommentingRestrictions {\n  Disabled         @map(\"disabled\")\n  BoardMembers     @map(\"board_members\")\n  WorkspaceMembers @map(\"workspace_members\")\n\n  @@map(\"commenting_restrictions\")\n}\n\nenum MemberManageRestrictions {\n  Admins  @map(\"admins\")\n  Members @map(\"members\")\n\n  @@map(\"member_manage_restrictions\")\n}\n\nenum MembershipRestrictions {\n  Anybody        @map(\"anybody\")\n  SpecificDomain @map(\"specific_domain\")\n\n  @@map(\"membership_restrictions\")\n}\n\nenum SlackSharing {\n  WorkspaceMember @map(\"workspace_member\")\n  Admins          @map(\"admins\")\n\n  @@map(\"slack_sharing\")\n}\n\nenum Theme {\n  Light  @map(\"light\")\n  Dark   @map(\"dark\")\n  System @map(\"system\")\n\n  @@map(\"theme\")\n}\n\nenum WorkspaceRole {\n  Admin  @map(\"admin\")\n  Member @map(\"member\")\n  Guest  @map(\"guest\")\n\n  @@map(\"workspace_role\")\n}\n\nenum WorkspaceType {\n  Marketing      @map(\"marketing\")\n  SalesCrm       @map(\"sales_crm\")\n  HumenResources @map(\"humen_resources\")\n  SmallBusiness  @map(\"small_business\")\n  EngineeringIt  @map(\"engineering_it\")\n  Education      @map(\"education\")\n  Operations     @map(\"operations\")\n  Other          @map(\"other\")\n\n  @@map(\"workspace_type\")\n}\n\nenum WorkspaceVisibility {\n  Private @map(\"private\")\n  Public  @map(\"public\")\n\n  @@map(\"workspace_visibility\")\n}\n\n// Models\nmodel ActivityLog {\n\n  id        String         @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  boardId   String         @map(\"board_id\") @db.Uuid\n  cardId    String?        @map(\"card_id\") @db.Uuid\n  userId    String?        @map(\"user_id\") @db.Uuid\n  action    ActivityAction\n  payload   Json?\n  createdAt DateTime       @default(now()) @map(\"created_at\") @db.Timestamptz(6)\n\n  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  card  Card? @relation(fields: [cardId], references: [id], onUpdate: NoAction)\n  user  User? @relation(fields: [userId], references: [id], onUpdate: NoAction)\n\n  @@index([boardId, createdAt(sort: Desc)], map: \"activity_board_time_idx\")\n  @@index([cardId, createdAt(sort: Desc)], map: \"activity_card_time_idx\")\n  @@map(\"activity_log\")\n}\n\nmodel Attachment {\n\n  id        String   @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  cardId    String   @map(\"card_id\") @db.Uuid\n  userId    String   @map(\"user_id\") @db.Uuid\n  url       String\n  filename  String\n  bytes     BigInt?\n  meta      Json?\n  createdAt DateTime @default(now()) @map(\"created_at\") @db.Timestamptz(6)\n\n  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  user User @relation(fields: [userId], references: [id], onUpdate: NoAction)\n\n  @@index([cardId, createdAt(sort: Desc)], map: \"attachments_card_time_idx\")\n  @@map(\"attachments\")\n}\n\nmodel BoardMember {\n\n  boardId  String    @map(\"board_id\") @db.Uuid\n  userId   String    @map(\"user_id\") @db.Uuid\n  role     BoardRole @default(Member)\n  joinedAt DateTime  @default(now()) @map(\"joined_at\") @db.Timestamptz(6)\n\n  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@id([boardId, userId])\n  @@index([userId], map: \"board_members_user_idx\")\n  @@map(\"board_members\")\n}\n\nmodel Board {\n\n  id             String                   @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  workspaceId    String                   @map(\"workspace_id\") @db.Uuid\n  name           String\n  description    String?\n  createdBy      String                   @map(\"created_by\") @db.Uuid\n  allowCovers    Boolean                  @default(true) @map(\"allow_covers\")\n  showComplete   Boolean                  @default(true) @map(\"show_complete\")\n  createdAt      DateTime                 @default(now()) @map(\"created_at\") @db.Timestamptz(6)\n  updatedAt      DateTime                 @default(now()) @map(\"updated_at\") @db.Timestamptz(6)\n  lastActivityAt DateTime?                @map(\"last_activity_at\") @db.Timestamptz(6)\n  background     BoardBackground\n  visibility     BoardVisibility          @default(WorkspaceMembers)\n  memberManage   MemberManageRestrictions @default(Members) @map(\"member_manage\")\n  commenting     CommentingRestrictions   @default(BoardMembers)\n\n  activityLogs ActivityLog[]\n  boardMembers BoardMember[]\n  creator      User          @relation(fields: [createdBy], references: [id], onUpdate: NoAction)\n  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onUpdate: NoAction, onDelete: Cascade)\n  labels       Label[]\n  lists        List[]\n\n  @@index([workspaceId], map: \"boards_workspace_idx\")\n  @@map(\"boards\")\n}\n\nmodel CardAssignee {\n\n  cardId String @map(\"card_id\") @db.Uuid\n  userId String @map(\"user_id\") @db.Uuid\n\n  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@id([cardId, userId])\n  @@index([userId], map: \"card_assignees_user_idx\")\n  @@map(\"card_assignees\")\n}\n\nmodel CardLabel {\n\n  cardId  String @map(\"card_id\") @db.Uuid\n  labelId String @map(\"label_id\") @db.Uuid\n\n  card  Card  @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  label Label @relation(fields: [labelId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@id([cardId, labelId])\n  @@map(\"card_labels\")\n}\n\nmodel CardWatcher {\n\n  cardId    String   @map(\"card_id\") @db.Uuid\n  userId    String   @map(\"user_id\") @db.Uuid\n  createdAt DateTime @default(now()) @map(\"created_at\") @db.Timestamptz(6)\n\n  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@id([cardId, userId])\n  @@index([userId], map: \"card_watchers_user_idx\")\n  @@map(\"card_watchers\")\n}\n\nmodel Card {\n\n  id            String                   @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  listId        String                   @map(\"list_id\") @db.Uuid\n  title         String\n  description   String?\n  dueDate       DateTime?                @map(\"due_date\") @db.Timestamptz(6)\n  startDate     DateTime?                @map(\"start_date\") @db.Timestamptz(6)\n  position      Decimal                  @db.Decimal(16, 6)\n  isArchived    Boolean                  @default(false) @map(\"is_archived\")\n  createdBy     String                   @map(\"created_by\") @db.Uuid\n  coverImageUrl String?                  @map(\"cover_image_url\")\n  createdAt     DateTime                 @default(now()) @map(\"created_at\") @db.Timestamptz(6)\n  updatedAt     DateTime                 @default(now()) @map(\"updated_at\") @db.Timestamptz(6)\n  searchDoc     Unsupported(\"tsvector\")? @map(\"search_doc\")\n\n  activityLogs ActivityLog[]\n  attachments  Attachment[]\n  assignees    CardAssignee[]\n  cardLabels   CardLabel[]\n  watchers     CardWatcher[]\n  creator      User           @relation(fields: [createdBy], references: [id], onUpdate: NoAction)\n  list         List           @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  checklists   Checklist[]\n  comments     Comment[]\n\n  @@unique([listId, position], map: \"cards_order_idx\")\n  @@index([searchDoc], map: \"cards_search_gin_idx\", type: Gin)\n  @@map(\"cards\")\n}\n\nmodel ChecklistItemAssignee {\n\n  itemId String @map(\"item_id\") @db.Uuid\n  userId String @map(\"user_id\") @db.Uuid\n\n  item ChecklistItem @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  user User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@id([itemId, userId])\n  @@map(\"checklist_item_assignees\")\n}\n\nmodel ChecklistItem {\n\n  id          String    @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  checklistId String    @map(\"checklist_id\") @db.Uuid\n  text        String\n  isCompleted Boolean   @default(false) @map(\"is_completed\")\n  dueDate     DateTime? @map(\"due_date\") @db.Timestamptz(6)\n  position    Decimal   @default(1000) @db.Decimal(16, 6)\n\n  assignees ChecklistItemAssignee[]\n  checklist Checklist               @relation(fields: [checklistId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@index([checklistId, position], map: \"checklist_items_parent_pos_idx\")\n  @@map(\"checklist_items\")\n}\n\nmodel Checklist {\n\n  id       String  @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  cardId   String  @map(\"card_id\") @db.Uuid\n  title    String\n  position Decimal @default(1000) @db.Decimal(16, 6)\n\n  items ChecklistItem[]\n  card  Card            @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@index([cardId, position], map: \"checklists_card_pos_idx\")\n  @@map(\"checklists\")\n}\n\nmodel Comment {\n\n  id        String   @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  cardId    String   @map(\"card_id\") @db.Uuid\n  userId    String   @map(\"user_id\") @db.Uuid\n  text      String\n  createdAt DateTime @default(now()) @map(\"created_at\") @db.Timestamptz(6)\n\n  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@index([cardId, createdAt(sort: Desc)], map: \"comments_card_time_idx\")\n  @@map(\"comments\")\n}\n\nmodel Label {\n\n  id      String  @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  boardId String  @map(\"board_id\") @db.Uuid\n  name    String?\n  color   Color\n\n  cardLabels CardLabel[]\n  board      Board       @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@unique([boardId, name])\n  @@index([boardId], map: \"labels_board_idx\")\n  @@map(\"labels\")\n}\n\nmodel ListWatcher {\n\n  listId    String   @map(\"list_id\") @db.Uuid\n  userId    String   @map(\"user_id\") @db.Uuid\n  createdAt DateTime @default(now()) @map(\"created_at\") @db.Timestamptz(6)\n\n  list List @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@id([listId, userId])\n  @@map(\"list_watchers\")\n}\n\nmodel List {\n\n  id         String  @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  boardId    String  @map(\"board_id\") @db.Uuid\n  name       String\n  position   Decimal @db.Decimal(16, 6)\n  isArchived Boolean @default(false) @map(\"is_archived\")\n  subscribed Boolean @default(false)\n\n  cards    Card[]\n  watchers ListWatcher[]\n  board    Board         @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@unique([boardId, position], map: \"lists_order_idx\")\n  @@map(\"lists\")\n}\n\nmodel User {\n\n  id                   String   @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  clerkId              String   @unique @map(\"clerk_id\")\n  email                String   @unique(map: \"users_email_idx\") @db.Citext\n  username             String?  @unique(map: \"users_username_idx\") @db.Citext\n  fullName             String   @map(\"full_name\")\n  avatarUrl            String   @map(\"avatar_url\")\n  theme                Theme    @default(System)\n  recentlyViewedBoards String[] @default([]) @map(\"recently_viewed_boards\")\n  emailNotification    Boolean  @default(true) @map(\"email_notification\")\n  pushNotification     Boolean  @default(false) @map(\"push_notification\")\n  createdAt            DateTime @default(now()) @map(\"created_at\") @db.Timestamptz(6)\n  bio                  String?\n\n  activityLogs           ActivityLog[]\n  attachments            Attachment[]\n  boardMembers           BoardMember[]\n  boards                 Board[]\n  cardAssignees          CardAssignee[]\n  cardWatchers           CardWatcher[]\n  cards                  Card[]\n  checklistItemAssignees ChecklistItemAssignee[]\n  comments               Comment[]\n  listWatchers           ListWatcher[]\n  workspaceMembers       WorkspaceMember[]\n  workspaces             Workspace[]\n\n  @@map(\"users\")\n}\n\nmodel WorkspaceMember {\n\n  workspaceId String        @map(\"workspace_id\") @db.Uuid\n  userId      String        @map(\"user_id\") @db.Uuid\n  role        WorkspaceRole @default(Member)\n  joinedAt    DateTime      @default(now()) @map(\"joined_at\") @db.Timestamptz(6)\n\n  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: NoAction)\n\n  @@id([workspaceId, userId])\n  @@map(\"workspace_members\")\n}\n\nmodel Workspace {\n\n  id                              String                    @id @default(dbgenerated(\"gen_random_uuid()\")) @db.Uuid\n  name                            String\n  description                     String?\n  visibility                      WorkspaceVisibility       @default(Private)\n  premium                         Boolean                   @default(false)\n  createdAt                       DateTime                  @default(now()) @map(\"created_at\") @db.Timestamptz(6)\n  updatedAt                       DateTime                  @default(now()) @map(\"updated_at\") @db.Timestamptz(6)\n  type                            WorkspaceType\n  createdBy                       String                    @map(\"created_by\") @db.Uuid\n  workspaceMembershipRestrictions MembershipRestrictions    @default(Anybody) @map(\"workspace_membership_restrictions\")\n  publicBoardCreation             BoardCreationRestrictions @default(WorkspaceMember) @map(\"public_board_creation\")\n  workspaceBoardCreation          BoardCreationRestrictions @default(WorkspaceMember) @map(\"workspace_board_creation\")\n  privateBoardCreation            BoardCreationRestrictions @default(WorkspaceMember) @map(\"private_board_creation\")\n  publicBoardDeletion             BoardCreationRestrictions @default(WorkspaceMember) @map(\"public_board_deletion\")\n  workspaceBoardDeletion          BoardCreationRestrictions @default(WorkspaceMember) @map(\"workspace_board_deletion\")\n  privateBoardDeletion            BoardCreationRestrictions @default(WorkspaceMember) @map(\"private_board_deletion\")\n  allowGuestSharing               BoardSharing              @default(Anybody) @map(\"allow_guest_sharing\")\n  allowSlackIntegration           SlackSharing              @default(WorkspaceMember) @map(\"allow_slack_integration\")\n\n  boards           Board[]\n  workspaceMembers WorkspaceMember[]\n  creator          User              @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)\n\n  @@index([visibility])\n  @@map(\"workspaces\")\n}\n",
  "inlineSchemaHash": "c5ad7cd9c1e6307bdca9bfcd5b226396ac45a705bc21c1960de06468c32a7b2c",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"ActivityLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"boardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"board_id\"},{\"name\":\"cardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"card_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"action\",\"kind\":\"enum\",\"type\":\"ActivityAction\"},{\"name\":\"payload\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"board\",\"kind\":\"object\",\"type\":\"Board\",\"relationName\":\"ActivityLogToBoard\"},{\"name\":\"card\",\"kind\":\"object\",\"type\":\"Card\",\"relationName\":\"ActivityLogToCard\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ActivityLogToUser\"}],\"dbName\":\"activity_log\"},\"Attachment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"card_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"filename\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bytes\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"card\",\"kind\":\"object\",\"type\":\"Card\",\"relationName\":\"AttachmentToCard\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AttachmentToUser\"}],\"dbName\":\"attachments\"},\"BoardMember\":{\"fields\":[{\"name\":\"boardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"board_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"BoardRole\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"joined_at\"},{\"name\":\"board\",\"kind\":\"object\",\"type\":\"Board\",\"relationName\":\"BoardToBoardMember\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BoardMemberToUser\"}],\"dbName\":\"board_members\"},\"Board\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workspaceId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"workspace_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"created_by\"},{\"name\":\"allowCovers\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"allow_covers\"},{\"name\":\"showComplete\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"show_complete\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"lastActivityAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"last_activity_at\"},{\"name\":\"background\",\"kind\":\"enum\",\"type\":\"BoardBackground\"},{\"name\":\"visibility\",\"kind\":\"enum\",\"type\":\"BoardVisibility\"},{\"name\":\"memberManage\",\"kind\":\"enum\",\"type\":\"MemberManageRestrictions\",\"dbName\":\"member_manage\"},{\"name\":\"commenting\",\"kind\":\"enum\",\"type\":\"CommentingRestrictions\"},{\"name\":\"activityLogs\",\"kind\":\"object\",\"type\":\"ActivityLog\",\"relationName\":\"ActivityLogToBoard\"},{\"name\":\"boardMembers\",\"kind\":\"object\",\"type\":\"BoardMember\",\"relationName\":\"BoardToBoardMember\"},{\"name\":\"creator\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BoardToUser\"},{\"name\":\"workspace\",\"kind\":\"object\",\"type\":\"Workspace\",\"relationName\":\"BoardToWorkspace\"},{\"name\":\"labels\",\"kind\":\"object\",\"type\":\"Label\",\"relationName\":\"BoardToLabel\"},{\"name\":\"lists\",\"kind\":\"object\",\"type\":\"List\",\"relationName\":\"BoardToList\"}],\"dbName\":\"boards\"},\"CardAssignee\":{\"fields\":[{\"name\":\"cardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"card_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"card\",\"kind\":\"object\",\"type\":\"Card\",\"relationName\":\"CardToCardAssignee\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CardAssigneeToUser\"}],\"dbName\":\"card_assignees\"},\"CardLabel\":{\"fields\":[{\"name\":\"cardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"card_id\"},{\"name\":\"labelId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"label_id\"},{\"name\":\"card\",\"kind\":\"object\",\"type\":\"Card\",\"relationName\":\"CardToCardLabel\"},{\"name\":\"label\",\"kind\":\"object\",\"type\":\"Label\",\"relationName\":\"CardLabelToLabel\"}],\"dbName\":\"card_labels\"},\"CardWatcher\":{\"fields\":[{\"name\":\"cardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"card_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"card\",\"kind\":\"object\",\"type\":\"Card\",\"relationName\":\"CardToCardWatcher\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CardWatcherToUser\"}],\"dbName\":\"card_watchers\"},\"Card\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"listId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"list_id\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"due_date\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"start_date\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"isArchived\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_archived\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"created_by\"},{\"name\":\"coverImageUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"cover_image_url\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"activityLogs\",\"kind\":\"object\",\"type\":\"ActivityLog\",\"relationName\":\"ActivityLogToCard\"},{\"name\":\"attachments\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToCard\"},{\"name\":\"assignees\",\"kind\":\"object\",\"type\":\"CardAssignee\",\"relationName\":\"CardToCardAssignee\"},{\"name\":\"cardLabels\",\"kind\":\"object\",\"type\":\"CardLabel\",\"relationName\":\"CardToCardLabel\"},{\"name\":\"watchers\",\"kind\":\"object\",\"type\":\"CardWatcher\",\"relationName\":\"CardToCardWatcher\"},{\"name\":\"creator\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CardToUser\"},{\"name\":\"list\",\"kind\":\"object\",\"type\":\"List\",\"relationName\":\"CardToList\"},{\"name\":\"checklists\",\"kind\":\"object\",\"type\":\"Checklist\",\"relationName\":\"CardToChecklist\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CardToComment\"}],\"dbName\":\"cards\"},\"ChecklistItemAssignee\":{\"fields\":[{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"item_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"ChecklistItem\",\"relationName\":\"ChecklistItemToChecklistItemAssignee\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ChecklistItemAssigneeToUser\"}],\"dbName\":\"checklist_item_assignees\"},\"ChecklistItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"checklistId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"checklist_id\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_completed\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"due_date\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"assignees\",\"kind\":\"object\",\"type\":\"ChecklistItemAssignee\",\"relationName\":\"ChecklistItemToChecklistItemAssignee\"},{\"name\":\"checklist\",\"kind\":\"object\",\"type\":\"Checklist\",\"relationName\":\"ChecklistToChecklistItem\"}],\"dbName\":\"checklist_items\"},\"Checklist\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"card_id\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"ChecklistItem\",\"relationName\":\"ChecklistToChecklistItem\"},{\"name\":\"card\",\"kind\":\"object\",\"type\":\"Card\",\"relationName\":\"CardToChecklist\"}],\"dbName\":\"checklists\"},\"Comment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"card_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"card\",\"kind\":\"object\",\"type\":\"Card\",\"relationName\":\"CardToComment\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentToUser\"}],\"dbName\":\"comments\"},\"Label\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"boardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"board_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"color\",\"kind\":\"enum\",\"type\":\"Color\"},{\"name\":\"cardLabels\",\"kind\":\"object\",\"type\":\"CardLabel\",\"relationName\":\"CardLabelToLabel\"},{\"name\":\"board\",\"kind\":\"object\",\"type\":\"Board\",\"relationName\":\"BoardToLabel\"}],\"dbName\":\"labels\"},\"ListWatcher\":{\"fields\":[{\"name\":\"listId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"list_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"list\",\"kind\":\"object\",\"type\":\"List\",\"relationName\":\"ListToListWatcher\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ListWatcherToUser\"}],\"dbName\":\"list_watchers\"},\"List\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"boardId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"board_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"position\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"isArchived\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"is_archived\"},{\"name\":\"subscribed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"cards\",\"kind\":\"object\",\"type\":\"Card\",\"relationName\":\"CardToList\"},{\"name\":\"watchers\",\"kind\":\"object\",\"type\":\"ListWatcher\",\"relationName\":\"ListToListWatcher\"},{\"name\":\"board\",\"kind\":\"object\",\"type\":\"Board\",\"relationName\":\"BoardToList\"}],\"dbName\":\"lists\"},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clerkId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"clerk_id\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"full_name\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"avatar_url\"},{\"name\":\"theme\",\"kind\":\"enum\",\"type\":\"Theme\"},{\"name\":\"recentlyViewedBoards\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"recently_viewed_boards\"},{\"name\":\"emailNotification\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"email_notification\"},{\"name\":\"pushNotification\",\"kind\":\"scalar\",\"type\":\"Boolean\",\"dbName\":\"push_notification\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"activityLogs\",\"kind\":\"object\",\"type\":\"ActivityLog\",\"relationName\":\"ActivityLogToUser\"},{\"name\":\"attachments\",\"kind\":\"object\",\"type\":\"Attachment\",\"relationName\":\"AttachmentToUser\"},{\"name\":\"boardMembers\",\"kind\":\"object\",\"type\":\"BoardMember\",\"relationName\":\"BoardMemberToUser\"},{\"name\":\"boards\",\"kind\":\"object\",\"type\":\"Board\",\"relationName\":\"BoardToUser\"},{\"name\":\"cardAssignees\",\"kind\":\"object\",\"type\":\"CardAssignee\",\"relationName\":\"CardAssigneeToUser\"},{\"name\":\"cardWatchers\",\"kind\":\"object\",\"type\":\"CardWatcher\",\"relationName\":\"CardWatcherToUser\"},{\"name\":\"cards\",\"kind\":\"object\",\"type\":\"Card\",\"relationName\":\"CardToUser\"},{\"name\":\"checklistItemAssignees\",\"kind\":\"object\",\"type\":\"ChecklistItemAssignee\",\"relationName\":\"ChecklistItemAssigneeToUser\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToUser\"},{\"name\":\"listWatchers\",\"kind\":\"object\",\"type\":\"ListWatcher\",\"relationName\":\"ListWatcherToUser\"},{\"name\":\"workspaceMembers\",\"kind\":\"object\",\"type\":\"WorkspaceMember\",\"relationName\":\"UserToWorkspaceMember\"},{\"name\":\"workspaces\",\"kind\":\"object\",\"type\":\"Workspace\",\"relationName\":\"UserToWorkspace\"}],\"dbName\":\"users\"},\"WorkspaceMember\":{\"fields\":[{\"name\":\"workspaceId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"workspace_id\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"user_id\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"WorkspaceRole\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"joined_at\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWorkspaceMember\"},{\"name\":\"workspace\",\"kind\":\"object\",\"type\":\"Workspace\",\"relationName\":\"WorkspaceToWorkspaceMember\"}],\"dbName\":\"workspace_members\"},\"Workspace\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"visibility\",\"kind\":\"enum\",\"type\":\"WorkspaceVisibility\"},{\"name\":\"premium\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"WorkspaceType\"},{\"name\":\"createdBy\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"created_by\"},{\"name\":\"workspaceMembershipRestrictions\",\"kind\":\"enum\",\"type\":\"MembershipRestrictions\",\"dbName\":\"workspace_membership_restrictions\"},{\"name\":\"publicBoardCreation\",\"kind\":\"enum\",\"type\":\"BoardCreationRestrictions\",\"dbName\":\"public_board_creation\"},{\"name\":\"workspaceBoardCreation\",\"kind\":\"enum\",\"type\":\"BoardCreationRestrictions\",\"dbName\":\"workspace_board_creation\"},{\"name\":\"privateBoardCreation\",\"kind\":\"enum\",\"type\":\"BoardCreationRestrictions\",\"dbName\":\"private_board_creation\"},{\"name\":\"publicBoardDeletion\",\"kind\":\"enum\",\"type\":\"BoardCreationRestrictions\",\"dbName\":\"public_board_deletion\"},{\"name\":\"workspaceBoardDeletion\",\"kind\":\"enum\",\"type\":\"BoardCreationRestrictions\",\"dbName\":\"workspace_board_deletion\"},{\"name\":\"privateBoardDeletion\",\"kind\":\"enum\",\"type\":\"BoardCreationRestrictions\",\"dbName\":\"private_board_deletion\"},{\"name\":\"allowGuestSharing\",\"kind\":\"enum\",\"type\":\"BoardSharing\",\"dbName\":\"allow_guest_sharing\"},{\"name\":\"allowSlackIntegration\",\"kind\":\"enum\",\"type\":\"SlackSharing\",\"dbName\":\"allow_slack_integration\"},{\"name\":\"boards\",\"kind\":\"object\",\"type\":\"Board\",\"relationName\":\"BoardToWorkspace\"},{\"name\":\"workspaceMembers\",\"kind\":\"object\",\"type\":\"WorkspaceMember\",\"relationName\":\"WorkspaceToWorkspaceMember\"},{\"name\":\"creator\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWorkspace\"}],\"dbName\":\"workspaces\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

