name: ci-cd

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write   # for AWS OIDC
  contents: read

env:
  # === EDIT ME if your paths differ ===
  BACKEND_WORKDIR: backend
  FRONTEND_WORKDIR: frontend
  FRONTEND_BUILD_DIR: dist   # change to 'build' if CRA
  # ================================

  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
  ECR_BACKEND: ${{ vars.ECR_BACKEND }}
  EC2_HOST: ${{ vars.EC2_HOST }}
  EC2_USER: ${{ vars.EC2_USER }}
  EC2_PATH: ${{ vars.EC2_PATH }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check GH_PACKAGES_TOKEN present
        run: test -n "${{ secrets.GH_PACKAGES_TOKEN }}" || (echo "Missing GH_PACKAGES_TOKEN secret" && exit 1)

      - name: Build backend image
        working-directory: ${{ env.BACKEND_WORKDIR }}
        env:
          DOCKER_BUILDKIT: 1
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_BACKEND}
          docker build \
            --no-cache \
            --secret id=GH_PACKAGES_TOKEN,env=GH_PACKAGES_TOKEN \
            -t ${IMAGE_URI}:latest -t ${IMAGE_URI}:${GITHUB_SHA::7} .

      - name: Auth for GitHub Packages (frontend)
        working-directory: ${{ env.FRONTEND_WORKDIR }}
        env:
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          echo "@ronmordo:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${GH_PACKAGES_TOKEN}" >> .npmrc
          echo "always-auth=true" >> .npmrc


      - name: Push backend image
        run: |
          IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_BACKEND}
          docker push ${IMAGE_URI}:latest
          docker push ${IMAGE_URI}:${GITHUB_SHA::7}

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_WORKDIR }}
        env:
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          NPM_CONFIG_LEGACY_PEER_DEPS: "true"
        run: |
          npm ci --legacy-peer-deps
          npm run build
          rm -f .npmrc
          cd ${{ github.workspace }}
          zip -r /tmp/frontend_build.zip ${FRONTEND_WORKDIR}/${FRONTEND_BUILD_DIR}

      - name: Prepare SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/deploy_key
          chmod 600 /tmp/deploy_key

      - name: Upload frontend build to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i /tmp/deploy_key /tmp/frontend_build.zip ${EC2_USER}@${EC2_HOST}:/tmp/frontend_build.zip

      - name: Remote deploy on EC2
        run: |
          ssh -tt \
            -o StrictHostKeyChecking=no \
            -o ServerAliveInterval=15 \
            -o ServerAliveCountMax=6 \
            -i /tmp/deploy_key \
            "${EC2_USER}@${EC2_HOST}" "
              set -e
      
              # pass only what we actually need
              AWS_REGION='${AWS_REGION}'; export AWS_REGION AWS_DEFAULT_REGION=\$AWS_REGION
              AWS_ACCOUNT_ID='${AWS_ACCOUNT_ID}'; export AWS_ACCOUNT_ID
              EC2_PATH='${EC2_PATH}'
      
              # tools
              sudo apt-get update -y
              sudo apt-get install -y unzip curl >/dev/null 2>&1 || true
              if ! command -v aws >/dev/null 2>&1; then
                curl -sSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /tmp/awscliv2.zip
                unzip -q /tmp/awscliv2.zip -d /tmp
                sudo /tmp/aws/install
              fi
      
              cd \"\$EC2_PATH\"
              mkdir -p frontend_build
      
              # unpack uploaded zip
              rm -rf /tmp/fb && mkdir -p /tmp/fb
              unzip -q /tmp/frontend_build.zip -d /tmp/fb
      
              # find a 'dist' or 'build' dir (up to depth 3); copy its contents incl. dotfiles
              TARGET=\$(find /tmp/fb -maxdepth 3 -type d \( -name dist -o -name build \) | head -n 1)
              rm -rf frontend_build/*
      
              if [ -n \"\$TARGET\" ]; then
                cp -a \"\$TARGET\"/. frontend_build/
              else
                # fallback: copy everything
                cp -a /tmp/fb/. frontend_build/
              fi
      
              # ECR login & restart
              aws ecr get-login-password --region \"\$AWS_REGION\" \
                | docker login --username AWS --password-stdin \"\$AWS_ACCOUNT_ID.dkr.ecr.\$AWS_REGION.amazonaws.com\"
      
              docker compose pull
              docker compose run --rm backend npx prisma migrate deploy
              docker compose up -d --remove-orphans
            "
      
